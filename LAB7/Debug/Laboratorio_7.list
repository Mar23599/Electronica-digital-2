
Laboratorio_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  080060f0  080060f0  000070f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c0  080066c0  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080066c0  080066c0  000076c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066c8  080066c8  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c8  080066c8  000076c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066cc  080066cc  000076cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080066d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000251c  20000070  08006740  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000258c  08006740  0000858c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e158  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002501  00000000  00000000  000161f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00018700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ae  00000000  00000000  000193a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002320a  00000000  00000000  00019d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d58  00000000  00000000  0003cf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc253  00000000  00000000  0004fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bf03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000381c  00000000  00000000  0011bf48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0011f764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080060d8 	.word	0x080060d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080060d8 	.word	0x080060d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <transmit_uart>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void transmit_uart(char *string){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fe0b 	bl	8000210 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <transmit_uart+0x28>)
 8000606:	f001 fd5c 	bl	80020c2 <HAL_UART_Transmit>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200021b8 	.word	0x200021b8

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b09a      	sub	sp, #104	@ 0x68
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fb59 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f8a1 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f96d 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062a:	f000 f941 	bl	80008b0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800062e:	f000 f909 	bl	8000844 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000632:	f002 f901 	bl	8002838 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //--------MONTAJE-------
  fres = f_mount(&fs, "/", 0);
 8000636:	2200      	movs	r2, #0
 8000638:	493a      	ldr	r1, [pc, #232]	@ (8000724 <main+0x10c>)
 800063a:	483b      	ldr	r0, [pc, #236]	@ (8000728 <main+0x110>)
 800063c:	f004 fb36 	bl	8004cac <f_mount>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b39      	ldr	r3, [pc, #228]	@ (800072c <main+0x114>)
 8000646:	701a      	strb	r2, [r3, #0]

  if(fres == FR_OK){
 8000648:	4b38      	ldr	r3, [pc, #224]	@ (800072c <main+0x114>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d103      	bne.n	8000658 <main+0x40>

	  transmit_uart("SD Montada! \n");
 8000650:	4837      	ldr	r0, [pc, #220]	@ (8000730 <main+0x118>)
 8000652:	f7ff ffcb 	bl	80005ec <transmit_uart>
 8000656:	e006      	b.n	8000666 <main+0x4e>

  } else if(fres != FR_OK){
 8000658:	4b34      	ldr	r3, [pc, #208]	@ (800072c <main+0x114>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <main+0x4e>

	  transmit_uart("ERROR: SD NO Montada! \n");
 8000660:	4834      	ldr	r0, [pc, #208]	@ (8000734 <main+0x11c>)
 8000662:	f7ff ffc3 	bl	80005ec <transmit_uart>
  }

  //--------ABRIR ARCHIVO -----
  fres = f_open(&fil, "Gojo_1_txt.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8000666:	2233      	movs	r2, #51	@ 0x33
 8000668:	4933      	ldr	r1, [pc, #204]	@ (8000738 <main+0x120>)
 800066a:	4834      	ldr	r0, [pc, #208]	@ (800073c <main+0x124>)
 800066c:	f004 fb64 	bl	8004d38 <f_open>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <main+0x114>)
 8000676:	701a      	strb	r2, [r3, #0]

  if(fres == FR_OK){
 8000678:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <main+0x114>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d103      	bne.n	8000688 <main+0x70>

	  transmit_uart("Archivo Abierto! \n");
 8000680:	482f      	ldr	r0, [pc, #188]	@ (8000740 <main+0x128>)
 8000682:	f7ff ffb3 	bl	80005ec <transmit_uart>
 8000686:	e011      	b.n	80006ac <main+0x94>

  } else if(fres != FR_OK){
 8000688:	4b28      	ldr	r3, [pc, #160]	@ (800072c <main+0x114>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00d      	beq.n	80006ac <main+0x94>

	  transmit_uart("ERROR: Archivo No se abrio! \n");
 8000690:	482c      	ldr	r0, [pc, #176]	@ (8000744 <main+0x12c>)
 8000692:	f7ff ffab 	bl	80005ec <transmit_uart>


//------------LECTURA DEL ARCHIVO


  while(f_gets(buffer, sizeof(buffer), &fil)){
 8000696:	e009      	b.n	80006ac <main+0x94>
	  char mRd[100];
	  sprintf(mRd, "%s", buffer);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <main+0x130>)
 800069c:	492b      	ldr	r1, [pc, #172]	@ (800074c <main+0x134>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 f87a 	bl	8005798 <siprintf>
	 transmit_uart(mRd);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ffa0 	bl	80005ec <transmit_uart>
  while(f_gets(buffer, sizeof(buffer), &fil)){
 80006ac:	4a23      	ldr	r2, [pc, #140]	@ (800073c <main+0x124>)
 80006ae:	2164      	movs	r1, #100	@ 0x64
 80006b0:	4825      	ldr	r0, [pc, #148]	@ (8000748 <main+0x130>)
 80006b2:	f004 ff10 	bl	80054d6 <f_gets>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1ed      	bne.n	8000698 <main+0x80>
  }

  transmit_uart("Esperando 5 segundos\n");
 80006bc:	4824      	ldr	r0, [pc, #144]	@ (8000750 <main+0x138>)
 80006be:	f7ff ff95 	bl	80005ec <transmit_uart>
  HAL_Delay(5000);
 80006c2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80006c6:	f000 fb77 	bl	8000db8 <HAL_Delay>


  fres = f_close(&fil); //Cerrar archivo
 80006ca:	481c      	ldr	r0, [pc, #112]	@ (800073c <main+0x124>)
 80006cc:	f004 fed9 	bl	8005482 <f_close>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <main+0x114>)
 80006d6:	701a      	strb	r2, [r3, #0]
  if(fres == FR_OK){
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <main+0x114>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d103      	bne.n	80006e8 <main+0xd0>

	  transmit_uart("Archivo cerrado! \n");
 80006e0:	481c      	ldr	r0, [pc, #112]	@ (8000754 <main+0x13c>)
 80006e2:	f7ff ff83 	bl	80005ec <transmit_uart>
 80006e6:	e006      	b.n	80006f6 <main+0xde>

  } else if(fres != FR_OK){
 80006e8:	4b10      	ldr	r3, [pc, #64]	@ (800072c <main+0x114>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <main+0xde>

	  transmit_uart("ERROR: Archivo NO se cerro! \n");
 80006f0:	4819      	ldr	r0, [pc, #100]	@ (8000758 <main+0x140>)
 80006f2:	f7ff ff7b 	bl	80005ec <transmit_uart>
  }

  f_mount(NULL, "", 1); // Desmontar
 80006f6:	2201      	movs	r2, #1
 80006f8:	4918      	ldr	r1, [pc, #96]	@ (800075c <main+0x144>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f004 fad6 	bl	8004cac <f_mount>

  if(fres == FR_OK){
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <main+0x114>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d103      	bne.n	8000710 <main+0xf8>

	  transmit_uart("SD desmontada! \n");
 8000708:	4815      	ldr	r0, [pc, #84]	@ (8000760 <main+0x148>)
 800070a:	f7ff ff6f 	bl	80005ec <transmit_uart>
 800070e:	e007      	b.n	8000720 <main+0x108>

  } else if(fres != FR_OK){
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <main+0x114>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <main+0x108>

	  transmit_uart("ERROR: NO pudo ser desmontada! \n");
 8000718:	4812      	ldr	r0, [pc, #72]	@ (8000764 <main+0x14c>)
 800071a:	f7ff ff67 	bl	80005ec <transmit_uart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <main+0x108>
 8000724:	080060f0 	.word	0x080060f0
 8000728:	200000e8 	.word	0x200000e8
 800072c:	20002150 	.word	0x20002150
 8000730:	080060f4 	.word	0x080060f4
 8000734:	08006104 	.word	0x08006104
 8000738:	0800611c 	.word	0x0800611c
 800073c:	20001120 	.word	0x20001120
 8000740:	0800612c 	.word	0x0800612c
 8000744:	08006140 	.word	0x08006140
 8000748:	20002154 	.word	0x20002154
 800074c:	08006160 	.word	0x08006160
 8000750:	08006164 	.word	0x08006164
 8000754:	0800617c 	.word	0x0800617c
 8000758:	08006190 	.word	0x08006190
 800075c:	080061b0 	.word	0x080061b0
 8000760:	080061b4 	.word	0x080061b4
 8000764:	080061c8 	.word	0x080061c8

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	@ 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2234      	movs	r2, #52	@ 0x34
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f005 f830 	bl	80057dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b2a      	ldr	r3, [pc, #168]	@ (800083c <SystemClock_Config+0xd4>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	4a29      	ldr	r2, [pc, #164]	@ (800083c <SystemClock_Config+0xd4>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	@ 0x40
 800079c:	4b27      	ldr	r3, [pc, #156]	@ (800083c <SystemClock_Config+0xd4>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a8:	2300      	movs	r3, #0
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <SystemClock_Config+0xd8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b4:	4a22      	ldr	r2, [pc, #136]	@ (8000840 <SystemClock_Config+0xd8>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <SystemClock_Config+0xd8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2310      	movs	r3, #16
 80007d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d4:	2302      	movs	r3, #2
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007dc:	2310      	movs	r3, #16
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f8ec 	bl	80019d4 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000802:	f000 f8ed 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2302      	movs	r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2102      	movs	r1, #2
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fd8c 	bl	8001340 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800082e:	f000 f8d7 	bl	80009e0 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	@ 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <MX_SPI1_Init+0x64>)
 800084a:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <MX_SPI1_Init+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000854:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000856:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_SPI1_Init+0x64>)
 8000870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000874:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_SPI1_Init+0x64>)
 8000878:	2210      	movs	r2, #16
 800087a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_SPI1_Init+0x64>)
 8000890:	220a      	movs	r2, #10
 8000892:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_SPI1_Init+0x64>)
 8000896:	f001 fb3b 	bl	8001f10 <HAL_SPI_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a0:	f000 f89e 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000090 	.word	0x20000090
 80008ac:	40013000 	.word	0x40013000

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <MX_USART2_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e8:	f001 fb9b 	bl	8002022 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f875 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200021b8 	.word	0x200021b8
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a2c      	ldr	r2, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a25      	ldr	r2, [pc, #148]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a1e      	ldr	r2, [pc, #120]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2140      	movs	r1, #64	@ 0x40
 800098e:	4812      	ldr	r0, [pc, #72]	@ (80009d8 <MX_GPIO_Init+0xd4>)
 8000990:	f000 fcbc 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	480c      	ldr	r0, [pc, #48]	@ (80009dc <MX_GPIO_Init+0xd8>)
 80009ac:	f000 fb1a 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 80009b0:	2340      	movs	r3, #64	@ 0x40
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_GPIO_Init+0xd4>)
 80009c8:	f000 fb0c 	bl	8000fe4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	@ 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40020800 	.word	0x40020800

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <Error_Handler+0x8>

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2a:	2007      	movs	r0, #7
 8000a2c:	f000 fa9a 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <HAL_SPI_MspInit+0x84>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d12b      	bne.n	8000ab6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a96:	23e0      	movs	r3, #224	@ 0xe0
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <HAL_SPI_MspInit+0x8c>)
 8000ab2:	f000 fa97 	bl	8000fe4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40013000 	.word	0x40013000
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000

08000acc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	@ (8000b50 <HAL_UART_MspInit+0x84>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12b      	bne.n	8000b46 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a10      	ldr	r2, [pc, #64]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b26:	230c      	movs	r3, #12
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b36:	2307      	movs	r3, #7
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <HAL_UART_MspInit+0x8c>)
 8000b42:	f000 fa4f 	bl	8000fe4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	@ 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40004400 	.word	0x40004400
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <NMI_Handler+0x4>

08000b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <MemManage_Handler+0x4>

08000b74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(Timer1 > 0){
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <SysTick_Handler+0x38>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <SysTick_Handler+0x18>
		Timer1--;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <SysTick_Handler+0x38>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <SysTick_Handler+0x38>)
 8000bc6:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 > 0){
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <SysTick_Handler+0x3c>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d005      	beq.n	8000bdc <SysTick_Handler+0x2c>
		Timer2--;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <SysTick_Handler+0x3c>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <SysTick_Handler+0x3c>)
 8000bda:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f8cc 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000be0:	f000 f9f3 	bl	8000fca <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000008c 	.word	0x2000008c
 8000bec:	2000008e 	.word	0x2000008e

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	@ (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f004 fde4 	bl	80057ec <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20020000 	.word	0x20020000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	20002200 	.word	0x20002200
 8000c58:	20002590 	.word	0x20002590

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c84:	f7ff ffea 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f004 fda3 	bl	80057f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fcb1 	bl	8000618 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc4:	080066d0 	.word	0x080066d0
  ldr r2, =_sbss
 8000cc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ccc:	2000258c 	.word	0x2000258c

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f931 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe70 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f93b 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f911 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	@ (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20002204 	.word	0x20002204

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20002204 	.word	0x20002204

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5c 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb0 	bl	8000f20 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000fce:	f000 f802 	bl	8000fd6 <HAL_SYSTICK_Callback>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	@ 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e165      	b.n	80012cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8154 	bne.w	80012c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	2b02      	cmp	r3, #2
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80ae 	beq.w	80012c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b5d      	ldr	r3, [pc, #372]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	4a5c      	ldr	r2, [pc, #368]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001178:	6453      	str	r3, [r2, #68]	@ 0x44
 800117a:	4b5a      	ldr	r3, [pc, #360]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001186:	4a58      	ldr	r2, [pc, #352]	@ (80012e8 <HAL_GPIO_Init+0x304>)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	@ (80012ec <HAL_GPIO_Init+0x308>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	@ (80012f0 <HAL_GPIO_Init+0x30c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	@ (80012f4 <HAL_GPIO_Init+0x310>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	@ (80012f8 <HAL_GPIO_Init+0x314>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	@ (80012fc <HAL_GPIO_Init+0x318>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x20a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001300 <HAL_GPIO_Init+0x31c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x206>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a49      	ldr	r2, [pc, #292]	@ (8001304 <HAL_GPIO_Init+0x320>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x202>
 80011e2:	2306      	movs	r3, #6
 80011e4:	e00c      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011e6:	2307      	movs	r3, #7
 80011e8:	e00a      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011fe:	2300      	movs	r3, #0
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	f002 0203 	and.w	r2, r2, #3
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001210:	4935      	ldr	r1, [pc, #212]	@ (80012e8 <HAL_GPIO_Init+0x304>)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121e:	4b3a      	ldr	r3, [pc, #232]	@ (8001308 <HAL_GPIO_Init+0x324>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001242:	4a31      	ldr	r2, [pc, #196]	@ (8001308 <HAL_GPIO_Init+0x324>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001248:	4b2f      	ldr	r3, [pc, #188]	@ (8001308 <HAL_GPIO_Init+0x324>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800126c:	4a26      	ldr	r2, [pc, #152]	@ (8001308 <HAL_GPIO_Init+0x324>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001272:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <HAL_GPIO_Init+0x324>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001296:	4a1c      	ldr	r2, [pc, #112]	@ (8001308 <HAL_GPIO_Init+0x324>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <HAL_GPIO_Init+0x324>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c0:	4a11      	ldr	r2, [pc, #68]	@ (8001308 <HAL_GPIO_Init+0x324>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	f67f ae96 	bls.w	8001000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3724      	adds	r7, #36	@ 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021400 	.word	0x40021400
 8001304:	40021800 	.word	0x40021800
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0cc      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001354:	4b68      	ldr	r3, [pc, #416]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d90c      	bls.n	800137c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b65      	ldr	r3, [pc, #404]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800136a:	4b63      	ldr	r3, [pc, #396]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0b8      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001394:	4b59      	ldr	r3, [pc, #356]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a58      	ldr	r2, [pc, #352]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800139e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ac:	4b53      	ldr	r3, [pc, #332]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4a52      	ldr	r2, [pc, #328]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b8:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	494d      	ldr	r1, [pc, #308]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d044      	beq.n	8001460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b47      	ldr	r3, [pc, #284]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d119      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e07f      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d003      	beq.n	80013fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4b3f      	ldr	r3, [pc, #252]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e06f      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e067      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141e:	4b37      	ldr	r3, [pc, #220]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f023 0203 	bic.w	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4934      	ldr	r1, [pc, #208]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 800142c:	4313      	orrs	r3, r2
 800142e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff fcb6 	bl	8000da0 <HAL_GetTick>
 8001434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	e00a      	b.n	800144e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001438:	f7ff fcb2 	bl	8000da0 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e04f      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 020c 	and.w	r2, r3, #12
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d1eb      	bne.n	8001438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001460:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d20c      	bcs.n	8001488 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e032      	b.n	80014ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4916      	ldr	r1, [pc, #88]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	490e      	ldr	r1, [pc, #56]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014c6:	f000 f855 	bl	8001574 <HAL_RCC_GetSysClockFreq>
 80014ca:	4602      	mov	r2, r0
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	490a      	ldr	r1, [pc, #40]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	5ccb      	ldrb	r3, [r1, r3]
 80014da:	fa22 f303 	lsr.w	r3, r2, r3
 80014de:	4a09      	ldr	r2, [pc, #36]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <HAL_RCC_ClockConfig+0x1c8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fc16 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023c00 	.word	0x40023c00
 80014fc:	40023800 	.word	0x40023800
 8001500:	08006234 	.word	0x08006234
 8001504:	20000000 	.word	0x20000000
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <HAL_RCC_GetHCLKFreq+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000000 	.word	0x20000000

08001524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001528:	f7ff fff0 	bl	800150c <HAL_RCC_GetHCLKFreq>
 800152c:	4602      	mov	r2, r0
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	0a9b      	lsrs	r3, r3, #10
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	4903      	ldr	r1, [pc, #12]	@ (8001548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	08006244 	.word	0x08006244

0800154c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001550:	f7ff ffdc 	bl	800150c <HAL_RCC_GetHCLKFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	0b5b      	lsrs	r3, r3, #13
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	4903      	ldr	r1, [pc, #12]	@ (8001570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	08006244 	.word	0x08006244

08001574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001578:	b0ae      	sub	sp, #184	@ 0xb8
 800157a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800159a:	4bcb      	ldr	r3, [pc, #812]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	f200 8206 	bhi.w	80019b4 <HAL_RCC_GetSysClockFreq+0x440>
 80015a8:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015e5 	.word	0x080015e5
 80015b4:	080019b5 	.word	0x080019b5
 80015b8:	080019b5 	.word	0x080019b5
 80015bc:	080019b5 	.word	0x080019b5
 80015c0:	080015ed 	.word	0x080015ed
 80015c4:	080019b5 	.word	0x080019b5
 80015c8:	080019b5 	.word	0x080019b5
 80015cc:	080019b5 	.word	0x080019b5
 80015d0:	080015f5 	.word	0x080015f5
 80015d4:	080019b5 	.word	0x080019b5
 80015d8:	080019b5 	.word	0x080019b5
 80015dc:	080019b5 	.word	0x080019b5
 80015e0:	080017e5 	.word	0x080017e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e4:	4bb9      	ldr	r3, [pc, #740]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x358>)
 80015e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ea:	e1e7      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ec:	4bb8      	ldr	r3, [pc, #736]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015f2:	e1e3      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f4:	4bb4      	ldr	r3, [pc, #720]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001600:	4bb1      	ldr	r3, [pc, #708]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d071      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160c:	4bae      	ldr	r3, [pc, #696]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	2200      	movs	r2, #0
 8001614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001618:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800161c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800162e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001632:	4622      	mov	r2, r4
 8001634:	462b      	mov	r3, r5
 8001636:	f04f 0000 	mov.w	r0, #0
 800163a:	f04f 0100 	mov.w	r1, #0
 800163e:	0159      	lsls	r1, r3, #5
 8001640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001644:	0150      	lsls	r0, r2, #5
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4621      	mov	r1, r4
 800164c:	1a51      	subs	r1, r2, r1
 800164e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001650:	4629      	mov	r1, r5
 8001652:	eb63 0301 	sbc.w	r3, r3, r1
 8001656:	647b      	str	r3, [r7, #68]	@ 0x44
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001664:	4649      	mov	r1, r9
 8001666:	018b      	lsls	r3, r1, #6
 8001668:	4641      	mov	r1, r8
 800166a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800166e:	4641      	mov	r1, r8
 8001670:	018a      	lsls	r2, r1, #6
 8001672:	4641      	mov	r1, r8
 8001674:	1a51      	subs	r1, r2, r1
 8001676:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001678:	4649      	mov	r1, r9
 800167a:	eb63 0301 	sbc.w	r3, r3, r1
 800167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800168c:	4649      	mov	r1, r9
 800168e:	00cb      	lsls	r3, r1, #3
 8001690:	4641      	mov	r1, r8
 8001692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001696:	4641      	mov	r1, r8
 8001698:	00ca      	lsls	r2, r1, #3
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	4622      	mov	r2, r4
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80016a6:	462b      	mov	r3, r5
 80016a8:	460a      	mov	r2, r1
 80016aa:	eb42 0303 	adc.w	r3, r2, r3
 80016ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016bc:	4629      	mov	r1, r5
 80016be:	024b      	lsls	r3, r1, #9
 80016c0:	4621      	mov	r1, r4
 80016c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016c6:	4621      	mov	r1, r4
 80016c8:	024a      	lsls	r2, r1, #9
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80016e0:	f7fe fdee 	bl	80002c0 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4613      	mov	r3, r2
 80016ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016ee:	e067      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f0:	4b75      	ldr	r3, [pc, #468]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	2200      	movs	r2, #0
 80016f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001700:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001708:	67bb      	str	r3, [r7, #120]	@ 0x78
 800170a:	2300      	movs	r3, #0
 800170c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800170e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001712:	4622      	mov	r2, r4
 8001714:	462b      	mov	r3, r5
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	0159      	lsls	r1, r3, #5
 8001720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001724:	0150      	lsls	r0, r2, #5
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4621      	mov	r1, r4
 800172c:	1a51      	subs	r1, r2, r1
 800172e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001730:	4629      	mov	r1, r5
 8001732:	eb63 0301 	sbc.w	r3, r3, r1
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001744:	4649      	mov	r1, r9
 8001746:	018b      	lsls	r3, r1, #6
 8001748:	4641      	mov	r1, r8
 800174a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174e:	4641      	mov	r1, r8
 8001750:	018a      	lsls	r2, r1, #6
 8001752:	4641      	mov	r1, r8
 8001754:	ebb2 0a01 	subs.w	sl, r2, r1
 8001758:	4649      	mov	r1, r9
 800175a:	eb63 0b01 	sbc.w	fp, r3, r1
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800176a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800176e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001772:	4692      	mov	sl, r2
 8001774:	469b      	mov	fp, r3
 8001776:	4623      	mov	r3, r4
 8001778:	eb1a 0303 	adds.w	r3, sl, r3
 800177c:	623b      	str	r3, [r7, #32]
 800177e:	462b      	mov	r3, r5
 8001780:	eb4b 0303 	adc.w	r3, fp, r3
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001792:	4629      	mov	r1, r5
 8001794:	028b      	lsls	r3, r1, #10
 8001796:	4621      	mov	r1, r4
 8001798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179c:	4621      	mov	r1, r4
 800179e:	028a      	lsls	r2, r1, #10
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017a8:	2200      	movs	r2, #0
 80017aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80017ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80017ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80017b2:	f7fe fd85 	bl	80002c0 <__aeabi_uldivmod>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4613      	mov	r3, r2
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017c0:	4b41      	ldr	r3, [pc, #260]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	3301      	adds	r3, #1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80017d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017e2:	e0eb      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4b38      	ldr	r3, [pc, #224]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f0:	4b35      	ldr	r3, [pc, #212]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d06b      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fc:	4b32      	ldr	r3, [pc, #200]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	2200      	movs	r2, #0
 8001804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001806:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001808:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800180a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001810:	2300      	movs	r3, #0
 8001812:	667b      	str	r3, [r7, #100]	@ 0x64
 8001814:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001818:	4622      	mov	r2, r4
 800181a:	462b      	mov	r3, r5
 800181c:	f04f 0000 	mov.w	r0, #0
 8001820:	f04f 0100 	mov.w	r1, #0
 8001824:	0159      	lsls	r1, r3, #5
 8001826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182a:	0150      	lsls	r0, r2, #5
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4621      	mov	r1, r4
 8001832:	1a51      	subs	r1, r2, r1
 8001834:	61b9      	str	r1, [r7, #24]
 8001836:	4629      	mov	r1, r5
 8001838:	eb63 0301 	sbc.w	r3, r3, r1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800184a:	4659      	mov	r1, fp
 800184c:	018b      	lsls	r3, r1, #6
 800184e:	4651      	mov	r1, sl
 8001850:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001854:	4651      	mov	r1, sl
 8001856:	018a      	lsls	r2, r1, #6
 8001858:	4651      	mov	r1, sl
 800185a:	ebb2 0801 	subs.w	r8, r2, r1
 800185e:	4659      	mov	r1, fp
 8001860:	eb63 0901 	sbc.w	r9, r3, r1
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001870:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001874:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001878:	4690      	mov	r8, r2
 800187a:	4699      	mov	r9, r3
 800187c:	4623      	mov	r3, r4
 800187e:	eb18 0303 	adds.w	r3, r8, r3
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	462b      	mov	r3, r5
 8001886:	eb49 0303 	adc.w	r3, r9, r3
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001898:	4629      	mov	r1, r5
 800189a:	024b      	lsls	r3, r1, #9
 800189c:	4621      	mov	r1, r4
 800189e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a2:	4621      	mov	r1, r4
 80018a4:	024a      	lsls	r2, r1, #9
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018ae:	2200      	movs	r2, #0
 80018b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018b8:	f7fe fd02 	bl	80002c0 <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4613      	mov	r3, r2
 80018c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018c6:	e065      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x420>
 80018c8:	40023800 	.word	0x40023800
 80018cc:	00f42400 	.word	0x00f42400
 80018d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d4:	4b3d      	ldr	r3, [pc, #244]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x458>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	2200      	movs	r2, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	4611      	mov	r1, r2
 80018e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80018e6:	2300      	movs	r3, #0
 80018e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80018ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80018ee:	4642      	mov	r2, r8
 80018f0:	464b      	mov	r3, r9
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	0159      	lsls	r1, r3, #5
 80018fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001900:	0150      	lsls	r0, r2, #5
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4641      	mov	r1, r8
 8001908:	1a51      	subs	r1, r2, r1
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	4649      	mov	r1, r9
 800190e:	eb63 0301 	sbc.w	r3, r3, r1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001920:	4659      	mov	r1, fp
 8001922:	018b      	lsls	r3, r1, #6
 8001924:	4651      	mov	r1, sl
 8001926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800192a:	4651      	mov	r1, sl
 800192c:	018a      	lsls	r2, r1, #6
 800192e:	4651      	mov	r1, sl
 8001930:	1a54      	subs	r4, r2, r1
 8001932:	4659      	mov	r1, fp
 8001934:	eb63 0501 	sbc.w	r5, r3, r1
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	00eb      	lsls	r3, r5, #3
 8001942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001946:	00e2      	lsls	r2, r4, #3
 8001948:	4614      	mov	r4, r2
 800194a:	461d      	mov	r5, r3
 800194c:	4643      	mov	r3, r8
 800194e:	18e3      	adds	r3, r4, r3
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	464b      	mov	r3, r9
 8001954:	eb45 0303 	adc.w	r3, r5, r3
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001966:	4629      	mov	r1, r5
 8001968:	028b      	lsls	r3, r1, #10
 800196a:	4621      	mov	r1, r4
 800196c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001970:	4621      	mov	r1, r4
 8001972:	028a      	lsls	r2, r1, #10
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800197c:	2200      	movs	r2, #0
 800197e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001980:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001982:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001986:	f7fe fc9b 	bl	80002c0 <__aeabi_uldivmod>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4613      	mov	r3, r2
 8001990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001994:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x458>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	0f1b      	lsrs	r3, r3, #28
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80019a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019b2:	e003      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	37b8      	adds	r7, #184	@ 0xb8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	00f42400 	.word	0x00f42400

080019d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e28d      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8083 	beq.w	8001afa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019f4:	4b94      	ldr	r3, [pc, #592]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d019      	beq.n	8001a34 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a00:	4b91      	ldr	r3, [pc, #580]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a0c:	4b8e      	ldr	r3, [pc, #568]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a18:	d00c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d112      	bne.n	8001a4c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a26:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a32:	d10b      	bne.n	8001a4c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	4b84      	ldr	r3, [pc, #528]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d05b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x124>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d157      	bne.n	8001af8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e25a      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a54:	d106      	bne.n	8001a64 <HAL_RCC_OscConfig+0x90>
 8001a56:	4b7c      	ldr	r3, [pc, #496]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7b      	ldr	r2, [pc, #492]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0xcc>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0xb4>
 8001a6e:	4b76      	ldr	r3, [pc, #472]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a75      	ldr	r2, [pc, #468]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b73      	ldr	r3, [pc, #460]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a72      	ldr	r2, [pc, #456]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xcc>
 8001a88:	4b6f      	ldr	r3, [pc, #444]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b6c      	ldr	r3, [pc, #432]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6b      	ldr	r2, [pc, #428]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f97a 	bl	8000da0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f976 	bl	8000da0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	@ 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e21f      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	4b61      	ldr	r3, [pc, #388]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xdc>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f966 	bl	8000da0 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f962 	bl	8000da0 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	@ 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e20b      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	4b57      	ldr	r3, [pc, #348]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x104>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d06f      	beq.n	8001be6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b06:	4b50      	ldr	r3, [pc, #320]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d017      	beq.n	8001b42 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b12:	4b4d      	ldr	r3, [pc, #308]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b47      	ldr	r3, [pc, #284]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b36:	4b44      	ldr	r3, [pc, #272]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b41      	ldr	r3, [pc, #260]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x186>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1d3      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4937      	ldr	r1, [pc, #220]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b34      	ldr	r3, [pc, #208]	@ (8001c4c <HAL_RCC_OscConfig+0x278>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f90f 	bl	8000da0 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff f90b 	bl	8000da0 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1b4      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b28      	ldr	r3, [pc, #160]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4925      	ldr	r1, [pc, #148]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <HAL_RCC_OscConfig+0x278>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f8ee 	bl	8000da0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff f8ea 	bl	8000da0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e193      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d036      	beq.n	8001c60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f8ce 	bl	8000da0 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f8ca 	bl	8000da0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e173      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x234>
 8001c26:	e01b      	b.n	8001c60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_RCC_OscConfig+0x27c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f8b7 	bl	8000da0 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e00e      	b.n	8001c54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff f8b3 	bl	8000da0 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e15c      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470000 	.word	0x42470000
 8001c50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b8a      	ldr	r3, [pc, #552]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b83      	ldr	r3, [pc, #524]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b7f      	ldr	r3, [pc, #508]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	4a7e      	ldr	r2, [pc, #504]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b79      	ldr	r3, [pc, #484]	@ (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b76      	ldr	r3, [pc, #472]	@ (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a75      	ldr	r2, [pc, #468]	@ (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f873 	bl	8000da0 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff f86f 	bl	8000da0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e118      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x31e>
 8001ce4:	4b66      	ldr	r3, [pc, #408]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce8:	4a65      	ldr	r2, [pc, #404]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf0:	e01c      	b.n	8001d2c <HAL_RCC_OscConfig+0x358>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x340>
 8001cfa:	4b61      	ldr	r3, [pc, #388]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfe:	4a60      	ldr	r2, [pc, #384]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d06:	4b5e      	ldr	r3, [pc, #376]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0a:	4a5d      	ldr	r2, [pc, #372]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x358>
 8001d14:	4b5a      	ldr	r3, [pc, #360]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d18:	4a59      	ldr	r2, [pc, #356]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d20:	4b57      	ldr	r3, [pc, #348]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d24:	4a56      	ldr	r2, [pc, #344]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f834 	bl	8000da0 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f830 	bl	8000da0 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0d7      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	4b4b      	ldr	r3, [pc, #300]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ee      	beq.n	8001d3c <HAL_RCC_OscConfig+0x368>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f81e 	bl	8000da0 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff f81a 	bl	8000da0 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0c1      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	4b40      	ldr	r3, [pc, #256]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ee      	bne.n	8001d68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b3b      	ldr	r3, [pc, #236]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	4a3a      	ldr	r2, [pc, #232]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80ad 	beq.w	8001f00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da6:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d145      	bne.n	8001e46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	@ (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe ffee 	bl	8000da0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7fe ffea 	bl	8000da0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e093      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	4b29      	ldr	r3, [pc, #164]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	071b      	lsls	r3, r3, #28
 8001e12:	491b      	ldr	r1, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7fe ffbf 	bl	8000da0 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe ffbb 	bl	8000da0 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e064      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x452>
 8001e44:	e05c      	b.n	8001f00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ffa8 	bl	8000da0 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe ffa4 	bl	8000da0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04d      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x480>
 8001e72:	e045      	b.n	8001f00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e040      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <HAL_RCC_OscConfig+0x538>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d030      	beq.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d129      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d122      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d119      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10f      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07b      	b.n	800201a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d108      	bne.n	8001f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f32:	d009      	beq.n	8001f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
 8001f3a:	e005      	b.n	8001f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe fd6a 	bl	8000a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fcc:	ea42 0103 	orr.w	r1, r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	f003 0104 	and.w	r1, r3, #4
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	f003 0210 	and.w	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002008:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e042      	b.n	80020ba <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d106      	bne.n	800204e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe fd3f 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2224      	movs	r2, #36	@ 0x24
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002064:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f972 	bl	8002350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800207a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800208a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800209a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b08a      	sub	sp, #40	@ 0x28
 80020c6:	af02      	add	r7, sp, #8
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d175      	bne.n	80021ce <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_UART_Transmit+0x2c>
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e06e      	b.n	80021d0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2221      	movs	r2, #33	@ 0x21
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002100:	f7fe fe4e 	bl	8000da0 <HAL_GetTick>
 8002104:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	88fa      	ldrh	r2, [r7, #6]
 800210a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800211a:	d108      	bne.n	800212e <HAL_UART_Transmit+0x6c>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d104      	bne.n	800212e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	e003      	b.n	8002136 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002136:	e02e      	b.n	8002196 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	2180      	movs	r1, #128	@ 0x80
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f848 	bl	80021d8 <UART_WaitOnFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03a      	b.n	80021d0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800216e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	3302      	adds	r3, #2
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	e007      	b.n	8002188 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1cb      	bne.n	8002138 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2200      	movs	r2, #0
 80021a8:	2140      	movs	r1, #64	@ 0x40
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f814 	bl	80021d8 <UART_WaitOnFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e006      	b.n	80021d0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
  }
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021e8:	e03b      	b.n	8002262 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d037      	beq.n	8002262 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f2:	f7fe fdd5 	bl	8000da0 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	6a3a      	ldr	r2, [r7, #32]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d302      	bcc.n	8002208 <UART_WaitOnFlagUntilTimeout+0x30>
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e03a      	b.n	8002282 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	d023      	beq.n	8002262 <UART_WaitOnFlagUntilTimeout+0x8a>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b80      	cmp	r3, #128	@ 0x80
 800221e:	d020      	beq.n	8002262 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b40      	cmp	r3, #64	@ 0x40
 8002224:	d01d      	beq.n	8002262 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b08      	cmp	r3, #8
 8002232:	d116      	bne.n	8002262 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f81d 	bl	800228a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2208      	movs	r2, #8
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4013      	ands	r3, r2
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	429a      	cmp	r2, r3
 8002270:	bf0c      	ite	eq
 8002272:	2301      	moveq	r3, #1
 8002274:	2300      	movne	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	429a      	cmp	r2, r3
 800227e:	d0b4      	beq.n	80021ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800228a:	b480      	push	{r7}
 800228c:	b095      	sub	sp, #84	@ 0x54
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	330c      	adds	r3, #12
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229c:	e853 3f00 	ldrex	r3, [r3]
 80022a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	330c      	adds	r3, #12
 80022b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80022b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022ba:	e841 2300 	strex	r3, r2, [r1]
 80022be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1e5      	bne.n	8002292 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3314      	adds	r3, #20
 80022cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	e853 3f00 	ldrex	r3, [r3]
 80022d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3314      	adds	r3, #20
 80022e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e5      	bne.n	80022c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d119      	bne.n	8002336 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	330c      	adds	r3, #12
 8002308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	e853 3f00 	ldrex	r3, [r3]
 8002310:	60bb      	str	r3, [r7, #8]
   return(result);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f023 0310 	bic.w	r3, r3, #16
 8002318:	647b      	str	r3, [r7, #68]	@ 0x44
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	330c      	adds	r3, #12
 8002320:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002322:	61ba      	str	r2, [r7, #24]
 8002324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002326:	6979      	ldr	r1, [r7, #20]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	e841 2300 	strex	r3, r2, [r1]
 800232e:	613b      	str	r3, [r7, #16]
   return(result);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1e5      	bne.n	8002302 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002344:	bf00      	nop
 8002346:	3754      	adds	r7, #84	@ 0x54
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	b0c0      	sub	sp, #256	@ 0x100
 8002356:	af00      	add	r7, sp, #0
 8002358:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	ea40 0301 	orr.w	r3, r0, r1
 8002378:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	431a      	orrs	r2, r3
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	431a      	orrs	r2, r3
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023a8:	f021 010c 	bic.w	r1, r1, #12
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023b6:	430b      	orrs	r3, r1
 80023b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ca:	6999      	ldr	r1, [r3, #24]
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	ea40 0301 	orr.w	r3, r0, r1
 80023d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b8f      	ldr	r3, [pc, #572]	@ (800261c <UART_SetConfig+0x2cc>)
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d005      	beq.n	80023f0 <UART_SetConfig+0xa0>
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002620 <UART_SetConfig+0x2d0>)
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d104      	bne.n	80023fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023f0:	f7ff f8ac 	bl	800154c <HAL_RCC_GetPCLK2Freq>
 80023f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023f8:	e003      	b.n	8002402 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023fa:	f7ff f893 	bl	8001524 <HAL_RCC_GetPCLK1Freq>
 80023fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800240c:	f040 810c 	bne.w	8002628 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002414:	2200      	movs	r2, #0
 8002416:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800241a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800241e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002422:	4622      	mov	r2, r4
 8002424:	462b      	mov	r3, r5
 8002426:	1891      	adds	r1, r2, r2
 8002428:	65b9      	str	r1, [r7, #88]	@ 0x58
 800242a:	415b      	adcs	r3, r3
 800242c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800242e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002432:	4621      	mov	r1, r4
 8002434:	eb12 0801 	adds.w	r8, r2, r1
 8002438:	4629      	mov	r1, r5
 800243a:	eb43 0901 	adc.w	r9, r3, r1
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800244a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002452:	4690      	mov	r8, r2
 8002454:	4699      	mov	r9, r3
 8002456:	4623      	mov	r3, r4
 8002458:	eb18 0303 	adds.w	r3, r8, r3
 800245c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002460:	462b      	mov	r3, r5
 8002462:	eb49 0303 	adc.w	r3, r9, r3
 8002466:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800246a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002476:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800247a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800247e:	460b      	mov	r3, r1
 8002480:	18db      	adds	r3, r3, r3
 8002482:	653b      	str	r3, [r7, #80]	@ 0x50
 8002484:	4613      	mov	r3, r2
 8002486:	eb42 0303 	adc.w	r3, r2, r3
 800248a:	657b      	str	r3, [r7, #84]	@ 0x54
 800248c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002490:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002494:	f7fd ff14 	bl	80002c0 <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4b61      	ldr	r3, [pc, #388]	@ (8002624 <UART_SetConfig+0x2d4>)
 800249e:	fba3 2302 	umull	r2, r3, r3, r2
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	011c      	lsls	r4, r3, #4
 80024a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024b8:	4642      	mov	r2, r8
 80024ba:	464b      	mov	r3, r9
 80024bc:	1891      	adds	r1, r2, r2
 80024be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024c0:	415b      	adcs	r3, r3
 80024c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024c8:	4641      	mov	r1, r8
 80024ca:	eb12 0a01 	adds.w	sl, r2, r1
 80024ce:	4649      	mov	r1, r9
 80024d0:	eb43 0b01 	adc.w	fp, r3, r1
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e8:	4692      	mov	sl, r2
 80024ea:	469b      	mov	fp, r3
 80024ec:	4643      	mov	r3, r8
 80024ee:	eb1a 0303 	adds.w	r3, sl, r3
 80024f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024f6:	464b      	mov	r3, r9
 80024f8:	eb4b 0303 	adc.w	r3, fp, r3
 80024fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800250c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002510:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002514:	460b      	mov	r3, r1
 8002516:	18db      	adds	r3, r3, r3
 8002518:	643b      	str	r3, [r7, #64]	@ 0x40
 800251a:	4613      	mov	r3, r2
 800251c:	eb42 0303 	adc.w	r3, r2, r3
 8002520:	647b      	str	r3, [r7, #68]	@ 0x44
 8002522:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002526:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800252a:	f7fd fec9 	bl	80002c0 <__aeabi_uldivmod>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4611      	mov	r1, r2
 8002534:	4b3b      	ldr	r3, [pc, #236]	@ (8002624 <UART_SetConfig+0x2d4>)
 8002536:	fba3 2301 	umull	r2, r3, r3, r1
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2264      	movs	r2, #100	@ 0x64
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	1acb      	subs	r3, r1, r3
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800254a:	4b36      	ldr	r3, [pc, #216]	@ (8002624 <UART_SetConfig+0x2d4>)
 800254c:	fba3 2302 	umull	r2, r3, r3, r2
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002558:	441c      	add	r4, r3
 800255a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800255e:	2200      	movs	r2, #0
 8002560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002564:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002568:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800256c:	4642      	mov	r2, r8
 800256e:	464b      	mov	r3, r9
 8002570:	1891      	adds	r1, r2, r2
 8002572:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002574:	415b      	adcs	r3, r3
 8002576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800257c:	4641      	mov	r1, r8
 800257e:	1851      	adds	r1, r2, r1
 8002580:	6339      	str	r1, [r7, #48]	@ 0x30
 8002582:	4649      	mov	r1, r9
 8002584:	414b      	adcs	r3, r1
 8002586:	637b      	str	r3, [r7, #52]	@ 0x34
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002594:	4659      	mov	r1, fp
 8002596:	00cb      	lsls	r3, r1, #3
 8002598:	4651      	mov	r1, sl
 800259a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259e:	4651      	mov	r1, sl
 80025a0:	00ca      	lsls	r2, r1, #3
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	4642      	mov	r2, r8
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025b0:	464b      	mov	r3, r9
 80025b2:	460a      	mov	r2, r1
 80025b4:	eb42 0303 	adc.w	r3, r2, r3
 80025b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80025d0:	460b      	mov	r3, r1
 80025d2:	18db      	adds	r3, r3, r3
 80025d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d6:	4613      	mov	r3, r2
 80025d8:	eb42 0303 	adc.w	r3, r2, r3
 80025dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025e6:	f7fd fe6b 	bl	80002c0 <__aeabi_uldivmod>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <UART_SetConfig+0x2d4>)
 80025f0:	fba3 1302 	umull	r1, r3, r3, r2
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	2164      	movs	r1, #100	@ 0x64
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	3332      	adds	r3, #50	@ 0x32
 8002602:	4a08      	ldr	r2, [pc, #32]	@ (8002624 <UART_SetConfig+0x2d4>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	f003 0207 	and.w	r2, r3, #7
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4422      	add	r2, r4
 8002616:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002618:	e106      	b.n	8002828 <UART_SetConfig+0x4d8>
 800261a:	bf00      	nop
 800261c:	40011000 	.word	0x40011000
 8002620:	40011400 	.word	0x40011400
 8002624:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800262c:	2200      	movs	r2, #0
 800262e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002632:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002636:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800263a:	4642      	mov	r2, r8
 800263c:	464b      	mov	r3, r9
 800263e:	1891      	adds	r1, r2, r2
 8002640:	6239      	str	r1, [r7, #32]
 8002642:	415b      	adcs	r3, r3
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
 8002646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800264a:	4641      	mov	r1, r8
 800264c:	1854      	adds	r4, r2, r1
 800264e:	4649      	mov	r1, r9
 8002650:	eb43 0501 	adc.w	r5, r3, r1
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	00eb      	lsls	r3, r5, #3
 800265e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002662:	00e2      	lsls	r2, r4, #3
 8002664:	4614      	mov	r4, r2
 8002666:	461d      	mov	r5, r3
 8002668:	4643      	mov	r3, r8
 800266a:	18e3      	adds	r3, r4, r3
 800266c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002670:	464b      	mov	r3, r9
 8002672:	eb45 0303 	adc.w	r3, r5, r3
 8002676:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002686:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002696:	4629      	mov	r1, r5
 8002698:	008b      	lsls	r3, r1, #2
 800269a:	4621      	mov	r1, r4
 800269c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a0:	4621      	mov	r1, r4
 80026a2:	008a      	lsls	r2, r1, #2
 80026a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026a8:	f7fd fe0a 	bl	80002c0 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4b60      	ldr	r3, [pc, #384]	@ (8002834 <UART_SetConfig+0x4e4>)
 80026b2:	fba3 2302 	umull	r2, r3, r3, r2
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	011c      	lsls	r4, r3, #4
 80026ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026cc:	4642      	mov	r2, r8
 80026ce:	464b      	mov	r3, r9
 80026d0:	1891      	adds	r1, r2, r2
 80026d2:	61b9      	str	r1, [r7, #24]
 80026d4:	415b      	adcs	r3, r3
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026dc:	4641      	mov	r1, r8
 80026de:	1851      	adds	r1, r2, r1
 80026e0:	6139      	str	r1, [r7, #16]
 80026e2:	4649      	mov	r1, r9
 80026e4:	414b      	adcs	r3, r1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f4:	4659      	mov	r1, fp
 80026f6:	00cb      	lsls	r3, r1, #3
 80026f8:	4651      	mov	r1, sl
 80026fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026fe:	4651      	mov	r1, sl
 8002700:	00ca      	lsls	r2, r1, #3
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	4603      	mov	r3, r0
 8002708:	4642      	mov	r2, r8
 800270a:	189b      	adds	r3, r3, r2
 800270c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002710:	464b      	mov	r3, r9
 8002712:	460a      	mov	r2, r1
 8002714:	eb42 0303 	adc.w	r3, r2, r3
 8002718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002726:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002734:	4649      	mov	r1, r9
 8002736:	008b      	lsls	r3, r1, #2
 8002738:	4641      	mov	r1, r8
 800273a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800273e:	4641      	mov	r1, r8
 8002740:	008a      	lsls	r2, r1, #2
 8002742:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002746:	f7fd fdbb 	bl	80002c0 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4611      	mov	r1, r2
 8002750:	4b38      	ldr	r3, [pc, #224]	@ (8002834 <UART_SetConfig+0x4e4>)
 8002752:	fba3 2301 	umull	r2, r3, r3, r1
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2264      	movs	r2, #100	@ 0x64
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	1acb      	subs	r3, r1, r3
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	3332      	adds	r3, #50	@ 0x32
 8002764:	4a33      	ldr	r2, [pc, #204]	@ (8002834 <UART_SetConfig+0x4e4>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002770:	441c      	add	r4, r3
 8002772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002776:	2200      	movs	r2, #0
 8002778:	673b      	str	r3, [r7, #112]	@ 0x70
 800277a:	677a      	str	r2, [r7, #116]	@ 0x74
 800277c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002780:	4642      	mov	r2, r8
 8002782:	464b      	mov	r3, r9
 8002784:	1891      	adds	r1, r2, r2
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	415b      	adcs	r3, r3
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002790:	4641      	mov	r1, r8
 8002792:	1851      	adds	r1, r2, r1
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	4649      	mov	r1, r9
 8002798:	414b      	adcs	r3, r1
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027a8:	4659      	mov	r1, fp
 80027aa:	00cb      	lsls	r3, r1, #3
 80027ac:	4651      	mov	r1, sl
 80027ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b2:	4651      	mov	r1, sl
 80027b4:	00ca      	lsls	r2, r1, #3
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	4642      	mov	r2, r8
 80027be:	189b      	adds	r3, r3, r2
 80027c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027c2:	464b      	mov	r3, r9
 80027c4:	460a      	mov	r2, r1
 80027c6:	eb42 0303 	adc.w	r3, r2, r3
 80027ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80027d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027e4:	4649      	mov	r1, r9
 80027e6:	008b      	lsls	r3, r1, #2
 80027e8:	4641      	mov	r1, r8
 80027ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ee:	4641      	mov	r1, r8
 80027f0:	008a      	lsls	r2, r1, #2
 80027f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027f6:	f7fd fd63 	bl	80002c0 <__aeabi_uldivmod>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <UART_SetConfig+0x4e4>)
 8002800:	fba3 1302 	umull	r1, r3, r3, r2
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	2164      	movs	r1, #100	@ 0x64
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	3332      	adds	r3, #50	@ 0x32
 8002812:	4a08      	ldr	r2, [pc, #32]	@ (8002834 <UART_SetConfig+0x4e4>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	f003 020f 	and.w	r2, r3, #15
 800281e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4422      	add	r2, r4
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800282e:	46bd      	mov	sp, r7
 8002830:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002834:	51eb851f 	.word	0x51eb851f

08002838 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800283c:	4904      	ldr	r1, [pc, #16]	@ (8002850 <MX_FATFS_Init+0x18>)
 800283e:	4805      	ldr	r0, [pc, #20]	@ (8002854 <MX_FATFS_Init+0x1c>)
 8002840:	f002 fed4 	bl	80055ec <FATFS_LinkDriver>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	4b03      	ldr	r3, [pc, #12]	@ (8002858 <MX_FATFS_Init+0x20>)
 800284a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	2000220c 	.word	0x2000220c
 8002854:	2000000c 	.word	0x2000000c
 8002858:	20002208 	.word	0x20002208

0800285c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002860:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
   // Stat = STA_NOINIT;
    //return Stat;

	DSTATUS SD_disk_initialize (pdrv);
  /* USER CODE END INIT */
}
 8002876:	bf00      	nop
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
    //Stat = STA_NOINIT;
    //return Stat;

	DSTATUS SD_disk_status (pdrv);
  /* USER CODE END STATUS */
}
 800288e:	bf00      	nop
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4603      	mov	r3, r0
 80028aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
   // return RES_OK;
	DRESULT SD_disk_read (pdrv, buff, sector, count);
  /* USER CODE END READ */
}
 80028ac:	bf00      	nop
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    DRESULT SD_disk_write (pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}
 80028ca:	bf00      	nop
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	603a      	str	r2, [r7, #0]
 80028e2:	71fb      	strb	r3, [r7, #7]
 80028e4:	460b      	mov	r3, r1
 80028e6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
   // return res;
  /* USER CODE END IOCTL */
}
 80028e8:	bf00      	nop
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4a08      	ldr	r2, [pc, #32]	@ (8002928 <disk_status+0x30>)
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	79fa      	ldrb	r2, [r7, #7]
 8002910:	4905      	ldr	r1, [pc, #20]	@ (8002928 <disk_status+0x30>)
 8002912:	440a      	add	r2, r1
 8002914:	7a12      	ldrb	r2, [r2, #8]
 8002916:	4610      	mov	r0, r2
 8002918:	4798      	blx	r3
 800291a:	4603      	mov	r3, r0
 800291c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20002438 	.word	0x20002438

0800292c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	4a0e      	ldr	r2, [pc, #56]	@ (8002978 <disk_initialize+0x4c>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d114      	bne.n	800296e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	4a0c      	ldr	r2, [pc, #48]	@ (8002978 <disk_initialize+0x4c>)
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	79fa      	ldrb	r2, [r7, #7]
 8002952:	4909      	ldr	r1, [pc, #36]	@ (8002978 <disk_initialize+0x4c>)
 8002954:	440a      	add	r2, r1
 8002956:	7a12      	ldrb	r2, [r2, #8]
 8002958:	4610      	mov	r0, r2
 800295a:	4798      	blx	r3
 800295c:	4603      	mov	r3, r0
 800295e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	4a03      	ldr	r2, [pc, #12]	@ (8002978 <disk_initialize+0x4c>)
 800296a:	2101      	movs	r1, #1
 800296c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800296e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20002438 	.word	0x20002438

0800297c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4603      	mov	r3, r0
 800298a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <disk_read+0x3c>)
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	689c      	ldr	r4, [r3, #8]
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	4a07      	ldr	r2, [pc, #28]	@ (80029b8 <disk_read+0x3c>)
 800299c:	4413      	add	r3, r2
 800299e:	7a18      	ldrb	r0, [r3, #8]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	47a0      	blx	r4
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20002438 	.word	0x20002438

080029bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4603      	mov	r3, r0
 80029ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	4a0a      	ldr	r2, [pc, #40]	@ (80029f8 <disk_write+0x3c>)
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	68dc      	ldr	r4, [r3, #12]
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	4a07      	ldr	r2, [pc, #28]	@ (80029f8 <disk_write+0x3c>)
 80029dc:	4413      	add	r3, r2
 80029de:	7a18      	ldrb	r0, [r3, #8]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	47a0      	blx	r4
 80029e8:	4603      	mov	r3, r0
 80029ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd90      	pop	{r4, r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20002438 	.word	0x20002438

080029fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	603a      	str	r2, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	4a09      	ldr	r2, [pc, #36]	@ (8002a34 <disk_ioctl+0x38>)
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	79fa      	ldrb	r2, [r7, #7]
 8002a1a:	4906      	ldr	r1, [pc, #24]	@ (8002a34 <disk_ioctl+0x38>)
 8002a1c:	440a      	add	r2, r1
 8002a1e:	7a10      	ldrb	r0, [r2, #8]
 8002a20:	79b9      	ldrb	r1, [r7, #6]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	4798      	blx	r3
 8002a26:	4603      	mov	r3, r0
 8002a28:	73fb      	strb	r3, [r7, #15]
  return res;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20002438 	.word	0x20002438

08002a38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3301      	adds	r3, #1
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	b21a      	sxth	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b21b      	sxth	r3, r3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	b21b      	sxth	r3, r3
 8002a5a:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3303      	adds	r3, #3
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	3202      	adds	r2, #2
 8002a82:	7812      	ldrb	r2, [r2, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	3201      	adds	r2, #1
 8002a90:	7812      	ldrb	r2, [r2, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
	return rv;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	887a      	ldrh	r2, [r7, #2]
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002b3e:	b480      	push	{r7}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	1c53      	adds	r3, r2, #1
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	1c59      	adds	r1, r3, #1
 8002b62:	6179      	str	r1, [r7, #20]
 8002b64:	7812      	ldrb	r2, [r2, #0]
 8002b66:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f1      	bne.n	8002b58 <mem_cpy+0x1a>
	}
}
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	617a      	str	r2, [r7, #20]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f3      	bne.n	8002b90 <mem_set+0x10>
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002bb6:	b480      	push	{r7}
 8002bb8:	b089      	sub	sp, #36	@ 0x24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	61fa      	str	r2, [r7, #28]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	61ba      	str	r2, [r7, #24]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	1acb      	subs	r3, r1, r3
 8002be2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <mem_cmp+0x40>
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0eb      	beq.n	8002bce <mem_cmp+0x18>

	return r;
 8002bf6:	697b      	ldr	r3, [r7, #20]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3724      	adds	r7, #36	@ 0x24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002c0e:	e002      	b.n	8002c16 <chk_chr+0x12>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3301      	adds	r3, #1
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <chk_chr+0x26>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d1f2      	bne.n	8002c10 <chk_chr+0xc>
	return *str;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e029      	b.n	8002ca4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002c50:	4a27      	ldr	r2, [pc, #156]	@ (8002cf0 <chk_lock+0xb4>)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01d      	beq.n	8002c9a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002c5e:	4a24      	ldr	r2, [pc, #144]	@ (8002cf0 <chk_lock+0xb4>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	4413      	add	r3, r2
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d116      	bne.n	8002c9e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002c70:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf0 <chk_lock+0xb4>)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	4413      	add	r3, r2
 8002c78:	3304      	adds	r3, #4
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d10c      	bne.n	8002c9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002c84:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf0 <chk_lock+0xb4>)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d102      	bne.n	8002c9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002c98:	e007      	b.n	8002caa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d9d2      	bls.n	8002c50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d109      	bne.n	8002cc4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <chk_lock+0x80>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d101      	bne.n	8002cc0 <chk_lock+0x84>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e010      	b.n	8002ce2 <chk_lock+0xa6>
 8002cc0:	2312      	movs	r3, #18
 8002cc2:	e00e      	b.n	8002ce2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d108      	bne.n	8002cdc <chk_lock+0xa0>
 8002cca:	4a09      	ldr	r2, [pc, #36]	@ (8002cf0 <chk_lock+0xb4>)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	4413      	add	r3, r2
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cda:	d101      	bne.n	8002ce0 <chk_lock+0xa4>
 8002cdc:	2310      	movs	r3, #16
 8002cde:	e000      	b.n	8002ce2 <chk_lock+0xa6>
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20002218 	.word	0x20002218

08002cf4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	e002      	b.n	8002d06 <enq_lock+0x12>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3301      	adds	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d806      	bhi.n	8002d1a <enq_lock+0x26>
 8002d0c:	4a09      	ldr	r2, [pc, #36]	@ (8002d34 <enq_lock+0x40>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	4413      	add	r3, r2
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f2      	bne.n	8002d00 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20002218 	.word	0x20002218

08002d38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e01f      	b.n	8002d88 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002d48:	4a41      	ldr	r2, [pc, #260]	@ (8002e50 <inc_lock+0x118>)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	4413      	add	r3, r2
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d113      	bne.n	8002d82 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e50 <inc_lock+0x118>)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	4413      	add	r3, r2
 8002d62:	3304      	adds	r3, #4
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d109      	bne.n	8002d82 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002d6e:	4a38      	ldr	r2, [pc, #224]	@ (8002e50 <inc_lock+0x118>)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	4413      	add	r3, r2
 8002d76:	3308      	adds	r3, #8
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d006      	beq.n	8002d90 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3301      	adds	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d9dc      	bls.n	8002d48 <inc_lock+0x10>
 8002d8e:	e000      	b.n	8002d92 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002d90:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d132      	bne.n	8002dfe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e002      	b.n	8002da4 <inc_lock+0x6c>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3301      	adds	r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d806      	bhi.n	8002db8 <inc_lock+0x80>
 8002daa:	4a29      	ldr	r2, [pc, #164]	@ (8002e50 <inc_lock+0x118>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	4413      	add	r3, r2
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f2      	bne.n	8002d9e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d101      	bne.n	8002dc2 <inc_lock+0x8a>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e040      	b.n	8002e44 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4922      	ldr	r1, [pc, #136]	@ (8002e50 <inc_lock+0x118>)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	440b      	add	r3, r1
 8002dce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	491e      	ldr	r1, [pc, #120]	@ (8002e50 <inc_lock+0x118>)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	440b      	add	r3, r1
 8002ddc:	3304      	adds	r3, #4
 8002dde:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	491a      	ldr	r1, [pc, #104]	@ (8002e50 <inc_lock+0x118>)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	440b      	add	r3, r1
 8002dec:	3308      	adds	r3, #8
 8002dee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002df0:	4a17      	ldr	r2, [pc, #92]	@ (8002e50 <inc_lock+0x118>)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	330c      	adds	r3, #12
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <inc_lock+0xe0>
 8002e04:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <inc_lock+0x118>)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	4413      	add	r3, r2
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <inc_lock+0xe0>
 8002e14:	2300      	movs	r3, #0
 8002e16:	e015      	b.n	8002e44 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d108      	bne.n	8002e30 <inc_lock+0xf8>
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e50 <inc_lock+0x118>)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	4413      	add	r3, r2
 8002e26:	330c      	adds	r3, #12
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	e001      	b.n	8002e34 <inc_lock+0xfc>
 8002e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e34:	4906      	ldr	r1, [pc, #24]	@ (8002e50 <inc_lock+0x118>)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	440b      	add	r3, r1
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3301      	adds	r3, #1
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	20002218 	.word	0x20002218

08002e54 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d825      	bhi.n	8002eb4 <dec_lock+0x60>
		n = Files[i].ctr;
 8002e68:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <dec_lock+0x74>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4413      	add	r3, r2
 8002e70:	330c      	adds	r3, #12
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002e76:	89fb      	ldrh	r3, [r7, #14]
 8002e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e7c:	d101      	bne.n	8002e82 <dec_lock+0x2e>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002e82:	89fb      	ldrh	r3, [r7, #14]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <dec_lock+0x3a>
 8002e88:	89fb      	ldrh	r3, [r7, #14]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec8 <dec_lock+0x74>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	4413      	add	r3, r2
 8002e96:	330c      	adds	r3, #12
 8002e98:	89fa      	ldrh	r2, [r7, #14]
 8002e9a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002e9c:	89fb      	ldrh	r3, [r7, #14]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <dec_lock+0x5a>
 8002ea2:	4a09      	ldr	r2, [pc, #36]	@ (8002ec8 <dec_lock+0x74>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	4413      	add	r3, r2
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	737b      	strb	r3, [r7, #13]
 8002eb2:	e001      	b.n	8002eb8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002eb8:	7b7b      	ldrb	r3, [r7, #13]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20002218 	.word	0x20002218

08002ecc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e010      	b.n	8002efc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002eda:	4a0d      	ldr	r2, [pc, #52]	@ (8002f10 <clear_lock+0x44>)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	4413      	add	r3, r2
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d105      	bne.n	8002ef6 <clear_lock+0x2a>
 8002eea:	4a09      	ldr	r2, [pc, #36]	@ (8002f10 <clear_lock+0x44>)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	4413      	add	r3, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d9eb      	bls.n	8002eda <clear_lock+0xe>
	}
}
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	20002218 	.word	0x20002218

08002f14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	78db      	ldrb	r3, [r3, #3]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d034      	beq.n	8002f92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7858      	ldrb	r0, [r3, #1]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002f38:	2301      	movs	r3, #1
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	f7ff fd3e 	bl	80029bc <disk_write>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e022      	b.n	8002f92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	1ad2      	subs	r2, r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d217      	bcs.n	8002f92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	789b      	ldrb	r3, [r3, #2]
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e010      	b.n	8002f8c <sync_window+0x78>
					wsect += fs->fsize;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4413      	add	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7858      	ldrb	r0, [r3, #1]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002f7e:	2301      	movs	r3, #1
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	f7ff fd1b 	bl	80029bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d8eb      	bhi.n	8002f6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d01b      	beq.n	8002fec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ffad 	bl	8002f14 <sync_window>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d113      	bne.n	8002fec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7858      	ldrb	r0, [r3, #1]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002fce:	2301      	movs	r3, #1
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	f7ff fcd3 	bl	800297c <disk_read>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff87 	bl	8002f14 <sync_window>
 8003006:	4603      	mov	r3, r0
 8003008:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d159      	bne.n	80030c4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d149      	bne.n	80030ac <sync_fs+0xb4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	791b      	ldrb	r3, [r3, #4]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d145      	bne.n	80030ac <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	899b      	ldrh	r3, [r3, #12]
 800302a:	461a      	mov	r2, r3
 800302c:	2100      	movs	r1, #0
 800302e:	f7ff fda7 	bl	8002b80 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3338      	adds	r3, #56	@ 0x38
 8003036:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800303a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fd36 	bl	8002ab0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3338      	adds	r3, #56	@ 0x38
 8003048:	4921      	ldr	r1, [pc, #132]	@ (80030d0 <sync_fs+0xd8>)
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fd4b 	bl	8002ae6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3338      	adds	r3, #56	@ 0x38
 8003054:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003058:	491e      	ldr	r1, [pc, #120]	@ (80030d4 <sync_fs+0xdc>)
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fd43 	bl	8002ae6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3338      	adds	r3, #56	@ 0x38
 8003064:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f7ff fd39 	bl	8002ae6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3338      	adds	r3, #56	@ 0x38
 8003078:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	4619      	mov	r1, r3
 8003082:	4610      	mov	r0, r2
 8003084:	f7ff fd2f 	bl	8002ae6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7858      	ldrb	r0, [r3, #1]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030a0:	2301      	movs	r3, #1
 80030a2:	f7ff fc8b 	bl	80029bc <disk_write>
			fs->fsi_flag = 0;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fca1 	bl	80029fc <disk_ioctl>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <sync_fs+0xcc>
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	41615252 	.word	0x41615252
 80030d4:	61417272 	.word	0x61417272

080030d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	3b02      	subs	r3, #2
 80030e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	3b02      	subs	r3, #2
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d301      	bcc.n	80030f8 <clust2sect+0x20>
 80030f4:	2300      	movs	r3, #0
 80030f6:	e008      	b.n	800310a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	895b      	ldrh	r3, [r3, #10]
 80030fc:	461a      	mov	r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	fb03 f202 	mul.w	r2, r3, r2
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	4413      	add	r3, r2
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d904      	bls.n	8003136 <get_fat+0x20>
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <get_fat+0x26>
		val = 1;	/* Internal error */
 8003136:	2301      	movs	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e0ba      	b.n	80032b2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
 8003140:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b03      	cmp	r3, #3
 8003148:	f000 8082 	beq.w	8003250 <get_fat+0x13a>
 800314c:	2b03      	cmp	r3, #3
 800314e:	f300 80a6 	bgt.w	800329e <get_fat+0x188>
 8003152:	2b01      	cmp	r3, #1
 8003154:	d002      	beq.n	800315c <get_fat+0x46>
 8003156:	2b02      	cmp	r3, #2
 8003158:	d055      	beq.n	8003206 <get_fat+0xf0>
 800315a:	e0a0      	b.n	800329e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	899b      	ldrh	r3, [r3, #12]
 8003172:	4619      	mov	r1, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	fbb3 f3f1 	udiv	r3, r3, r1
 800317a:	4413      	add	r3, r2
 800317c:	4619      	mov	r1, r3
 800317e:	6938      	ldr	r0, [r7, #16]
 8003180:	f7ff ff0c 	bl	8002f9c <move_window>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 808c 	bne.w	80032a4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	60fa      	str	r2, [r7, #12]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	8992      	ldrh	r2, [r2, #12]
 8003196:	fbb3 f1f2 	udiv	r1, r3, r2
 800319a:	fb01 f202 	mul.w	r2, r1, r2
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	899b      	ldrh	r3, [r3, #12]
 80031b2:	4619      	mov	r1, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ba:	4413      	add	r3, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	6938      	ldr	r0, [r7, #16]
 80031c0:	f7ff feec 	bl	8002f9c <move_window>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d16e      	bne.n	80032a8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	899b      	ldrh	r3, [r3, #12]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80031d6:	fb01 f202 	mul.w	r2, r1, r2
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <get_fat+0xe6>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	e002      	b.n	8003202 <get_fat+0xec>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003202:	617b      	str	r3, [r7, #20]
			break;
 8003204:	e055      	b.n	80032b2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	899b      	ldrh	r3, [r3, #12]
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	fbb3 f3f1 	udiv	r3, r3, r1
 800321a:	4413      	add	r3, r2
 800321c:	4619      	mov	r1, r3
 800321e:	6938      	ldr	r0, [r7, #16]
 8003220:	f7ff febc 	bl	8002f9c <move_window>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d140      	bne.n	80032ac <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	8992      	ldrh	r2, [r2, #12]
 8003238:	fbb3 f0f2 	udiv	r0, r3, r2
 800323c:	fb00 f202 	mul.w	r2, r0, r2
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	440b      	add	r3, r1
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fbf7 	bl	8002a38 <ld_word>
 800324a:	4603      	mov	r3, r0
 800324c:	617b      	str	r3, [r7, #20]
			break;
 800324e:	e030      	b.n	80032b2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	899b      	ldrh	r3, [r3, #12]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	b29b      	uxth	r3, r3
 800325c:	4619      	mov	r1, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	fbb3 f3f1 	udiv	r3, r3, r1
 8003264:	4413      	add	r3, r2
 8003266:	4619      	mov	r1, r3
 8003268:	6938      	ldr	r0, [r7, #16]
 800326a:	f7ff fe97 	bl	8002f9c <move_window>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11d      	bne.n	80032b0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	8992      	ldrh	r2, [r2, #12]
 8003282:	fbb3 f0f2 	udiv	r0, r3, r2
 8003286:	fb00 f202 	mul.w	r2, r0, r2
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	440b      	add	r3, r1
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fbeb 	bl	8002a6a <ld_dword>
 8003294:	4603      	mov	r3, r0
 8003296:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800329a:	617b      	str	r3, [r7, #20]
			break;
 800329c:	e009      	b.n	80032b2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800329e:	2301      	movs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e006      	b.n	80032b2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80032a4:	bf00      	nop
 80032a6:	e004      	b.n	80032b2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80032a8:	bf00      	nop
 80032aa:	e002      	b.n	80032b2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80032b0:	bf00      	nop
		}
	}

	return val;
 80032b2:	697b      	ldr	r3, [r7, #20]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b089      	sub	sp, #36	@ 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80032c8:	2302      	movs	r3, #2
 80032ca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	f240 8109 	bls.w	80034e6 <put_fat+0x22a>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	429a      	cmp	r2, r3
 80032dc:	f080 8103 	bcs.w	80034e6 <put_fat+0x22a>
		switch (fs->fs_type) {
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	f000 80b6 	beq.w	8003456 <put_fat+0x19a>
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	f300 80fb 	bgt.w	80034e6 <put_fat+0x22a>
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d003      	beq.n	80032fc <put_fat+0x40>
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	f000 8083 	beq.w	8003400 <put_fat+0x144>
 80032fa:	e0f4      	b.n	80034e6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4413      	add	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	899b      	ldrh	r3, [r3, #12]
 8003312:	4619      	mov	r1, r3
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fbb3 f3f1 	udiv	r3, r3, r1
 800331a:	4413      	add	r3, r2
 800331c:	4619      	mov	r1, r3
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f7ff fe3c 	bl	8002f9c <move_window>
 8003324:	4603      	mov	r3, r0
 8003326:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003328:	7ffb      	ldrb	r3, [r7, #31]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 80d4 	bne.w	80034d8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	61ba      	str	r2, [r7, #24]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	8992      	ldrh	r2, [r2, #12]
 8003340:	fbb3 f0f2 	udiv	r0, r3, r2
 8003344:	fb00 f202 	mul.w	r2, r0, r2
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	440b      	add	r3, r1
 800334c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00d      	beq.n	8003374 <put_fat+0xb8>
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	b25b      	sxtb	r3, r3
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	b25a      	sxtb	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	b25b      	sxtb	r3, r3
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	b25b      	sxtb	r3, r3
 800336c:	4313      	orrs	r3, r2
 800336e:	b25b      	sxtb	r3, r3
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e001      	b.n	8003378 <put_fat+0xbc>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	899b      	ldrh	r3, [r3, #12]
 800338a:	4619      	mov	r1, r3
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003392:	4413      	add	r3, r2
 8003394:	4619      	mov	r1, r3
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff fe00 	bl	8002f9c <move_window>
 800339c:	4603      	mov	r3, r0
 800339e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80033a0:	7ffb      	ldrb	r3, [r7, #31]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f040 809a 	bne.w	80034dc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	899b      	ldrh	r3, [r3, #12]
 80033b2:	461a      	mov	r2, r3
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80033ba:	fb00 f202 	mul.w	r2, r0, r2
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	440b      	add	r3, r1
 80033c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <put_fat+0x11a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	e00e      	b.n	80033f4 <put_fat+0x138>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b25b      	sxtb	r3, r3
 80033dc:	f023 030f 	bic.w	r3, r3, #15
 80033e0:	b25a      	sxtb	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	b25b      	sxtb	r3, r3
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b25b      	sxtb	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	70da      	strb	r2, [r3, #3]
			break;
 80033fe:	e072      	b.n	80034e6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	899b      	ldrh	r3, [r3, #12]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	b29b      	uxth	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	fbb3 f3f1 	udiv	r3, r3, r1
 8003414:	4413      	add	r3, r2
 8003416:	4619      	mov	r1, r3
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff fdbf 	bl	8002f9c <move_window>
 800341e:	4603      	mov	r3, r0
 8003420:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003422:	7ffb      	ldrb	r3, [r7, #31]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d15b      	bne.n	80034e0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	8992      	ldrh	r2, [r2, #12]
 8003436:	fbb3 f0f2 	udiv	r0, r3, r2
 800343a:	fb00 f202 	mul.w	r2, r0, r2
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	440b      	add	r3, r1
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	b292      	uxth	r2, r2
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fb31 	bl	8002ab0 <st_word>
			fs->wflag = 1;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	70da      	strb	r2, [r3, #3]
			break;
 8003454:	e047      	b.n	80034e6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	899b      	ldrh	r3, [r3, #12]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	b29b      	uxth	r3, r3
 8003462:	4619      	mov	r1, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	fbb3 f3f1 	udiv	r3, r3, r1
 800346a:	4413      	add	r3, r2
 800346c:	4619      	mov	r1, r3
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f7ff fd94 	bl	8002f9c <move_window>
 8003474:	4603      	mov	r3, r0
 8003476:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003478:	7ffb      	ldrb	r3, [r7, #31]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d132      	bne.n	80034e4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	8992      	ldrh	r2, [r2, #12]
 8003492:	fbb3 f0f2 	udiv	r0, r3, r2
 8003496:	fb00 f202 	mul.w	r2, r0, r2
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	440b      	add	r3, r1
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fae3 	bl	8002a6a <ld_dword>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80034aa:	4323      	orrs	r3, r4
 80034ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	8992      	ldrh	r2, [r2, #12]
 80034bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80034c0:	fb00 f202 	mul.w	r2, r0, r2
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fb0b 	bl	8002ae6 <st_dword>
			fs->wflag = 1;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	70da      	strb	r2, [r3, #3]
			break;
 80034d6:	e006      	b.n	80034e6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80034d8:	bf00      	nop
 80034da:	e004      	b.n	80034e6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80034dc:	bf00      	nop
 80034de:	e002      	b.n	80034e6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80034e0:	bf00      	nop
 80034e2:	e000      	b.n	80034e6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80034e4:	bf00      	nop
		}
	}
	return res;
 80034e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3724      	adds	r7, #36	@ 0x24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd90      	pop	{r4, r7, pc}

080034f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d904      	bls.n	8003516 <remove_chain+0x26>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	d301      	bcc.n	800351a <remove_chain+0x2a>
 8003516:	2302      	movs	r3, #2
 8003518:	e04b      	b.n	80035b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00c      	beq.n	800353a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003520:	f04f 32ff 	mov.w	r2, #4294967295
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	69b8      	ldr	r0, [r7, #24]
 8003528:	f7ff fec8 	bl	80032bc <put_fat>
 800352c:	4603      	mov	r3, r0
 800352e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003530:	7ffb      	ldrb	r3, [r7, #31]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <remove_chain+0x4a>
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	e03b      	b.n	80035b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7ff fdea 	bl	8003116 <get_fat>
 8003542:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d031      	beq.n	80035ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <remove_chain+0x64>
 8003550:	2302      	movs	r3, #2
 8003552:	e02e      	b.n	80035b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d101      	bne.n	8003560 <remove_chain+0x70>
 800355c:	2301      	movs	r3, #1
 800355e:	e028      	b.n	80035b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003560:	2200      	movs	r2, #0
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	69b8      	ldr	r0, [r7, #24]
 8003566:	f7ff fea9 	bl	80032bc <put_fat>
 800356a:	4603      	mov	r3, r0
 800356c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800356e:	7ffb      	ldrb	r3, [r7, #31]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <remove_chain+0x88>
 8003574:	7ffb      	ldrb	r3, [r7, #31]
 8003576:	e01c      	b.n	80035b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	3b02      	subs	r3, #2
 8003582:	429a      	cmp	r2, r3
 8003584:	d20b      	bcs.n	800359e <remove_chain+0xae>
			fs->free_clst++;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	791b      	ldrb	r3, [r3, #4]
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	b2da      	uxtb	r2, r3
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d3c6      	bcc.n	800353a <remove_chain+0x4a>
 80035ac:	e000      	b.n	80035b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80035ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b088      	sub	sp, #32
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <create_chain+0x2c>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d31b      	bcc.n	800361e <create_chain+0x64>
 80035e6:	2301      	movs	r3, #1
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e018      	b.n	800361e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff fd91 	bl	8003116 <get_fat>
 80035f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d801      	bhi.n	8003600 <create_chain+0x46>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e070      	b.n	80036e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d101      	bne.n	800360c <create_chain+0x52>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	e06a      	b.n	80036e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	429a      	cmp	r2, r3
 8003614:	d201      	bcs.n	800361a <create_chain+0x60>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	e063      	b.n	80036e2 <create_chain+0x128>
		scl = clst;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	429a      	cmp	r2, r3
 8003630:	d307      	bcc.n	8003642 <create_chain+0x88>
				ncl = 2;
 8003632:	2302      	movs	r3, #2
 8003634:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	429a      	cmp	r2, r3
 800363c:	d901      	bls.n	8003642 <create_chain+0x88>
 800363e:	2300      	movs	r3, #0
 8003640:	e04f      	b.n	80036e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff fd66 	bl	8003116 <get_fat>
 800364a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d003      	beq.n	8003660 <create_chain+0xa6>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d101      	bne.n	8003664 <create_chain+0xaa>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	e03e      	b.n	80036e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	429a      	cmp	r2, r3
 800366a:	d1da      	bne.n	8003622 <create_chain+0x68>
 800366c:	2300      	movs	r3, #0
 800366e:	e038      	b.n	80036e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003670:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003672:	f04f 32ff 	mov.w	r2, #4294967295
 8003676:	69f9      	ldr	r1, [r7, #28]
 8003678:	6938      	ldr	r0, [r7, #16]
 800367a:	f7ff fe1f 	bl	80032bc <put_fat>
 800367e:	4603      	mov	r3, r0
 8003680:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <create_chain+0xe2>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d006      	beq.n	800369c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	6839      	ldr	r1, [r7, #0]
 8003692:	6938      	ldr	r0, [r7, #16]
 8003694:	f7ff fe12 	bl	80032bc <put_fat>
 8003698:	4603      	mov	r3, r0
 800369a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <create_chain+0x116>
		fs->last_clst = ncl;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	3b02      	subs	r3, #2
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d804      	bhi.n	80036c0 <create_chain+0x106>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	791b      	ldrb	r3, [r3, #4]
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	711a      	strb	r2, [r3, #4]
 80036ce:	e007      	b.n	80036e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d102      	bne.n	80036dc <create_chain+0x122>
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
 80036da:	e000      	b.n	80036de <create_chain+0x124>
 80036dc:	2301      	movs	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80036e0:	69fb      	ldr	r3, [r7, #28]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b087      	sub	sp, #28
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fe:	3304      	adds	r3, #4
 8003700:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	899b      	ldrh	r3, [r3, #12]
 8003706:	461a      	mov	r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	fbb3 f3f2 	udiv	r3, r3, r2
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	8952      	ldrh	r2, [r2, #10]
 8003712:	fbb3 f3f2 	udiv	r3, r3, r2
 8003716:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	613a      	str	r2, [r7, #16]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <clmt_clust+0x42>
 8003728:	2300      	movs	r3, #0
 800372a:	e010      	b.n	800374e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	d307      	bcc.n	8003744 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	3304      	adds	r3, #4
 8003740:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003742:	e7e9      	b.n	8003718 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8003744:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4413      	add	r3, r2
}
 800374e:	4618      	mov	r0, r3
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003770:	d204      	bcs.n	800377c <dir_sdi+0x22>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <dir_sdi+0x26>
		return FR_INT_ERR;
 800377c:	2302      	movs	r3, #2
 800377e:	e071      	b.n	8003864 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <dir_sdi+0x46>
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d902      	bls.n	80037a0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10c      	bne.n	80037c0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	8912      	ldrh	r2, [r2, #8]
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d301      	bcc.n	80037b6 <dir_sdi+0x5c>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e056      	b.n	8003864 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	61da      	str	r2, [r3, #28]
 80037be:	e02d      	b.n	800381c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	895b      	ldrh	r3, [r3, #10]
 80037c4:	461a      	mov	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	899b      	ldrh	r3, [r3, #12]
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80037d0:	e019      	b.n	8003806 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6979      	ldr	r1, [r7, #20]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fc9d 	bl	8003116 <get_fat>
 80037dc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d101      	bne.n	80037ea <dir_sdi+0x90>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e03c      	b.n	8003864 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d904      	bls.n	80037fa <dir_sdi+0xa0>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d301      	bcc.n	80037fe <dir_sdi+0xa4>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e032      	b.n	8003864 <dir_sdi+0x10a>
			ofs -= csz;
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	429a      	cmp	r2, r3
 800380c:	d2e1      	bcs.n	80037d2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800380e:	6979      	ldr	r1, [r7, #20]
 8003810:	6938      	ldr	r0, [r7, #16]
 8003812:	f7ff fc61 	bl	80030d8 <clust2sect>
 8003816:	4602      	mov	r2, r0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <dir_sdi+0xd4>
 800382a:	2302      	movs	r3, #2
 800382c:	e01a      	b.n	8003864 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	899b      	ldrh	r3, [r3, #12]
 8003836:	4619      	mov	r1, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	fbb3 f3f1 	udiv	r3, r3, r1
 800383e:	441a      	add	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	899b      	ldrh	r3, [r3, #12]
 800384e:	461a      	mov	r2, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	fbb3 f0f2 	udiv	r0, r3, r2
 8003856:	fb00 f202 	mul.w	r2, r0, r2
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	18ca      	adds	r2, r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	3320      	adds	r3, #32
 8003882:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <dir_next+0x28>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003892:	d301      	bcc.n	8003898 <dir_next+0x2c>
 8003894:	2304      	movs	r3, #4
 8003896:	e0bb      	b.n	8003a10 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	899b      	ldrh	r3, [r3, #12]
 800389c:	461a      	mov	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80038a4:	fb01 f202 	mul.w	r2, r1, r2
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 809d 	bne.w	80039ea <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	8912      	ldrh	r2, [r2, #8]
 80038ca:	4293      	cmp	r3, r2
 80038cc:	f0c0 808d 	bcc.w	80039ea <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
 80038d6:	2304      	movs	r3, #4
 80038d8:	e09a      	b.n	8003a10 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	899b      	ldrh	r3, [r3, #12]
 80038de:	461a      	mov	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	8952      	ldrh	r2, [r2, #10]
 80038ea:	3a01      	subs	r2, #1
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d17b      	bne.n	80039ea <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7ff fc0b 	bl	8003116 <get_fat>
 8003900:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d801      	bhi.n	800390c <dir_next+0xa0>
 8003908:	2302      	movs	r3, #2
 800390a:	e081      	b.n	8003a10 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003912:	d101      	bne.n	8003918 <dir_next+0xac>
 8003914:	2301      	movs	r3, #1
 8003916:	e07b      	b.n	8003a10 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	429a      	cmp	r2, r3
 8003920:	d359      	bcc.n	80039d6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
 800392e:	2304      	movs	r3, #4
 8003930:	e06e      	b.n	8003a10 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f7ff fe3d 	bl	80035ba <create_chain>
 8003940:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <dir_next+0xe0>
 8003948:	2307      	movs	r3, #7
 800394a:	e061      	b.n	8003a10 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <dir_next+0xea>
 8003952:	2302      	movs	r3, #2
 8003954:	e05c      	b.n	8003a10 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d101      	bne.n	8003962 <dir_next+0xf6>
 800395e:	2301      	movs	r3, #1
 8003960:	e056      	b.n	8003a10 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff fad6 	bl	8002f14 <sync_window>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <dir_next+0x106>
 800396e:	2301      	movs	r3, #1
 8003970:	e04e      	b.n	8003a10 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	899b      	ldrh	r3, [r3, #12]
 800397c:	461a      	mov	r2, r3
 800397e:	2100      	movs	r1, #0
 8003980:	f7ff f8fe 	bl	8002b80 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	6979      	ldr	r1, [r7, #20]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff fba4 	bl	80030d8 <clust2sect>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	635a      	str	r2, [r3, #52]	@ 0x34
 8003996:	e012      	b.n	80039be <dir_next+0x152>
						fs->wflag = 1;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff fab8 	bl	8002f14 <sync_window>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <dir_next+0x142>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e030      	b.n	8003a10 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	3301      	adds	r3, #1
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	895b      	ldrh	r3, [r3, #10]
 80039c2:	461a      	mov	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d3e6      	bcc.n	8003998 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad2      	subs	r2, r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80039dc:	6979      	ldr	r1, [r7, #20]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff fb7a 	bl	80030d8 <clust2sect>
 80039e4:	4602      	mov	r2, r0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	899b      	ldrh	r3, [r3, #12]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a02:	fb00 f202 	mul.w	r2, r0, r2
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	18ca      	adds	r2, r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003a28:	2100      	movs	r1, #0
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fe95 	bl	800375a <dir_sdi>
 8003a30:	4603      	mov	r3, r0
 8003a32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d12b      	bne.n	8003a92 <dir_alloc+0x7a>
		n = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4619      	mov	r1, r3
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff faa9 	bl	8002f9c <move_window>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d11d      	bne.n	8003a90 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2be5      	cmp	r3, #229	@ 0xe5
 8003a5c:	d004      	beq.n	8003a68 <dir_alloc+0x50>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d102      	bne.n	8003a7c <dir_alloc+0x64>
 8003a76:	e00c      	b.n	8003a92 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fef4 	bl	800386c <dir_next>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0d7      	beq.n	8003a3e <dir_alloc+0x26>
 8003a8e:	e000      	b.n	8003a92 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003a90:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d101      	bne.n	8003a9c <dir_alloc+0x84>
 8003a98:	2307      	movs	r3, #7
 8003a9a:	75fb      	strb	r3, [r7, #23]
	return res;
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	331a      	adds	r3, #26
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe ffbf 	bl	8002a38 <ld_word>
 8003aba:	4603      	mov	r3, r0
 8003abc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d109      	bne.n	8003ada <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	3314      	adds	r3, #20
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe ffb4 	bl	8002a38 <ld_word>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003ada:	68fb      	ldr	r3, [r7, #12]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	331a      	adds	r3, #26
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	b292      	uxth	r2, r2
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe ffd8 	bl	8002ab0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d109      	bne.n	8003b1c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f103 0214 	add.w	r2, r3, #20
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	0c1b      	lsrs	r3, r3, #16
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f7fe ffca 	bl	8002ab0 <st_word>
	}
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	331a      	adds	r3, #26
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe ff80 	bl	8002a38 <ld_word>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <cmp_lfn+0x1e>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e059      	b.n	8003bf6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b4a:	1e5a      	subs	r2, r3, #1
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003b58:	2301      	movs	r3, #1
 8003b5a:	81fb      	strh	r3, [r7, #14]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	e033      	b.n	8003bca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003b62:	4a27      	ldr	r2, [pc, #156]	@ (8003c00 <cmp_lfn+0xdc>)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe ff61 	bl	8002a38 <ld_word>
 8003b76:	4603      	mov	r3, r0
 8003b78:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8003b7a:	89fb      	ldrh	r3, [r7, #14]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01a      	beq.n	8003bb6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2bfe      	cmp	r3, #254	@ 0xfe
 8003b84:	d812      	bhi.n	8003bac <cmp_lfn+0x88>
 8003b86:	89bb      	ldrh	r3, [r7, #12]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fd7b 	bl	8005684 <ff_wtoupper>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461c      	mov	r4, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	617a      	str	r2, [r7, #20]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 fd6f 	bl	8005684 <ff_wtoupper>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	429c      	cmp	r4, r3
 8003baa:	d001      	beq.n	8003bb0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8003bac:	2300      	movs	r3, #0
 8003bae:	e022      	b.n	8003bf6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8003bb0:	89bb      	ldrh	r3, [r7, #12]
 8003bb2:	81fb      	strh	r3, [r7, #14]
 8003bb4:	e006      	b.n	8003bc4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003bb6:	89bb      	ldrh	r3, [r7, #12]
 8003bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d001      	beq.n	8003bc4 <cmp_lfn+0xa0>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e018      	b.n	8003bf6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b0c      	cmp	r3, #12
 8003bce:	d9c8      	bls.n	8003b62 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00b      	beq.n	8003bf4 <cmp_lfn+0xd0>
 8003bdc:	89fb      	ldrh	r3, [r7, #14]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <cmp_lfn+0xd0>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <cmp_lfn+0xd0>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd90      	pop	{r4, r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	080062cc 	.word	0x080062cc

08003c04 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	4611      	mov	r1, r2
 8003c10:	461a      	mov	r2, r3
 8003c12:	460b      	mov	r3, r1
 8003c14:	71fb      	strb	r3, [r7, #7]
 8003c16:	4613      	mov	r3, r2
 8003c18:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	330d      	adds	r3, #13
 8003c1e:	79ba      	ldrb	r2, [r7, #6]
 8003c20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	330b      	adds	r3, #11
 8003c26:	220f      	movs	r2, #15
 8003c28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	331a      	adds	r3, #26
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe ff39 	bl	8002ab0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	82fb      	strh	r3, [r7, #22]
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003c56:	8afb      	ldrh	r3, [r7, #22]
 8003c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d007      	beq.n	8003c70 <put_lfn+0x6c>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	61fa      	str	r2, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003c70:	4a17      	ldr	r2, [pc, #92]	@ (8003cd0 <put_lfn+0xcc>)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	4413      	add	r3, r2
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	8afa      	ldrh	r2, [r7, #22]
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe ff14 	bl	8002ab0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003c88:	8afb      	ldrh	r3, [r7, #22]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <put_lfn+0x90>
 8003c8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c92:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	3301      	adds	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	d9da      	bls.n	8003c56 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003ca0:	8afb      	ldrh	r3, [r7, #22]
 8003ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d006      	beq.n	8003cb8 <put_lfn+0xb4>
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <put_lfn+0xbc>
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cbe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	79fa      	ldrb	r2, [r7, #7]
 8003cc4:	701a      	strb	r2, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	080062cc 	.word	0x080062cc

08003cd4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08c      	sub	sp, #48	@ 0x30
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8003ce2:	220b      	movs	r2, #11
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7fe ff29 	bl	8002b3e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b05      	cmp	r3, #5
 8003cf0:	d92b      	bls.n	8003d4a <gen_numname+0x76>
		sr = seq;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8003cf6:	e022      	b.n	8003d3e <gen_numname+0x6a>
			wc = *lfn++;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8003d02:	2300      	movs	r3, #0
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d06:	e017      	b.n	8003d38 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005a      	lsls	r2, r3, #1
 8003d0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8003d16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <gen_numname+0x5e>
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8003d2c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8003d30:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8003d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d34:	3301      	adds	r3, #1
 8003d36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	d9e4      	bls.n	8003d08 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1d8      	bne.n	8003cf8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8003d4a:	2307      	movs	r3, #7
 8003d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3330      	adds	r3, #48	@ 0x30
 8003d5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8003d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d62:	2b39      	cmp	r3, #57	@ 0x39
 8003d64:	d904      	bls.n	8003d70 <gen_numname+0x9c>
 8003d66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d6a:	3307      	adds	r3, #7
 8003d6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8003d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d72:	1e5a      	subs	r2, r3, #1
 8003d74:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d76:	3330      	adds	r3, #48	@ 0x30
 8003d78:	443b      	add	r3, r7
 8003d7a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003d7e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1df      	bne.n	8003d4e <gen_numname+0x7a>
	ns[i] = '~';
 8003d8e:	f107 0214 	add.w	r2, r7, #20
 8003d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d94:	4413      	add	r3, r2
 8003d96:	227e      	movs	r2, #126	@ 0x7e
 8003d98:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9e:	e002      	b.n	8003da6 <gen_numname+0xd2>
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	3301      	adds	r3, #1
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d205      	bcs.n	8003dba <gen_numname+0xe6>
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	4413      	add	r3, r2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d1f2      	bne.n	8003da0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	2b07      	cmp	r3, #7
 8003dbe:	d807      	bhi.n	8003dd0 <gen_numname+0xfc>
 8003dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003dc6:	3330      	adds	r3, #48	@ 0x30
 8003dc8:	443b      	add	r3, r7
 8003dca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8003dce:	e000      	b.n	8003dd2 <gen_numname+0xfe>
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	460a      	mov	r2, r1
 8003dde:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	2b07      	cmp	r3, #7
 8003de4:	d9e9      	bls.n	8003dba <gen_numname+0xe6>
}
 8003de6:	bf00      	nop
 8003de8:	bf00      	nop
 8003dea:	3730      	adds	r7, #48	@ 0x30
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8003dfc:	230b      	movs	r3, #11
 8003dfe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	0852      	lsrs	r2, r2, #1
 8003e06:	01db      	lsls	r3, r3, #7
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	1c59      	adds	r1, r3, #1
 8003e10:	6079      	str	r1, [r7, #4]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	4413      	add	r3, r2
 8003e16:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ed      	bne.n	8003e00 <sum_sfn+0x10>
	return sum;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003e40:	2100      	movs	r1, #0
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fc89 	bl	800375a <dir_sdi>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <dir_find+0x24>
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
 8003e54:	e0a9      	b.n	8003faa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003e56:	23ff      	movs	r3, #255	@ 0xff
 8003e58:	753b      	strb	r3, [r7, #20]
 8003e5a:	7d3b      	ldrb	r3, [r7, #20]
 8003e5c:	757b      	strb	r3, [r7, #21]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f04f 32ff 	mov.w	r2, #4294967295
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6938      	ldr	r0, [r7, #16]
 8003e6e:	f7ff f895 	bl	8002f9c <move_window>
 8003e72:	4603      	mov	r3, r0
 8003e74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f040 8090 	bne.w	8003f9e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003e86:	7dbb      	ldrb	r3, [r7, #22]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <dir_find+0x60>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	75fb      	strb	r3, [r7, #23]
 8003e90:	e08a      	b.n	8003fa8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	330b      	adds	r3, #11
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7bfa      	ldrb	r2, [r7, #15]
 8003ea4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003ea6:	7dbb      	ldrb	r3, [r7, #22]
 8003ea8:	2be5      	cmp	r3, #229	@ 0xe5
 8003eaa:	d007      	beq.n	8003ebc <dir_find+0x8a>
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <dir_find+0x98>
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	2b0f      	cmp	r3, #15
 8003eba:	d006      	beq.n	8003eca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003ebc:	23ff      	movs	r3, #255	@ 0xff
 8003ebe:	757b      	strb	r3, [r7, #21]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ec8:	e05e      	b.n	8003f88 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b0f      	cmp	r3, #15
 8003ece:	d136      	bne.n	8003f3e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d154      	bne.n	8003f88 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003ede:	7dbb      	ldrb	r3, [r7, #22]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00d      	beq.n	8003f04 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	7b5b      	ldrb	r3, [r3, #13]
 8003eee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003ef0:	7dbb      	ldrb	r3, [r7, #22]
 8003ef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ef6:	75bb      	strb	r3, [r7, #22]
 8003ef8:	7dbb      	ldrb	r3, [r7, #22]
 8003efa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003f04:	7dba      	ldrb	r2, [r7, #22]
 8003f06:	7d7b      	ldrb	r3, [r7, #21]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d115      	bne.n	8003f38 <dir_find+0x106>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	330d      	adds	r3, #13
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	7d3a      	ldrb	r2, [r7, #20]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d10e      	bne.n	8003f38 <dir_find+0x106>
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7ff fdfd 	bl	8003b24 <cmp_lfn>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <dir_find+0x106>
 8003f30:	7d7b      	ldrb	r3, [r7, #21]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e000      	b.n	8003f3a <dir_find+0x108>
 8003f38:	23ff      	movs	r3, #255	@ 0xff
 8003f3a:	757b      	strb	r3, [r7, #21]
 8003f3c:	e024      	b.n	8003f88 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003f3e:	7d7b      	ldrb	r3, [r7, #21]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d109      	bne.n	8003f58 <dir_find+0x126>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff51 	bl	8003df0 <sum_sfn>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461a      	mov	r2, r3
 8003f52:	7d3b      	ldrb	r3, [r7, #20]
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d024      	beq.n	8003fa2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <dir_find+0x14a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a18      	ldr	r0, [r3, #32]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3324      	adds	r3, #36	@ 0x24
 8003f6e:	220b      	movs	r2, #11
 8003f70:	4619      	mov	r1, r3
 8003f72:	f7fe fe20 	bl	8002bb6 <mem_cmp>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d014      	beq.n	8003fa6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003f7c:	23ff      	movs	r3, #255	@ 0xff
 8003f7e:	757b      	strb	r3, [r7, #21]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f04f 32ff 	mov.w	r2, #4294967295
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003f88:	2100      	movs	r1, #0
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fc6e 	bl	800386c <dir_next>
 8003f90:	4603      	mov	r3, r0
 8003f92:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f43f af65 	beq.w	8003e66 <dir_find+0x34>
 8003f9c:	e004      	b.n	8003fa8 <dir_find+0x176>
		if (res != FR_OK) break;
 8003f9e:	bf00      	nop
 8003fa0:	e002      	b.n	8003fa8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003fa6:	bf00      	nop

	return res;
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08c      	sub	sp, #48	@ 0x30
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003fc8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <dir_register+0x20>
 8003fd0:	2306      	movs	r3, #6
 8003fd2:	e0e0      	b.n	8004196 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd8:	e002      	b.n	8003fe0 <dir_register+0x2c>
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	3301      	adds	r3, #1
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4413      	add	r3, r2
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f4      	bne.n	8003fda <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8003ff6:	f107 030c 	add.w	r3, r7, #12
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fd9e 	bl	8002b3e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d032      	beq.n	8004072 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2240      	movs	r2, #64	@ 0x40
 8004010:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8004014:	2301      	movs	r3, #1
 8004016:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004018:	e016      	b.n	8004048 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	f107 010c 	add.w	r1, r7, #12
 8004028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402a:	f7ff fe53 	bl	8003cd4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff feff 	bl	8003e32 <dir_find>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800403a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	3301      	adds	r3, #1
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	2b63      	cmp	r3, #99	@ 0x63
 800404c:	d9e5      	bls.n	800401a <dir_register+0x66>
 800404e:	e000      	b.n	8004052 <dir_register+0x9e>
			if (res != FR_OK) break;
 8004050:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004054:	2b64      	cmp	r3, #100	@ 0x64
 8004056:	d101      	bne.n	800405c <dir_register+0xa8>
 8004058:	2307      	movs	r3, #7
 800405a:	e09c      	b.n	8004196 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800405c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004060:	2b04      	cmp	r3, #4
 8004062:	d002      	beq.n	800406a <dir_register+0xb6>
 8004064:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004068:	e095      	b.n	8004196 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800406a:	7dfa      	ldrb	r2, [r7, #23]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <dir_register+0xd8>
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	330c      	adds	r3, #12
 8004080:	4a47      	ldr	r2, [pc, #284]	@ (80041a0 <dir_register+0x1ec>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	3301      	adds	r3, #1
 800408a:	e000      	b.n	800408e <dir_register+0xda>
 800408c:	2301      	movs	r3, #1
 800408e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004090:	6a39      	ldr	r1, [r7, #32]
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff fcc0 	bl	8003a18 <dir_alloc>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800409e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d148      	bne.n	8004138 <dir_register+0x184>
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	623b      	str	r3, [r7, #32]
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d042      	beq.n	8004138 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	015b      	lsls	r3, r3, #5
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fb4b 	bl	800375a <dir_sdi>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80040ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d132      	bne.n	8004138 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3324      	adds	r3, #36	@ 0x24
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fe8a 	bl	8003df0 <sum_sfn>
 80040dc:	4603      	mov	r3, r0
 80040de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	4619      	mov	r1, r3
 80040e6:	69f8      	ldr	r0, [r7, #28]
 80040e8:	f7fe ff58 	bl	8002f9c <move_window>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80040f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11d      	bne.n	8004136 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	6918      	ldr	r0, [r3, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a19      	ldr	r1, [r3, #32]
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	7efb      	ldrb	r3, [r7, #27]
 8004108:	f7ff fd7c 	bl	8003c04 <put_lfn>
				fs->wflag = 1;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2201      	movs	r2, #1
 8004110:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004112:	2100      	movs	r1, #0
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fba9 	bl	800386c <dir_next>
 800411a:	4603      	mov	r3, r0
 800411c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8004120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004124:	2b00      	cmp	r3, #0
 8004126:	d107      	bne.n	8004138 <dir_register+0x184>
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	3b01      	subs	r3, #1
 800412c:	623b      	str	r3, [r7, #32]
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1d5      	bne.n	80040e0 <dir_register+0x12c>
 8004134:	e000      	b.n	8004138 <dir_register+0x184>
				if (res != FR_OK) break;
 8004136:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004138:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800413c:	2b00      	cmp	r3, #0
 800413e:	d128      	bne.n	8004192 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	4619      	mov	r1, r3
 8004146:	69f8      	ldr	r0, [r7, #28]
 8004148:	f7fe ff28 	bl	8002f9c <move_window>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004152:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11b      	bne.n	8004192 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	2220      	movs	r2, #32
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fd0c 	bl	8002b80 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a18      	ldr	r0, [r3, #32]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3324      	adds	r3, #36	@ 0x24
 8004170:	220b      	movs	r2, #11
 8004172:	4619      	mov	r1, r3
 8004174:	f7fe fce3 	bl	8002b3e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	330c      	adds	r3, #12
 8004184:	f002 0218 	and.w	r2, r2, #24
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2201      	movs	r2, #1
 8004190:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004196:	4618      	mov	r0, r3
 8004198:	3730      	adds	r7, #48	@ 0x30
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	4ec4ec4f 	.word	0x4ec4ec4f

080041a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	@ 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	61ba      	str	r2, [r7, #24]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80041d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041d4:	2b1f      	cmp	r3, #31
 80041d6:	d940      	bls.n	800425a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80041d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041da:	2b2f      	cmp	r3, #47	@ 0x2f
 80041dc:	d006      	beq.n	80041ec <create_name+0x48>
 80041de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80041e2:	d110      	bne.n	8004206 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80041e4:	e002      	b.n	80041ec <create_name+0x48>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3301      	adds	r3, #1
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	4413      	add	r3, r2
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80041f6:	d0f6      	beq.n	80041e6 <create_name+0x42>
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b5c      	cmp	r3, #92	@ 0x5c
 8004202:	d0f0      	beq.n	80041e6 <create_name+0x42>
			break;
 8004204:	e02a      	b.n	800425c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2bfe      	cmp	r3, #254	@ 0xfe
 800420a:	d901      	bls.n	8004210 <create_name+0x6c>
 800420c:	2306      	movs	r3, #6
 800420e:	e17d      	b.n	800450c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004210:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004212:	b2db      	uxtb	r3, r3
 8004214:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004216:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004218:	2101      	movs	r1, #1
 800421a:	4618      	mov	r0, r3
 800421c:	f001 f9f6 	bl	800560c <ff_convert>
 8004220:	4603      	mov	r3, r0
 8004222:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004224:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <create_name+0x8a>
 800422a:	2306      	movs	r3, #6
 800422c:	e16e      	b.n	800450c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800422e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004230:	2b7f      	cmp	r3, #127	@ 0x7f
 8004232:	d809      	bhi.n	8004248 <create_name+0xa4>
 8004234:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004236:	4619      	mov	r1, r3
 8004238:	488d      	ldr	r0, [pc, #564]	@ (8004470 <create_name+0x2cc>)
 800423a:	f7fe fce3 	bl	8002c04 <chk_chr>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <create_name+0xa4>
 8004244:	2306      	movs	r3, #6
 8004246:	e161      	b.n	800450c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	617a      	str	r2, [r7, #20]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004256:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004258:	e7b4      	b.n	80041c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800425a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	441a      	add	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004268:	2b1f      	cmp	r3, #31
 800426a:	d801      	bhi.n	8004270 <create_name+0xcc>
 800426c:	2304      	movs	r3, #4
 800426e:	e000      	b.n	8004272 <create_name+0xce>
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004276:	e011      	b.n	800429c <create_name+0xf8>
		w = lfn[di - 1];
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800427e:	3b01      	subs	r3, #1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800428a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800428c:	2b20      	cmp	r3, #32
 800428e:	d002      	beq.n	8004296 <create_name+0xf2>
 8004290:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004292:	2b2e      	cmp	r3, #46	@ 0x2e
 8004294:	d106      	bne.n	80042a4 <create_name+0x100>
		di--;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	3b01      	subs	r3, #1
 800429a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1ea      	bne.n	8004278 <create_name+0xd4>
 80042a2:	e000      	b.n	80042a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80042a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	2200      	movs	r2, #0
 80042b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <create_name+0x118>
 80042b8:	2306      	movs	r3, #6
 80042ba:	e127      	b.n	800450c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3324      	adds	r3, #36	@ 0x24
 80042c0:	220b      	movs	r2, #11
 80042c2:	2120      	movs	r1, #32
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe fc5b 	bl	8002b80 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	e002      	b.n	80042d6 <create_name+0x132>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	3301      	adds	r3, #1
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d0f5      	beq.n	80042d0 <create_name+0x12c>
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80042f0:	d0ee      	beq.n	80042d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <create_name+0x168>
 80042f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042fc:	f043 0303 	orr.w	r3, r3, #3
 8004300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004304:	e002      	b.n	800430c <create_name+0x168>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3b01      	subs	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <create_name+0x182>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004318:	3b01      	subs	r3, #1
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	2b2e      	cmp	r3, #46	@ 0x2e
 8004324:	d1ef      	bne.n	8004306 <create_name+0x162>

	i = b = 0; ni = 8;
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800432c:	2300      	movs	r3, #0
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	2308      	movs	r3, #8
 8004332:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	61ba      	str	r2, [r7, #24]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004344:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8090 	beq.w	800446c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800434c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800434e:	2b20      	cmp	r3, #32
 8004350:	d006      	beq.n	8004360 <create_name+0x1bc>
 8004352:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004354:	2b2e      	cmp	r3, #46	@ 0x2e
 8004356:	d10a      	bne.n	800436e <create_name+0x1ca>
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	429a      	cmp	r2, r3
 800435e:	d006      	beq.n	800436e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004364:	f043 0303 	orr.w	r3, r3, #3
 8004368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800436c:	e07d      	b.n	800446a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800436e:	6a3a      	ldr	r2, [r7, #32]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	429a      	cmp	r2, r3
 8004374:	d203      	bcs.n	800437e <create_name+0x1da>
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	429a      	cmp	r2, r3
 800437c:	d123      	bne.n	80043c6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b0b      	cmp	r3, #11
 8004382:	d106      	bne.n	8004392 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004388:	f043 0303 	orr.w	r3, r3, #3
 800438c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004390:	e075      	b.n	800447e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	429a      	cmp	r2, r3
 8004398:	d005      	beq.n	80043a6 <create_name+0x202>
 800439a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800439e:	f043 0303 	orr.w	r3, r3, #3
 80043a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d866      	bhi.n	800447c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	2308      	movs	r3, #8
 80043b4:	623b      	str	r3, [r7, #32]
 80043b6:	230b      	movs	r3, #11
 80043b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80043ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80043c4:	e051      	b.n	800446a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80043c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80043ca:	d914      	bls.n	80043f6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80043cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f001 f91b 	bl	800560c <ff_convert>
 80043d6:	4603      	mov	r3, r0
 80043d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80043da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <create_name+0x246>
 80043e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043e2:	3b80      	subs	r3, #128	@ 0x80
 80043e4:	4a23      	ldr	r2, [pc, #140]	@ (8004474 <create_name+0x2d0>)
 80043e6:	5cd3      	ldrb	r3, [r2, r3]
 80043e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80043ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043ee:	f043 0302 	orr.w	r3, r3, #2
 80043f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80043f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <create_name+0x268>
 80043fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043fe:	4619      	mov	r1, r3
 8004400:	481d      	ldr	r0, [pc, #116]	@ (8004478 <create_name+0x2d4>)
 8004402:	f7fe fbff 	bl	8002c04 <chk_chr>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800440c:	235f      	movs	r3, #95	@ 0x5f
 800440e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004414:	f043 0303 	orr.w	r3, r3, #3
 8004418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800441c:	e01b      	b.n	8004456 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800441e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004420:	2b40      	cmp	r3, #64	@ 0x40
 8004422:	d909      	bls.n	8004438 <create_name+0x294>
 8004424:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004426:	2b5a      	cmp	r3, #90	@ 0x5a
 8004428:	d806      	bhi.n	8004438 <create_name+0x294>
					b |= 2;
 800442a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800442e:	f043 0302 	orr.w	r3, r3, #2
 8004432:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004436:	e00e      	b.n	8004456 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004438:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800443a:	2b60      	cmp	r3, #96	@ 0x60
 800443c:	d90b      	bls.n	8004456 <create_name+0x2b2>
 800443e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004440:	2b7a      	cmp	r3, #122	@ 0x7a
 8004442:	d808      	bhi.n	8004456 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004444:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004452:	3b20      	subs	r3, #32
 8004454:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	623a      	str	r2, [r7, #32]
 800445c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800445e:	b2d1      	uxtb	r1, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	4413      	add	r3, r2
 8004464:	460a      	mov	r2, r1
 8004466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800446a:	e763      	b.n	8004334 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800446c:	bf00      	nop
 800446e:	e006      	b.n	800447e <create_name+0x2da>
 8004470:	080061ec 	.word	0x080061ec
 8004474:	0800624c 	.word	0x0800624c
 8004478:	080061f8 	.word	0x080061f8
			if (si > di) break;			/* No extension */
 800447c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004484:	2be5      	cmp	r3, #229	@ 0xe5
 8004486:	d103      	bne.n	8004490 <create_name+0x2ec>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2205      	movs	r2, #5
 800448c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b08      	cmp	r3, #8
 8004494:	d104      	bne.n	80044a0 <create_name+0x2fc>
 8004496:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80044a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80044a4:	f003 030c 	and.w	r3, r3, #12
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	d005      	beq.n	80044b8 <create_name+0x314>
 80044ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d105      	bne.n	80044c4 <create_name+0x320>
 80044b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80044c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d117      	bne.n	8004500 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80044d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d105      	bne.n	80044e8 <create_name+0x344>
 80044dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044e0:	f043 0310 	orr.w	r3, r3, #16
 80044e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80044e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d105      	bne.n	8004500 <create_name+0x35c>
 80044f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044f8:	f043 0308 	orr.w	r3, r3, #8
 80044fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004506:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800450a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800450c:	4618      	mov	r0, r3
 800450e:	3728      	adds	r7, #40	@ 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004528:	e002      	b.n	8004530 <follow_path+0x1c>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b2f      	cmp	r3, #47	@ 0x2f
 8004536:	d0f8      	beq.n	800452a <follow_path+0x16>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b5c      	cmp	r3, #92	@ 0x5c
 800453e:	d0f4      	beq.n	800452a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2200      	movs	r2, #0
 8004544:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b1f      	cmp	r3, #31
 800454c:	d80a      	bhi.n	8004564 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2280      	movs	r2, #128	@ 0x80
 8004552:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8004556:	2100      	movs	r1, #0
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff f8fe 	bl	800375a <dir_sdi>
 800455e:	4603      	mov	r3, r0
 8004560:	75fb      	strb	r3, [r7, #23]
 8004562:	e048      	b.n	80045f6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004564:	463b      	mov	r3, r7
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff fe1b 	bl	80041a4 <create_name>
 800456e:	4603      	mov	r3, r0
 8004570:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d139      	bne.n	80045ec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fc5a 	bl	8003e32 <dir_find>
 800457e:	4603      	mov	r3, r0
 8004580:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004588:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004590:	7dfb      	ldrb	r3, [r7, #23]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d12c      	bne.n	80045f0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004596:	7afb      	ldrb	r3, [r7, #11]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d127      	bne.n	80045f0 <follow_path+0xdc>
 80045a0:	2305      	movs	r3, #5
 80045a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80045a4:	e024      	b.n	80045f0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80045a6:	7afb      	ldrb	r3, [r7, #11]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d121      	bne.n	80045f4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	799b      	ldrb	r3, [r3, #6]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80045bc:	2305      	movs	r3, #5
 80045be:	75fb      	strb	r3, [r7, #23]
 80045c0:	e019      	b.n	80045f6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	8992      	ldrh	r2, [r2, #12]
 80045d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80045d4:	fb00 f202 	mul.w	r2, r0, r2
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	440b      	add	r3, r1
 80045dc:	4619      	mov	r1, r3
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff fa61 	bl	8003aa6 <ld_clust>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80045ea:	e7bb      	b.n	8004564 <follow_path+0x50>
			if (res != FR_OK) break;
 80045ec:	bf00      	nop
 80045ee:	e002      	b.n	80045f6 <follow_path+0xe2>
				break;
 80045f0:	bf00      	nop
 80045f2:	e000      	b.n	80045f6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80045f4:	bf00      	nop
			}
		}
	}

	return res;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004608:	f04f 33ff 	mov.w	r3, #4294967295
 800460c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d031      	beq.n	800467a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e002      	b.n	8004624 <get_ldnumber+0x24>
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	3301      	adds	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b1f      	cmp	r3, #31
 800462a:	d903      	bls.n	8004634 <get_ldnumber+0x34>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b3a      	cmp	r3, #58	@ 0x3a
 8004632:	d1f4      	bne.n	800461e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b3a      	cmp	r3, #58	@ 0x3a
 800463a:	d11c      	bne.n	8004676 <get_ldnumber+0x76>
			tp = *path;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	60fa      	str	r2, [r7, #12]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	3b30      	subs	r3, #48	@ 0x30
 800464c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b09      	cmp	r3, #9
 8004652:	d80e      	bhi.n	8004672 <get_ldnumber+0x72>
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	429a      	cmp	r2, r3
 800465a:	d10a      	bne.n	8004672 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <get_ldnumber+0x72>
					vol = (int)i;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	3301      	adds	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	e002      	b.n	800467c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800467a:	693b      	ldr	r3, [r7, #16]
}
 800467c:	4618      	mov	r0, r3
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	70da      	strb	r2, [r3, #3]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f04f 32ff 	mov.w	r2, #4294967295
 800469e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fe fc7a 	bl	8002f9c <move_window>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <check_fs+0x2a>
 80046ae:	2304      	movs	r3, #4
 80046b0:	e038      	b.n	8004724 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3338      	adds	r3, #56	@ 0x38
 80046b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe f9bc 	bl	8002a38 <ld_word>
 80046c0:	4603      	mov	r3, r0
 80046c2:	461a      	mov	r2, r3
 80046c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <check_fs+0x48>
 80046cc:	2303      	movs	r3, #3
 80046ce:	e029      	b.n	8004724 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046d6:	2be9      	cmp	r3, #233	@ 0xe9
 80046d8:	d009      	beq.n	80046ee <check_fs+0x66>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046e0:	2beb      	cmp	r3, #235	@ 0xeb
 80046e2:	d11e      	bne.n	8004722 <check_fs+0x9a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80046ea:	2b90      	cmp	r3, #144	@ 0x90
 80046ec:	d119      	bne.n	8004722 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3338      	adds	r3, #56	@ 0x38
 80046f2:	3336      	adds	r3, #54	@ 0x36
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe f9b8 	bl	8002a6a <ld_dword>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004700:	4a0a      	ldr	r2, [pc, #40]	@ (800472c <check_fs+0xa4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <check_fs+0x82>
 8004706:	2300      	movs	r3, #0
 8004708:	e00c      	b.n	8004724 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3338      	adds	r3, #56	@ 0x38
 800470e:	3352      	adds	r3, #82	@ 0x52
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe f9aa 	bl	8002a6a <ld_dword>
 8004716:	4603      	mov	r3, r0
 8004718:	4a05      	ldr	r2, [pc, #20]	@ (8004730 <check_fs+0xa8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <check_fs+0x9a>
 800471e:	2300      	movs	r3, #0
 8004720:	e000      	b.n	8004724 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004722:	2302      	movs	r3, #2
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	00544146 	.word	0x00544146
 8004730:	33544146 	.word	0x33544146

08004734 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b096      	sub	sp, #88	@ 0x58
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	4613      	mov	r3, r2
 8004740:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff ff59 	bl	8004600 <get_ldnumber>
 800474e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004752:	2b00      	cmp	r3, #0
 8004754:	da01      	bge.n	800475a <find_volume+0x26>
 8004756:	230b      	movs	r3, #11
 8004758:	e265      	b.n	8004c26 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800475a:	4a9f      	ldr	r2, [pc, #636]	@ (80049d8 <find_volume+0x2a4>)
 800475c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800475e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004762:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <find_volume+0x3a>
 800476a:	230c      	movs	r3, #12
 800476c:	e25b      	b.n	8004c26 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004772:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01a      	beq.n	80047ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004786:	785b      	ldrb	r3, [r3, #1]
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe f8b5 	bl	80028f8 <disk_status>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004794:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10c      	bne.n	80047ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <find_volume+0x82>
 80047a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80047b2:	230a      	movs	r3, #10
 80047b4:	e237      	b.n	8004c26 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80047b6:	2300      	movs	r3, #0
 80047b8:	e235      	b.n	8004c26 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80047ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80047c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	785b      	ldrb	r3, [r3, #1]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe f8ad 	bl	800292c <disk_initialize>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80047d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80047e4:	2303      	movs	r3, #3
 80047e6:	e21e      	b.n	8004c26 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <find_volume+0xca>
 80047ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80047fa:	230a      	movs	r3, #10
 80047fc:	e213      	b.n	8004c26 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	7858      	ldrb	r0, [r3, #1]
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004804:	330c      	adds	r3, #12
 8004806:	461a      	mov	r2, r3
 8004808:	2102      	movs	r1, #2
 800480a:	f7fe f8f7 	bl	80029fc <disk_ioctl>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <find_volume+0xe4>
 8004814:	2301      	movs	r3, #1
 8004816:	e206      	b.n	8004c26 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481a:	899b      	ldrh	r3, [r3, #12]
 800481c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004820:	d80d      	bhi.n	800483e <find_volume+0x10a>
 8004822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004824:	899b      	ldrh	r3, [r3, #12]
 8004826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800482a:	d308      	bcc.n	800483e <find_volume+0x10a>
 800482c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482e:	899b      	ldrh	r3, [r3, #12]
 8004830:	461a      	mov	r2, r3
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	899b      	ldrh	r3, [r3, #12]
 8004836:	3b01      	subs	r3, #1
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <find_volume+0x10e>
 800483e:	2301      	movs	r3, #1
 8004840:	e1f1      	b.n	8004c26 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004846:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004848:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800484a:	f7ff ff1d 	bl	8004688 <check_fs>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004854:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004858:	2b02      	cmp	r3, #2
 800485a:	d149      	bne.n	80048f0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800485c:	2300      	movs	r3, #0
 800485e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004860:	e01e      	b.n	80048a0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004864:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004870:	4413      	add	r3, r2
 8004872:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	3304      	adds	r3, #4
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d006      	beq.n	800488c <find_volume+0x158>
 800487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004880:	3308      	adds	r3, #8
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe f8f1 	bl	8002a6a <ld_dword>
 8004888:	4602      	mov	r2, r0
 800488a:	e000      	b.n	800488e <find_volume+0x15a>
 800488c:	2200      	movs	r2, #0
 800488e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	3358      	adds	r3, #88	@ 0x58
 8004894:	443b      	add	r3, r7
 8004896:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800489a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800489c:	3301      	adds	r3, #1
 800489e:	643b      	str	r3, [r7, #64]	@ 0x40
 80048a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d9dd      	bls.n	8004862 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80048a6:	2300      	movs	r3, #0
 80048a8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80048aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <find_volume+0x182>
 80048b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b2:	3b01      	subs	r3, #1
 80048b4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80048b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	3358      	adds	r3, #88	@ 0x58
 80048bc:	443b      	add	r3, r7
 80048be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80048c2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80048c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <find_volume+0x1a2>
 80048ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80048cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80048ce:	f7ff fedb 	bl	8004688 <check_fs>
 80048d2:	4603      	mov	r3, r0
 80048d4:	e000      	b.n	80048d8 <find_volume+0x1a4>
 80048d6:	2303      	movs	r3, #3
 80048d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80048dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d905      	bls.n	80048f0 <find_volume+0x1bc>
 80048e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e6:	3301      	adds	r3, #1
 80048e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80048ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d9e2      	bls.n	80048b6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80048f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d101      	bne.n	80048fc <find_volume+0x1c8>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e194      	b.n	8004c26 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80048fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004900:	2b01      	cmp	r3, #1
 8004902:	d901      	bls.n	8004908 <find_volume+0x1d4>
 8004904:	230d      	movs	r3, #13
 8004906:	e18e      	b.n	8004c26 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490a:	3338      	adds	r3, #56	@ 0x38
 800490c:	330b      	adds	r3, #11
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe f892 	bl	8002a38 <ld_word>
 8004914:	4603      	mov	r3, r0
 8004916:	461a      	mov	r2, r3
 8004918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491a:	899b      	ldrh	r3, [r3, #12]
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <find_volume+0x1f0>
 8004920:	230d      	movs	r3, #13
 8004922:	e180      	b.n	8004c26 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004926:	3338      	adds	r3, #56	@ 0x38
 8004928:	3316      	adds	r3, #22
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe f884 	bl	8002a38 <ld_word>
 8004930:	4603      	mov	r3, r0
 8004932:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <find_volume+0x214>
 800493a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493c:	3338      	adds	r3, #56	@ 0x38
 800493e:	3324      	adds	r3, #36	@ 0x24
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe f892 	bl	8002a6a <ld_dword>
 8004946:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800494c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8004954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004956:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495a:	789b      	ldrb	r3, [r3, #2]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d005      	beq.n	800496c <find_volume+0x238>
 8004960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004962:	789b      	ldrb	r3, [r3, #2]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d001      	beq.n	800496c <find_volume+0x238>
 8004968:	230d      	movs	r3, #13
 800496a:	e15c      	b.n	8004c26 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800496c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496e:	789b      	ldrb	r3, [r3, #2]
 8004970:	461a      	mov	r2, r3
 8004972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004974:	fb02 f303 	mul.w	r3, r2, r3
 8004978:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800497a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800497c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004980:	461a      	mov	r2, r3
 8004982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004984:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004988:	895b      	ldrh	r3, [r3, #10]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d008      	beq.n	80049a0 <find_volume+0x26c>
 800498e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004990:	895b      	ldrh	r3, [r3, #10]
 8004992:	461a      	mov	r2, r3
 8004994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004996:	895b      	ldrh	r3, [r3, #10]
 8004998:	3b01      	subs	r3, #1
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <find_volume+0x270>
 80049a0:	230d      	movs	r3, #13
 80049a2:	e140      	b.n	8004c26 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80049a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a6:	3338      	adds	r3, #56	@ 0x38
 80049a8:	3311      	adds	r3, #17
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe f844 	bl	8002a38 <ld_word>
 80049b0:	4603      	mov	r3, r0
 80049b2:	461a      	mov	r2, r3
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80049b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ba:	891b      	ldrh	r3, [r3, #8]
 80049bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049be:	8992      	ldrh	r2, [r2, #12]
 80049c0:	0952      	lsrs	r2, r2, #5
 80049c2:	b292      	uxth	r2, r2
 80049c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80049c8:	fb01 f202 	mul.w	r2, r1, r2
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <find_volume+0x2a8>
 80049d4:	230d      	movs	r3, #13
 80049d6:	e126      	b.n	8004c26 <find_volume+0x4f2>
 80049d8:	20002210 	.word	0x20002210

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80049dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049de:	3338      	adds	r3, #56	@ 0x38
 80049e0:	3313      	adds	r3, #19
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe f828 	bl	8002a38 <ld_word>
 80049e8:	4603      	mov	r3, r0
 80049ea:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80049ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <find_volume+0x2cc>
 80049f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f4:	3338      	adds	r3, #56	@ 0x38
 80049f6:	3320      	adds	r3, #32
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe f836 	bl	8002a6a <ld_dword>
 80049fe:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a02:	3338      	adds	r3, #56	@ 0x38
 8004a04:	330e      	adds	r3, #14
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe f816 	bl	8002a38 <ld_word>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004a10:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <find_volume+0x2e6>
 8004a16:	230d      	movs	r3, #13
 8004a18:	e105      	b.n	8004c26 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004a1a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a1e:	4413      	add	r3, r2
 8004a20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a22:	8911      	ldrh	r1, [r2, #8]
 8004a24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a26:	8992      	ldrh	r2, [r2, #12]
 8004a28:	0952      	lsrs	r2, r2, #5
 8004a2a:	b292      	uxth	r2, r2
 8004a2c:	fbb1 f2f2 	udiv	r2, r1, r2
 8004a30:	b292      	uxth	r2, r2
 8004a32:	4413      	add	r3, r2
 8004a34:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004a36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d201      	bcs.n	8004a42 <find_volume+0x30e>
 8004a3e:	230d      	movs	r3, #13
 8004a40:	e0f1      	b.n	8004c26 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004a42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a4a:	8952      	ldrh	r2, [r2, #10]
 8004a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <find_volume+0x328>
 8004a58:	230d      	movs	r3, #13
 8004a5a:	e0e4      	b.n	8004c26 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d802      	bhi.n	8004a72 <find_volume+0x33e>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d802      	bhi.n	8004a82 <find_volume+0x34e>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	1c9a      	adds	r2, r3, #2
 8004a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a88:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a8e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004a90:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a94:	441a      	add	r2, r3
 8004a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a98:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8004a9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9e:	441a      	add	r2, r3
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8004aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d11e      	bne.n	8004aea <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aae:	3338      	adds	r3, #56	@ 0x38
 8004ab0:	332a      	adds	r3, #42	@ 0x2a
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd ffc0 	bl	8002a38 <ld_word>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <find_volume+0x38e>
 8004abe:	230d      	movs	r3, #13
 8004ac0:	e0b1      	b.n	8004c26 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac4:	891b      	ldrh	r3, [r3, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <find_volume+0x39a>
 8004aca:	230d      	movs	r3, #13
 8004acc:	e0ab      	b.n	8004c26 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad0:	3338      	adds	r3, #56	@ 0x38
 8004ad2:	332c      	adds	r3, #44	@ 0x2c
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fd ffc8 	bl	8002a6a <ld_dword>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ade:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ae8:	e01f      	b.n	8004b2a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aec:	891b      	ldrh	r3, [r3, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <find_volume+0x3c2>
 8004af2:	230d      	movs	r3, #13
 8004af4:	e097      	b.n	8004c26 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004afc:	441a      	add	r2, r3
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004b02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d103      	bne.n	8004b12 <find_volume+0x3de>
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	e00a      	b.n	8004b28 <find_volume+0x3f4>
 8004b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b14:	69da      	ldr	r2, [r3, #28]
 8004b16:	4613      	mov	r3, r2
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	4413      	add	r3, r2
 8004b1c:	085a      	lsrs	r2, r3, #1
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004b28:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2c:	6a1a      	ldr	r2, [r3, #32]
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b30:	899b      	ldrh	r3, [r3, #12]
 8004b32:	4619      	mov	r1, r3
 8004b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b36:	440b      	add	r3, r1
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b3c:	8989      	ldrh	r1, [r1, #12]
 8004b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d201      	bcs.n	8004b4a <find_volume+0x416>
 8004b46:	230d      	movs	r3, #13
 8004b48:	e06d      	b.n	8004c26 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b50:	619a      	str	r2, [r3, #24]
 8004b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	2280      	movs	r2, #128	@ 0x80
 8004b5e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004b60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d149      	bne.n	8004bfc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6a:	3338      	adds	r3, #56	@ 0x38
 8004b6c:	3330      	adds	r3, #48	@ 0x30
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fd ff62 	bl	8002a38 <ld_word>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d140      	bne.n	8004bfc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b82:	f7fe fa0b 	bl	8002f9c <move_window>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d137      	bne.n	8004bfc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8e:	2200      	movs	r2, #0
 8004b90:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	3338      	adds	r3, #56	@ 0x38
 8004b96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fd ff4c 	bl	8002a38 <ld_word>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d127      	bne.n	8004bfc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	3338      	adds	r3, #56	@ 0x38
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fd ff5a 	bl	8002a6a <ld_dword>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c30 <find_volume+0x4fc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d11e      	bne.n	8004bfc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	3338      	adds	r3, #56	@ 0x38
 8004bc2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fd ff4f 	bl	8002a6a <ld_dword>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4a19      	ldr	r2, [pc, #100]	@ (8004c34 <find_volume+0x500>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d113      	bne.n	8004bfc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd6:	3338      	adds	r3, #56	@ 0x38
 8004bd8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fd ff44 	bl	8002a6a <ld_dword>
 8004be2:	4602      	mov	r2, r0
 8004be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bea:	3338      	adds	r3, #56	@ 0x38
 8004bec:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fd ff3a 	bl	8002a6a <ld_dword>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004c02:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <find_volume+0x504>)
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <find_volume+0x504>)
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	4b09      	ldr	r3, [pc, #36]	@ (8004c38 <find_volume+0x504>)
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c16:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1a:	4a08      	ldr	r2, [pc, #32]	@ (8004c3c <find_volume+0x508>)
 8004c1c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004c1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c20:	f7fe f954 	bl	8002ecc <clear_lock>
#endif
	return FR_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3758      	adds	r7, #88	@ 0x58
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	41615252 	.word	0x41615252
 8004c34:	61417272 	.word	0x61417272
 8004c38:	20002214 	.word	0x20002214
 8004c3c:	20002238 	.word	0x20002238

08004c40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004c4a:	2309      	movs	r3, #9
 8004c4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01c      	beq.n	8004c8e <validate+0x4e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d018      	beq.n	8004c8e <validate+0x4e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d013      	beq.n	8004c8e <validate+0x4e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	889a      	ldrh	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	88db      	ldrh	r3, [r3, #6]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d10c      	bne.n	8004c8e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fd fe3c 	bl	80028f8 <disk_status>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <validate+0x4e>
			res = FR_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <validate+0x5a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	e000      	b.n	8004c9c <validate+0x5c>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	6013      	str	r3, [r2, #0]
	return res;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004cbe:	f107 0310 	add.w	r3, r7, #16
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fc9c 	bl	8004600 <get_ldnumber>
 8004cc8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	da01      	bge.n	8004cd4 <f_mount+0x28>
 8004cd0:	230b      	movs	r3, #11
 8004cd2:	e02b      	b.n	8004d2c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004cd4:	4a17      	ldr	r2, [pc, #92]	@ (8004d34 <f_mount+0x88>)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cdc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004ce4:	69b8      	ldr	r0, [r7, #24]
 8004ce6:	f7fe f8f1 	bl	8002ecc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	490d      	ldr	r1, [pc, #52]	@ (8004d34 <f_mount+0x88>)
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <f_mount+0x66>
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d001      	beq.n	8004d16 <f_mount+0x6a>
 8004d12:	2300      	movs	r3, #0
 8004d14:	e00a      	b.n	8004d2c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004d16:	f107 010c 	add.w	r1, r7, #12
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	2200      	movs	r2, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fd07 	bl	8004734 <find_volume>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3720      	adds	r7, #32
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20002210 	.word	0x20002210

08004d38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b09a      	sub	sp, #104	@ 0x68
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <f_open+0x18>
 8004d4c:	2309      	movs	r3, #9
 8004d4e:	e1b7      	b.n	80050c0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d56:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004d58:	79fa      	ldrb	r2, [r7, #7]
 8004d5a:	f107 0114 	add.w	r1, r7, #20
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff fce6 	bl	8004734 <find_volume>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8004d6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f040 819b 	bne.w	80050ae <f_open+0x376>
		dj.obj.fs = fs;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	f107 0318 	add.w	r3, r7, #24
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fbc5 	bl	8004514 <follow_path>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004d90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d118      	bne.n	8004dca <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004d98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004d9c:	b25b      	sxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	da03      	bge.n	8004daa <f_open+0x72>
				res = FR_INVALID_NAME;
 8004da2:	2306      	movs	r3, #6
 8004da4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004da8:	e00f      	b.n	8004dca <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	bf8c      	ite	hi
 8004db0:	2301      	movhi	r3, #1
 8004db2:	2300      	movls	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	f107 0318 	add.w	r3, r7, #24
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd ff3c 	bl	8002c3c <chk_lock>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	f003 031c 	and.w	r3, r3, #28
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d07f      	beq.n	8004ed4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8004dd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d017      	beq.n	8004e0c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004ddc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d10e      	bne.n	8004e02 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004de4:	f7fd ff86 	bl	8002cf4 <enq_lock>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <f_open+0xc4>
 8004dee:	f107 0318 	add.w	r3, r7, #24
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff f8de 	bl	8003fb4 <dir_register>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	e000      	b.n	8004dfe <f_open+0xc6>
 8004dfc:	2312      	movs	r3, #18
 8004dfe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	f043 0308 	orr.w	r3, r3, #8
 8004e08:	71fb      	strb	r3, [r7, #7]
 8004e0a:	e010      	b.n	8004e2e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004e0c:	7fbb      	ldrb	r3, [r7, #30]
 8004e0e:	f003 0311 	and.w	r3, r3, #17
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <f_open+0xe6>
					res = FR_DENIED;
 8004e16:	2307      	movs	r3, #7
 8004e18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004e1c:	e007      	b.n	8004e2e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <f_open+0xf6>
 8004e28:	2308      	movs	r3, #8
 8004e2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004e2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d168      	bne.n	8004f08 <f_open+0x1d0>
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d063      	beq.n	8004f08 <f_open+0x1d0>
				dw = GET_FATTIME();
 8004e40:	f7fd fd0c 	bl	800285c <get_fattime>
 8004e44:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e48:	330e      	adds	r3, #14
 8004e4a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fd fe4a 	bl	8002ae6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e54:	3316      	adds	r3, #22
 8004e56:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fd fe44 	bl	8002ae6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e60:	330b      	adds	r3, #11
 8004e62:	2220      	movs	r2, #32
 8004e64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe fe1a 	bl	8003aa6 <ld_clust>
 8004e72:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e78:	2200      	movs	r2, #0
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fe32 	bl	8003ae4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	331c      	adds	r3, #28
 8004e84:	2100      	movs	r1, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fd fe2d 	bl	8002ae6 <st_dword>
					fs->wflag = 1;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d037      	beq.n	8004f08 <f_open+0x1d0>
						dw = fs->winsect;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8004e9e:	f107 0318 	add.w	r3, r7, #24
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe fb22 	bl	80034f0 <remove_chain>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8004eb2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d126      	bne.n	8004f08 <f_open+0x1d0>
							res = move_window(fs, dw);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe f86c 	bl	8002f9c <move_window>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ece:	3a01      	subs	r2, #1
 8004ed0:	615a      	str	r2, [r3, #20]
 8004ed2:	e019      	b.n	8004f08 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004ed4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d115      	bne.n	8004f08 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004edc:	7fbb      	ldrb	r3, [r7, #30]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <f_open+0x1b6>
					res = FR_NO_FILE;
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004eec:	e00c      	b.n	8004f08 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <f_open+0x1d0>
 8004ef8:	7fbb      	ldrb	r3, [r7, #30]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <f_open+0x1d0>
						res = FR_DENIED;
 8004f02:	2307      	movs	r3, #7
 8004f04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8004f08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d126      	bne.n	8004f5e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8004f2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	bf8c      	ite	hi
 8004f36:	2301      	movhi	r3, #1
 8004f38:	2300      	movls	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f107 0318 	add.w	r3, r7, #24
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fd fef7 	bl	8002d38 <inc_lock>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <f_open+0x226>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004f5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f040 80a3 	bne.w	80050ae <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fd99 	bl	8003aa6 <ld_clust>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	331c      	adds	r3, #28
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fd fd73 	bl	8002a6a <ld_dword>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	88da      	ldrh	r2, [r3, #6]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	79fa      	ldrb	r2, [r7, #7]
 8004fa2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3330      	adds	r3, #48	@ 0x30
 8004fba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fd fddd 	bl	8002b80 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d06e      	beq.n	80050ae <f_open+0x376>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d06a      	beq.n	80050ae <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	895b      	ldrh	r3, [r3, #10]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	899b      	ldrh	r3, [r3, #12]
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ffc:	e016      	b.n	800502c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005002:	4618      	mov	r0, r3
 8005004:	f7fe f887 	bl	8003116 <get_fat>
 8005008:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800500a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800500c:	2b01      	cmp	r3, #1
 800500e:	d802      	bhi.n	8005016 <f_open+0x2de>
 8005010:	2302      	movs	r3, #2
 8005012:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005016:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d102      	bne.n	8005024 <f_open+0x2ec>
 800501e:	2301      	movs	r3, #1
 8005020:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005024:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800502c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005030:	2b00      	cmp	r3, #0
 8005032:	d103      	bne.n	800503c <f_open+0x304>
 8005034:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005038:	429a      	cmp	r2, r3
 800503a:	d8e0      	bhi.n	8004ffe <f_open+0x2c6>
				}
				fp->clust = clst;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005040:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005042:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005046:	2b00      	cmp	r3, #0
 8005048:	d131      	bne.n	80050ae <f_open+0x376>
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	899b      	ldrh	r3, [r3, #12]
 800504e:	461a      	mov	r2, r3
 8005050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005052:	fbb3 f1f2 	udiv	r1, r3, r2
 8005056:	fb01 f202 	mul.w	r2, r1, r2
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d026      	beq.n	80050ae <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe f837 	bl	80030d8 <clust2sect>
 800506a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800506c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d103      	bne.n	800507a <f_open+0x342>
						res = FR_INT_ERR;
 8005072:	2302      	movs	r3, #2
 8005074:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005078:	e019      	b.n	80050ae <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	899b      	ldrh	r3, [r3, #12]
 800507e:	461a      	mov	r2, r3
 8005080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005082:	fbb3 f2f2 	udiv	r2, r3, r2
 8005086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005088:	441a      	add	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	7858      	ldrb	r0, [r3, #1]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	2301      	movs	r3, #1
 800509e:	f7fd fc6d 	bl	800297c <disk_read>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <f_open+0x376>
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80050ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <f_open+0x384>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80050bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3768      	adds	r7, #104	@ 0x68
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08e      	sub	sp, #56	@ 0x38
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f107 0214 	add.w	r2, r7, #20
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff fda9 	bl	8004c40 <validate>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80050f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <f_read+0x44>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	7d5b      	ldrb	r3, [r3, #21]
 8005100:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005104:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <f_read+0x4a>
 800510c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005110:	e135      	b.n	800537e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	7d1b      	ldrb	r3, [r3, #20]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <f_read+0x5a>
 800511e:	2307      	movs	r3, #7
 8005120:	e12d      	b.n	800537e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	429a      	cmp	r2, r3
 8005134:	f240 811e 	bls.w	8005374 <f_read+0x2ac>
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800513c:	e11a      	b.n	8005374 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	8992      	ldrh	r2, [r2, #12]
 8005146:	fbb3 f1f2 	udiv	r1, r3, r2
 800514a:	fb01 f202 	mul.w	r2, r1, r2
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	f040 80d5 	bne.w	8005300 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	8992      	ldrh	r2, [r2, #12]
 800515e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	8952      	ldrh	r2, [r2, #10]
 8005166:	3a01      	subs	r2, #1
 8005168:	4013      	ands	r3, r2
 800516a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d12f      	bne.n	80051d2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005180:	e013      	b.n	80051aa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	4619      	mov	r1, r3
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7fe faaa 	bl	80036ea <clmt_clust>
 8005196:	6338      	str	r0, [r7, #48]	@ 0x30
 8005198:	e007      	b.n	80051aa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f7fd ffb7 	bl	8003116 <get_fat>
 80051a8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d804      	bhi.n	80051ba <f_read+0xf2>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2202      	movs	r2, #2
 80051b4:	755a      	strb	r2, [r3, #21]
 80051b6:	2302      	movs	r3, #2
 80051b8:	e0e1      	b.n	800537e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d104      	bne.n	80051cc <f_read+0x104>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	755a      	strb	r2, [r3, #21]
 80051c8:	2301      	movs	r3, #1
 80051ca:	e0d8      	b.n	800537e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051d0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f7fd ff7c 	bl	80030d8 <clust2sect>
 80051e0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <f_read+0x12a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2202      	movs	r2, #2
 80051ec:	755a      	strb	r2, [r3, #21]
 80051ee:	2302      	movs	r3, #2
 80051f0:	e0c5      	b.n	800537e <f_read+0x2b6>
			sect += csect;
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	899b      	ldrh	r3, [r3, #12]
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	fbb3 f3f2 	udiv	r3, r3, r2
 8005206:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520a:	2b00      	cmp	r3, #0
 800520c:	d041      	beq.n	8005292 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	4413      	add	r3, r2
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	8952      	ldrh	r2, [r2, #10]
 8005218:	4293      	cmp	r3, r2
 800521a:	d905      	bls.n	8005228 <f_read+0x160>
					cc = fs->csize - csect;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	895b      	ldrh	r3, [r3, #10]
 8005220:	461a      	mov	r2, r3
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	7858      	ldrb	r0, [r3, #1]
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005232:	f7fd fba3 	bl	800297c <disk_read>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <f_read+0x17e>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	755a      	strb	r2, [r3, #21]
 8005242:	2301      	movs	r3, #1
 8005244:	e09b      	b.n	800537e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	7d1b      	ldrb	r3, [r3, #20]
 800524a:	b25b      	sxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	da18      	bge.n	8005282 <f_read+0x1ba>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800525a:	429a      	cmp	r2, r3
 800525c:	d911      	bls.n	8005282 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	8992      	ldrh	r2, [r2, #12]
 800526a:	fb02 f303 	mul.w	r3, r2, r3
 800526e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005270:	18d0      	adds	r0, r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	899b      	ldrh	r3, [r3, #12]
 800527c:	461a      	mov	r2, r3
 800527e:	f7fd fc5e 	bl	8002b3e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	899b      	ldrh	r3, [r3, #12]
 8005286:	461a      	mov	r2, r3
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	fb02 f303 	mul.w	r3, r2, r3
 800528e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005290:	e05c      	b.n	800534c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	429a      	cmp	r2, r3
 800529a:	d02e      	beq.n	80052fa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	7d1b      	ldrb	r3, [r3, #20]
 80052a0:	b25b      	sxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da18      	bge.n	80052d8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	7858      	ldrb	r0, [r3, #1]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	2301      	movs	r3, #1
 80052b6:	f7fd fb81 	bl	80029bc <disk_write>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <f_read+0x202>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	755a      	strb	r2, [r3, #21]
 80052c6:	2301      	movs	r3, #1
 80052c8:	e059      	b.n	800537e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	7d1b      	ldrb	r3, [r3, #20]
 80052ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	7858      	ldrb	r0, [r3, #1]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80052e2:	2301      	movs	r3, #1
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	f7fd fb49 	bl	800297c <disk_read>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <f_read+0x232>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	755a      	strb	r2, [r3, #21]
 80052f6:	2301      	movs	r3, #1
 80052f8:	e041      	b.n	800537e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	899b      	ldrh	r3, [r3, #12]
 8005304:	4618      	mov	r0, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	8992      	ldrh	r2, [r2, #12]
 800530e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005312:	fb01 f202 	mul.w	r2, r1, r2
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	1ac3      	subs	r3, r0, r3
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800531c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d901      	bls.n	8005328 <f_read+0x260>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	8992      	ldrh	r2, [r2, #12]
 8005336:	fbb3 f0f2 	udiv	r0, r3, r2
 800533a:	fb00 f202 	mul.w	r2, r0, r2
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	440b      	add	r3, r1
 8005342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005344:	4619      	mov	r1, r3
 8005346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005348:	f7fd fbf9 	bl	8002b3e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800534c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800534e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005350:	4413      	add	r3, r2
 8005352:	627b      	str	r3, [r7, #36]	@ 0x24
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	699a      	ldr	r2, [r3, #24]
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535a:	441a      	add	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	619a      	str	r2, [r3, #24]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005366:	441a      	add	r2, r3
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f47f aee1 	bne.w	800513e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3738      	adds	r7, #56	@ 0x38
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f107 0208 	add.w	r2, r7, #8
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fc52 	bl	8004c40 <validate>
 800539c:	4603      	mov	r3, r0
 800539e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d168      	bne.n	8005478 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7d1b      	ldrb	r3, [r3, #20]
 80053aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d062      	beq.n	8005478 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7d1b      	ldrb	r3, [r3, #20]
 80053b6:	b25b      	sxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da15      	bge.n	80053e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	7858      	ldrb	r0, [r3, #1]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1a      	ldr	r2, [r3, #32]
 80053ca:	2301      	movs	r3, #1
 80053cc:	f7fd faf6 	bl	80029bc <disk_write>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <f_sync+0x54>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e04f      	b.n	800547a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7d1b      	ldrb	r3, [r3, #20]
 80053de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80053e8:	f7fd fa38 	bl	800285c <get_fattime>
 80053ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f7fd fdd0 	bl	8002f9c <move_window>
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d138      	bne.n	8005478 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	330b      	adds	r3, #11
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	330b      	adds	r3, #11
 8005416:	f042 0220 	orr.w	r2, r2, #32
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	461a      	mov	r2, r3
 8005428:	68f9      	ldr	r1, [r7, #12]
 800542a:	f7fe fb5b 	bl	8003ae4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f103 021c 	add.w	r2, r3, #28
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f7fd fb53 	bl	8002ae6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3316      	adds	r3, #22
 8005444:	6939      	ldr	r1, [r7, #16]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd fb4d 	bl	8002ae6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3312      	adds	r3, #18
 8005450:	2100      	movs	r1, #0
 8005452:	4618      	mov	r0, r3
 8005454:	f7fd fb2c 	bl	8002ab0 <st_word>
					fs->wflag = 1;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2201      	movs	r2, #1
 800545c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4618      	mov	r0, r3
 8005462:	f7fd fdc9 	bl	8002ff8 <sync_fs>
 8005466:	4603      	mov	r3, r0
 8005468:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7d1b      	ldrb	r3, [r3, #20]
 800546e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005472:	b2da      	uxtb	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005478:	7dfb      	ldrb	r3, [r7, #23]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ff7b 	bl	8005386 <f_sync>
 8005490:	4603      	mov	r3, r0
 8005492:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d118      	bne.n	80054cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f107 0208 	add.w	r2, r7, #8
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fbcc 	bl	8004c40 <validate>
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10c      	bne.n	80054cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fd fccc 	bl	8002e54 <dec_lock>
 80054bc:	4603      	mov	r3, r0
 80054be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b088      	sub	sp, #32
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
	int n = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80054ea:	e01c      	b.n	8005526 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80054ec:	f107 0310 	add.w	r3, r7, #16
 80054f0:	f107 0114 	add.w	r1, r7, #20
 80054f4:	2201      	movs	r2, #1
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff fde6 	bl	80050c8 <f_read>
		if (rc != 1) break;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d117      	bne.n	8005532 <f_gets+0x5c>
		c = s[0];
 8005502:	7d3b      	ldrb	r3, [r7, #20]
 8005504:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	2b0d      	cmp	r3, #13
 800550a:	d00b      	beq.n	8005524 <f_gets+0x4e>
		*p++ = c;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	61ba      	str	r2, [r7, #24]
 8005512:	7dfa      	ldrb	r2, [r7, #23]
 8005514:	701a      	strb	r2, [r3, #0]
		n++;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	3301      	adds	r3, #1
 800551a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800551c:	7dfb      	ldrb	r3, [r7, #23]
 800551e:	2b0a      	cmp	r3, #10
 8005520:	d009      	beq.n	8005536 <f_gets+0x60>
 8005522:	e000      	b.n	8005526 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005524:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	3b01      	subs	r3, #1
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	429a      	cmp	r2, r3
 800552e:	dbdd      	blt.n	80054ec <f_gets+0x16>
 8005530:	e002      	b.n	8005538 <f_gets+0x62>
		if (rc != 1) break;
 8005532:	bf00      	nop
 8005534:	e000      	b.n	8005538 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8005536:	bf00      	nop
	}
	*p = 0;
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	2200      	movs	r2, #0
 800553c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <f_gets+0x72>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	e000      	b.n	800554a <f_gets+0x74>
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800556a:	4b1f      	ldr	r3, [pc, #124]	@ (80055e8 <FATFS_LinkDriverEx+0x94>)
 800556c:	7a5b      	ldrb	r3, [r3, #9]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d131      	bne.n	80055d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005574:	4b1c      	ldr	r3, [pc, #112]	@ (80055e8 <FATFS_LinkDriverEx+0x94>)
 8005576:	7a5b      	ldrb	r3, [r3, #9]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	4b1a      	ldr	r3, [pc, #104]	@ (80055e8 <FATFS_LinkDriverEx+0x94>)
 800557e:	2100      	movs	r1, #0
 8005580:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005582:	4b19      	ldr	r3, [pc, #100]	@ (80055e8 <FATFS_LinkDriverEx+0x94>)
 8005584:	7a5b      	ldrb	r3, [r3, #9]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	4a17      	ldr	r2, [pc, #92]	@ (80055e8 <FATFS_LinkDriverEx+0x94>)
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005592:	4b15      	ldr	r3, [pc, #84]	@ (80055e8 <FATFS_LinkDriverEx+0x94>)
 8005594:	7a5b      	ldrb	r3, [r3, #9]
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	4b13      	ldr	r3, [pc, #76]	@ (80055e8 <FATFS_LinkDriverEx+0x94>)
 800559c:	4413      	add	r3, r2
 800559e:	79fa      	ldrb	r2, [r7, #7]
 80055a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80055a2:	4b11      	ldr	r3, [pc, #68]	@ (80055e8 <FATFS_LinkDriverEx+0x94>)
 80055a4:	7a5b      	ldrb	r3, [r3, #9]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	b2d1      	uxtb	r1, r2
 80055ac:	4a0e      	ldr	r2, [pc, #56]	@ (80055e8 <FATFS_LinkDriverEx+0x94>)
 80055ae:	7251      	strb	r1, [r2, #9]
 80055b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80055b2:	7dbb      	ldrb	r3, [r7, #22]
 80055b4:	3330      	adds	r3, #48	@ 0x30
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	3301      	adds	r3, #1
 80055c0:	223a      	movs	r2, #58	@ 0x3a
 80055c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	3302      	adds	r3, #2
 80055c8:	222f      	movs	r2, #47	@ 0x2f
 80055ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	3303      	adds	r3, #3
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20002438 	.word	0x20002438

080055ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80055f6:	2200      	movs	r2, #0
 80055f8:	6839      	ldr	r1, [r7, #0]
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff ffaa 	bl	8005554 <FATFS_LinkDriverEx>
 8005600:	4603      	mov	r3, r0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	6039      	str	r1, [r7, #0]
 8005616:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005618:	88fb      	ldrh	r3, [r7, #6]
 800561a:	2b7f      	cmp	r3, #127	@ 0x7f
 800561c:	d802      	bhi.n	8005624 <ff_convert+0x18>
		c = chr;
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	81fb      	strh	r3, [r7, #14]
 8005622:	e025      	b.n	8005670 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2bff      	cmp	r3, #255	@ 0xff
 800562e:	d805      	bhi.n	800563c <ff_convert+0x30>
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	3b80      	subs	r3, #128	@ 0x80
 8005634:	4a12      	ldr	r2, [pc, #72]	@ (8005680 <ff_convert+0x74>)
 8005636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800563a:	e000      	b.n	800563e <ff_convert+0x32>
 800563c:	2300      	movs	r3, #0
 800563e:	81fb      	strh	r3, [r7, #14]
 8005640:	e016      	b.n	8005670 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005642:	2300      	movs	r3, #0
 8005644:	81fb      	strh	r3, [r7, #14]
 8005646:	e009      	b.n	800565c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005648:	89fb      	ldrh	r3, [r7, #14]
 800564a:	4a0d      	ldr	r2, [pc, #52]	@ (8005680 <ff_convert+0x74>)
 800564c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005650:	88fa      	ldrh	r2, [r7, #6]
 8005652:	429a      	cmp	r2, r3
 8005654:	d006      	beq.n	8005664 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005656:	89fb      	ldrh	r3, [r7, #14]
 8005658:	3301      	adds	r3, #1
 800565a:	81fb      	strh	r3, [r7, #14]
 800565c:	89fb      	ldrh	r3, [r7, #14]
 800565e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005660:	d9f2      	bls.n	8005648 <ff_convert+0x3c>
 8005662:	e000      	b.n	8005666 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005664:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005666:	89fb      	ldrh	r3, [r7, #14]
 8005668:	3380      	adds	r3, #128	@ 0x80
 800566a:	b29b      	uxth	r3, r3
 800566c:	b2db      	uxtb	r3, r3
 800566e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005670:	89fb      	ldrh	r3, [r7, #14]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	080062dc 	.word	0x080062dc

08005684 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005694:	d201      	bcs.n	800569a <ff_wtoupper+0x16>
 8005696:	4b3e      	ldr	r3, [pc, #248]	@ (8005790 <ff_wtoupper+0x10c>)
 8005698:	e000      	b.n	800569c <ff_wtoupper+0x18>
 800569a:	4b3e      	ldr	r3, [pc, #248]	@ (8005794 <ff_wtoupper+0x110>)
 800569c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	1c9a      	adds	r2, r3, #2
 80056a2:	617a      	str	r2, [r7, #20]
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80056a8:	8a7b      	ldrh	r3, [r7, #18]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d068      	beq.n	8005780 <ff_wtoupper+0xfc>
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	8a7b      	ldrh	r3, [r7, #18]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d364      	bcc.n	8005780 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	1c9a      	adds	r2, r3, #2
 80056ba:	617a      	str	r2, [r7, #20]
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	823b      	strh	r3, [r7, #16]
 80056c0:	8a3b      	ldrh	r3, [r7, #16]
 80056c2:	0a1b      	lsrs	r3, r3, #8
 80056c4:	81fb      	strh	r3, [r7, #14]
 80056c6:	8a3b      	ldrh	r3, [r7, #16]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80056cc:	88fa      	ldrh	r2, [r7, #6]
 80056ce:	8a79      	ldrh	r1, [r7, #18]
 80056d0:	8a3b      	ldrh	r3, [r7, #16]
 80056d2:	440b      	add	r3, r1
 80056d4:	429a      	cmp	r2, r3
 80056d6:	da49      	bge.n	800576c <ff_wtoupper+0xe8>
			switch (cmd) {
 80056d8:	89fb      	ldrh	r3, [r7, #14]
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d84f      	bhi.n	800577e <ff_wtoupper+0xfa>
 80056de:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <ff_wtoupper+0x60>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005709 	.word	0x08005709
 80056e8:	0800571b 	.word	0x0800571b
 80056ec:	08005731 	.word	0x08005731
 80056f0:	08005739 	.word	0x08005739
 80056f4:	08005741 	.word	0x08005741
 80056f8:	08005749 	.word	0x08005749
 80056fc:	08005751 	.word	0x08005751
 8005700:	08005759 	.word	0x08005759
 8005704:	08005761 	.word	0x08005761
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005708:	88fa      	ldrh	r2, [r7, #6]
 800570a:	8a7b      	ldrh	r3, [r7, #18]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	80fb      	strh	r3, [r7, #6]
 8005718:	e027      	b.n	800576a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	8a7b      	ldrh	r3, [r7, #18]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	b29b      	uxth	r3, r3
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	b29b      	uxth	r3, r3
 8005728:	88fa      	ldrh	r2, [r7, #6]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	80fb      	strh	r3, [r7, #6]
 800572e:	e01c      	b.n	800576a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	3b10      	subs	r3, #16
 8005734:	80fb      	strh	r3, [r7, #6]
 8005736:	e018      	b.n	800576a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	3b20      	subs	r3, #32
 800573c:	80fb      	strh	r3, [r7, #6]
 800573e:	e014      	b.n	800576a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	3b30      	subs	r3, #48	@ 0x30
 8005744:	80fb      	strh	r3, [r7, #6]
 8005746:	e010      	b.n	800576a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	3b1a      	subs	r3, #26
 800574c:	80fb      	strh	r3, [r7, #6]
 800574e:	e00c      	b.n	800576a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005750:	88fb      	ldrh	r3, [r7, #6]
 8005752:	3308      	adds	r3, #8
 8005754:	80fb      	strh	r3, [r7, #6]
 8005756:	e008      	b.n	800576a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	3b50      	subs	r3, #80	@ 0x50
 800575c:	80fb      	strh	r3, [r7, #6]
 800575e:	e004      	b.n	800576a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8005766:	80fb      	strh	r3, [r7, #6]
 8005768:	bf00      	nop
			}
			break;
 800576a:	e008      	b.n	800577e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800576c:	89fb      	ldrh	r3, [r7, #14]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d195      	bne.n	800569e <ff_wtoupper+0x1a>
 8005772:	8a3b      	ldrh	r3, [r7, #16]
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4413      	add	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800577c:	e78f      	b.n	800569e <ff_wtoupper+0x1a>
			break;
 800577e:	bf00      	nop
	}

	return chr;
 8005780:	88fb      	ldrh	r3, [r7, #6]
}
 8005782:	4618      	mov	r0, r3
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	080063dc 	.word	0x080063dc
 8005794:	080065d0 	.word	0x080065d0

08005798 <siprintf>:
 8005798:	b40e      	push	{r1, r2, r3}
 800579a:	b510      	push	{r4, lr}
 800579c:	b09d      	sub	sp, #116	@ 0x74
 800579e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80057a0:	9002      	str	r0, [sp, #8]
 80057a2:	9006      	str	r0, [sp, #24]
 80057a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057a8:	480a      	ldr	r0, [pc, #40]	@ (80057d4 <siprintf+0x3c>)
 80057aa:	9107      	str	r1, [sp, #28]
 80057ac:	9104      	str	r1, [sp, #16]
 80057ae:	490a      	ldr	r1, [pc, #40]	@ (80057d8 <siprintf+0x40>)
 80057b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b4:	9105      	str	r1, [sp, #20]
 80057b6:	2400      	movs	r4, #0
 80057b8:	a902      	add	r1, sp, #8
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80057c0:	f000 f994 	bl	8005aec <_svfiprintf_r>
 80057c4:	9b02      	ldr	r3, [sp, #8]
 80057c6:	701c      	strb	r4, [r3, #0]
 80057c8:	b01d      	add	sp, #116	@ 0x74
 80057ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ce:	b003      	add	sp, #12
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20000020 	.word	0x20000020
 80057d8:	ffff0208 	.word	0xffff0208

080057dc <memset>:
 80057dc:	4402      	add	r2, r0
 80057de:	4603      	mov	r3, r0
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d100      	bne.n	80057e6 <memset+0xa>
 80057e4:	4770      	bx	lr
 80057e6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ea:	e7f9      	b.n	80057e0 <memset+0x4>

080057ec <__errno>:
 80057ec:	4b01      	ldr	r3, [pc, #4]	@ (80057f4 <__errno+0x8>)
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000020 	.word	0x20000020

080057f8 <__libc_init_array>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005830 <__libc_init_array+0x38>)
 80057fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005834 <__libc_init_array+0x3c>)
 80057fe:	1b64      	subs	r4, r4, r5
 8005800:	10a4      	asrs	r4, r4, #2
 8005802:	2600      	movs	r6, #0
 8005804:	42a6      	cmp	r6, r4
 8005806:	d109      	bne.n	800581c <__libc_init_array+0x24>
 8005808:	4d0b      	ldr	r5, [pc, #44]	@ (8005838 <__libc_init_array+0x40>)
 800580a:	4c0c      	ldr	r4, [pc, #48]	@ (800583c <__libc_init_array+0x44>)
 800580c:	f000 fc64 	bl	80060d8 <_init>
 8005810:	1b64      	subs	r4, r4, r5
 8005812:	10a4      	asrs	r4, r4, #2
 8005814:	2600      	movs	r6, #0
 8005816:	42a6      	cmp	r6, r4
 8005818:	d105      	bne.n	8005826 <__libc_init_array+0x2e>
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005820:	4798      	blx	r3
 8005822:	3601      	adds	r6, #1
 8005824:	e7ee      	b.n	8005804 <__libc_init_array+0xc>
 8005826:	f855 3b04 	ldr.w	r3, [r5], #4
 800582a:	4798      	blx	r3
 800582c:	3601      	adds	r6, #1
 800582e:	e7f2      	b.n	8005816 <__libc_init_array+0x1e>
 8005830:	080066c8 	.word	0x080066c8
 8005834:	080066c8 	.word	0x080066c8
 8005838:	080066c8 	.word	0x080066c8
 800583c:	080066cc 	.word	0x080066cc

08005840 <__retarget_lock_acquire_recursive>:
 8005840:	4770      	bx	lr

08005842 <__retarget_lock_release_recursive>:
 8005842:	4770      	bx	lr

08005844 <_free_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4605      	mov	r5, r0
 8005848:	2900      	cmp	r1, #0
 800584a:	d041      	beq.n	80058d0 <_free_r+0x8c>
 800584c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005850:	1f0c      	subs	r4, r1, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	bfb8      	it	lt
 8005856:	18e4      	addlt	r4, r4, r3
 8005858:	f000 f8e0 	bl	8005a1c <__malloc_lock>
 800585c:	4a1d      	ldr	r2, [pc, #116]	@ (80058d4 <_free_r+0x90>)
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	b933      	cbnz	r3, 8005870 <_free_r+0x2c>
 8005862:	6063      	str	r3, [r4, #4]
 8005864:	6014      	str	r4, [r2, #0]
 8005866:	4628      	mov	r0, r5
 8005868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800586c:	f000 b8dc 	b.w	8005a28 <__malloc_unlock>
 8005870:	42a3      	cmp	r3, r4
 8005872:	d908      	bls.n	8005886 <_free_r+0x42>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	1821      	adds	r1, r4, r0
 8005878:	428b      	cmp	r3, r1
 800587a:	bf01      	itttt	eq
 800587c:	6819      	ldreq	r1, [r3, #0]
 800587e:	685b      	ldreq	r3, [r3, #4]
 8005880:	1809      	addeq	r1, r1, r0
 8005882:	6021      	streq	r1, [r4, #0]
 8005884:	e7ed      	b.n	8005862 <_free_r+0x1e>
 8005886:	461a      	mov	r2, r3
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	b10b      	cbz	r3, 8005890 <_free_r+0x4c>
 800588c:	42a3      	cmp	r3, r4
 800588e:	d9fa      	bls.n	8005886 <_free_r+0x42>
 8005890:	6811      	ldr	r1, [r2, #0]
 8005892:	1850      	adds	r0, r2, r1
 8005894:	42a0      	cmp	r0, r4
 8005896:	d10b      	bne.n	80058b0 <_free_r+0x6c>
 8005898:	6820      	ldr	r0, [r4, #0]
 800589a:	4401      	add	r1, r0
 800589c:	1850      	adds	r0, r2, r1
 800589e:	4283      	cmp	r3, r0
 80058a0:	6011      	str	r1, [r2, #0]
 80058a2:	d1e0      	bne.n	8005866 <_free_r+0x22>
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	6053      	str	r3, [r2, #4]
 80058aa:	4408      	add	r0, r1
 80058ac:	6010      	str	r0, [r2, #0]
 80058ae:	e7da      	b.n	8005866 <_free_r+0x22>
 80058b0:	d902      	bls.n	80058b8 <_free_r+0x74>
 80058b2:	230c      	movs	r3, #12
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	e7d6      	b.n	8005866 <_free_r+0x22>
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	1821      	adds	r1, r4, r0
 80058bc:	428b      	cmp	r3, r1
 80058be:	bf04      	itt	eq
 80058c0:	6819      	ldreq	r1, [r3, #0]
 80058c2:	685b      	ldreq	r3, [r3, #4]
 80058c4:	6063      	str	r3, [r4, #4]
 80058c6:	bf04      	itt	eq
 80058c8:	1809      	addeq	r1, r1, r0
 80058ca:	6021      	streq	r1, [r4, #0]
 80058cc:	6054      	str	r4, [r2, #4]
 80058ce:	e7ca      	b.n	8005866 <_free_r+0x22>
 80058d0:	bd38      	pop	{r3, r4, r5, pc}
 80058d2:	bf00      	nop
 80058d4:	20002588 	.word	0x20002588

080058d8 <sbrk_aligned>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	4e0f      	ldr	r6, [pc, #60]	@ (8005918 <sbrk_aligned+0x40>)
 80058dc:	460c      	mov	r4, r1
 80058de:	6831      	ldr	r1, [r6, #0]
 80058e0:	4605      	mov	r5, r0
 80058e2:	b911      	cbnz	r1, 80058ea <sbrk_aligned+0x12>
 80058e4:	f000 fba4 	bl	8006030 <_sbrk_r>
 80058e8:	6030      	str	r0, [r6, #0]
 80058ea:	4621      	mov	r1, r4
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 fb9f 	bl	8006030 <_sbrk_r>
 80058f2:	1c43      	adds	r3, r0, #1
 80058f4:	d103      	bne.n	80058fe <sbrk_aligned+0x26>
 80058f6:	f04f 34ff 	mov.w	r4, #4294967295
 80058fa:	4620      	mov	r0, r4
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	1cc4      	adds	r4, r0, #3
 8005900:	f024 0403 	bic.w	r4, r4, #3
 8005904:	42a0      	cmp	r0, r4
 8005906:	d0f8      	beq.n	80058fa <sbrk_aligned+0x22>
 8005908:	1a21      	subs	r1, r4, r0
 800590a:	4628      	mov	r0, r5
 800590c:	f000 fb90 	bl	8006030 <_sbrk_r>
 8005910:	3001      	adds	r0, #1
 8005912:	d1f2      	bne.n	80058fa <sbrk_aligned+0x22>
 8005914:	e7ef      	b.n	80058f6 <sbrk_aligned+0x1e>
 8005916:	bf00      	nop
 8005918:	20002584 	.word	0x20002584

0800591c <_malloc_r>:
 800591c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005920:	1ccd      	adds	r5, r1, #3
 8005922:	f025 0503 	bic.w	r5, r5, #3
 8005926:	3508      	adds	r5, #8
 8005928:	2d0c      	cmp	r5, #12
 800592a:	bf38      	it	cc
 800592c:	250c      	movcc	r5, #12
 800592e:	2d00      	cmp	r5, #0
 8005930:	4606      	mov	r6, r0
 8005932:	db01      	blt.n	8005938 <_malloc_r+0x1c>
 8005934:	42a9      	cmp	r1, r5
 8005936:	d904      	bls.n	8005942 <_malloc_r+0x26>
 8005938:	230c      	movs	r3, #12
 800593a:	6033      	str	r3, [r6, #0]
 800593c:	2000      	movs	r0, #0
 800593e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a18 <_malloc_r+0xfc>
 8005946:	f000 f869 	bl	8005a1c <__malloc_lock>
 800594a:	f8d8 3000 	ldr.w	r3, [r8]
 800594e:	461c      	mov	r4, r3
 8005950:	bb44      	cbnz	r4, 80059a4 <_malloc_r+0x88>
 8005952:	4629      	mov	r1, r5
 8005954:	4630      	mov	r0, r6
 8005956:	f7ff ffbf 	bl	80058d8 <sbrk_aligned>
 800595a:	1c43      	adds	r3, r0, #1
 800595c:	4604      	mov	r4, r0
 800595e:	d158      	bne.n	8005a12 <_malloc_r+0xf6>
 8005960:	f8d8 4000 	ldr.w	r4, [r8]
 8005964:	4627      	mov	r7, r4
 8005966:	2f00      	cmp	r7, #0
 8005968:	d143      	bne.n	80059f2 <_malloc_r+0xd6>
 800596a:	2c00      	cmp	r4, #0
 800596c:	d04b      	beq.n	8005a06 <_malloc_r+0xea>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	4639      	mov	r1, r7
 8005972:	4630      	mov	r0, r6
 8005974:	eb04 0903 	add.w	r9, r4, r3
 8005978:	f000 fb5a 	bl	8006030 <_sbrk_r>
 800597c:	4581      	cmp	r9, r0
 800597e:	d142      	bne.n	8005a06 <_malloc_r+0xea>
 8005980:	6821      	ldr	r1, [r4, #0]
 8005982:	1a6d      	subs	r5, r5, r1
 8005984:	4629      	mov	r1, r5
 8005986:	4630      	mov	r0, r6
 8005988:	f7ff ffa6 	bl	80058d8 <sbrk_aligned>
 800598c:	3001      	adds	r0, #1
 800598e:	d03a      	beq.n	8005a06 <_malloc_r+0xea>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	442b      	add	r3, r5
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	f8d8 3000 	ldr.w	r3, [r8]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	bb62      	cbnz	r2, 80059f8 <_malloc_r+0xdc>
 800599e:	f8c8 7000 	str.w	r7, [r8]
 80059a2:	e00f      	b.n	80059c4 <_malloc_r+0xa8>
 80059a4:	6822      	ldr	r2, [r4, #0]
 80059a6:	1b52      	subs	r2, r2, r5
 80059a8:	d420      	bmi.n	80059ec <_malloc_r+0xd0>
 80059aa:	2a0b      	cmp	r2, #11
 80059ac:	d917      	bls.n	80059de <_malloc_r+0xc2>
 80059ae:	1961      	adds	r1, r4, r5
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	6025      	str	r5, [r4, #0]
 80059b4:	bf18      	it	ne
 80059b6:	6059      	strne	r1, [r3, #4]
 80059b8:	6863      	ldr	r3, [r4, #4]
 80059ba:	bf08      	it	eq
 80059bc:	f8c8 1000 	streq.w	r1, [r8]
 80059c0:	5162      	str	r2, [r4, r5]
 80059c2:	604b      	str	r3, [r1, #4]
 80059c4:	4630      	mov	r0, r6
 80059c6:	f000 f82f 	bl	8005a28 <__malloc_unlock>
 80059ca:	f104 000b 	add.w	r0, r4, #11
 80059ce:	1d23      	adds	r3, r4, #4
 80059d0:	f020 0007 	bic.w	r0, r0, #7
 80059d4:	1ac2      	subs	r2, r0, r3
 80059d6:	bf1c      	itt	ne
 80059d8:	1a1b      	subne	r3, r3, r0
 80059da:	50a3      	strne	r3, [r4, r2]
 80059dc:	e7af      	b.n	800593e <_malloc_r+0x22>
 80059de:	6862      	ldr	r2, [r4, #4]
 80059e0:	42a3      	cmp	r3, r4
 80059e2:	bf0c      	ite	eq
 80059e4:	f8c8 2000 	streq.w	r2, [r8]
 80059e8:	605a      	strne	r2, [r3, #4]
 80059ea:	e7eb      	b.n	80059c4 <_malloc_r+0xa8>
 80059ec:	4623      	mov	r3, r4
 80059ee:	6864      	ldr	r4, [r4, #4]
 80059f0:	e7ae      	b.n	8005950 <_malloc_r+0x34>
 80059f2:	463c      	mov	r4, r7
 80059f4:	687f      	ldr	r7, [r7, #4]
 80059f6:	e7b6      	b.n	8005966 <_malloc_r+0x4a>
 80059f8:	461a      	mov	r2, r3
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	d1fb      	bne.n	80059f8 <_malloc_r+0xdc>
 8005a00:	2300      	movs	r3, #0
 8005a02:	6053      	str	r3, [r2, #4]
 8005a04:	e7de      	b.n	80059c4 <_malloc_r+0xa8>
 8005a06:	230c      	movs	r3, #12
 8005a08:	6033      	str	r3, [r6, #0]
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f000 f80c 	bl	8005a28 <__malloc_unlock>
 8005a10:	e794      	b.n	800593c <_malloc_r+0x20>
 8005a12:	6005      	str	r5, [r0, #0]
 8005a14:	e7d6      	b.n	80059c4 <_malloc_r+0xa8>
 8005a16:	bf00      	nop
 8005a18:	20002588 	.word	0x20002588

08005a1c <__malloc_lock>:
 8005a1c:	4801      	ldr	r0, [pc, #4]	@ (8005a24 <__malloc_lock+0x8>)
 8005a1e:	f7ff bf0f 	b.w	8005840 <__retarget_lock_acquire_recursive>
 8005a22:	bf00      	nop
 8005a24:	20002580 	.word	0x20002580

08005a28 <__malloc_unlock>:
 8005a28:	4801      	ldr	r0, [pc, #4]	@ (8005a30 <__malloc_unlock+0x8>)
 8005a2a:	f7ff bf0a 	b.w	8005842 <__retarget_lock_release_recursive>
 8005a2e:	bf00      	nop
 8005a30:	20002580 	.word	0x20002580

08005a34 <__ssputs_r>:
 8005a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	688e      	ldr	r6, [r1, #8]
 8005a3a:	461f      	mov	r7, r3
 8005a3c:	42be      	cmp	r6, r7
 8005a3e:	680b      	ldr	r3, [r1, #0]
 8005a40:	4682      	mov	sl, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	4690      	mov	r8, r2
 8005a46:	d82d      	bhi.n	8005aa4 <__ssputs_r+0x70>
 8005a48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a50:	d026      	beq.n	8005aa0 <__ssputs_r+0x6c>
 8005a52:	6965      	ldr	r5, [r4, #20]
 8005a54:	6909      	ldr	r1, [r1, #16]
 8005a56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a5a:	eba3 0901 	sub.w	r9, r3, r1
 8005a5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a62:	1c7b      	adds	r3, r7, #1
 8005a64:	444b      	add	r3, r9
 8005a66:	106d      	asrs	r5, r5, #1
 8005a68:	429d      	cmp	r5, r3
 8005a6a:	bf38      	it	cc
 8005a6c:	461d      	movcc	r5, r3
 8005a6e:	0553      	lsls	r3, r2, #21
 8005a70:	d527      	bpl.n	8005ac2 <__ssputs_r+0x8e>
 8005a72:	4629      	mov	r1, r5
 8005a74:	f7ff ff52 	bl	800591c <_malloc_r>
 8005a78:	4606      	mov	r6, r0
 8005a7a:	b360      	cbz	r0, 8005ad6 <__ssputs_r+0xa2>
 8005a7c:	6921      	ldr	r1, [r4, #16]
 8005a7e:	464a      	mov	r2, r9
 8005a80:	f000 fae6 	bl	8006050 <memcpy>
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a8e:	81a3      	strh	r3, [r4, #12]
 8005a90:	6126      	str	r6, [r4, #16]
 8005a92:	6165      	str	r5, [r4, #20]
 8005a94:	444e      	add	r6, r9
 8005a96:	eba5 0509 	sub.w	r5, r5, r9
 8005a9a:	6026      	str	r6, [r4, #0]
 8005a9c:	60a5      	str	r5, [r4, #8]
 8005a9e:	463e      	mov	r6, r7
 8005aa0:	42be      	cmp	r6, r7
 8005aa2:	d900      	bls.n	8005aa6 <__ssputs_r+0x72>
 8005aa4:	463e      	mov	r6, r7
 8005aa6:	6820      	ldr	r0, [r4, #0]
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	4641      	mov	r1, r8
 8005aac:	f000 faa6 	bl	8005ffc <memmove>
 8005ab0:	68a3      	ldr	r3, [r4, #8]
 8005ab2:	1b9b      	subs	r3, r3, r6
 8005ab4:	60a3      	str	r3, [r4, #8]
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	4433      	add	r3, r6
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	2000      	movs	r0, #0
 8005abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac2:	462a      	mov	r2, r5
 8005ac4:	f000 fad2 	bl	800606c <_realloc_r>
 8005ac8:	4606      	mov	r6, r0
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d1e0      	bne.n	8005a90 <__ssputs_r+0x5c>
 8005ace:	6921      	ldr	r1, [r4, #16]
 8005ad0:	4650      	mov	r0, sl
 8005ad2:	f7ff feb7 	bl	8005844 <_free_r>
 8005ad6:	230c      	movs	r3, #12
 8005ad8:	f8ca 3000 	str.w	r3, [sl]
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae8:	e7e9      	b.n	8005abe <__ssputs_r+0x8a>
	...

08005aec <_svfiprintf_r>:
 8005aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af0:	4698      	mov	r8, r3
 8005af2:	898b      	ldrh	r3, [r1, #12]
 8005af4:	061b      	lsls	r3, r3, #24
 8005af6:	b09d      	sub	sp, #116	@ 0x74
 8005af8:	4607      	mov	r7, r0
 8005afa:	460d      	mov	r5, r1
 8005afc:	4614      	mov	r4, r2
 8005afe:	d510      	bpl.n	8005b22 <_svfiprintf_r+0x36>
 8005b00:	690b      	ldr	r3, [r1, #16]
 8005b02:	b973      	cbnz	r3, 8005b22 <_svfiprintf_r+0x36>
 8005b04:	2140      	movs	r1, #64	@ 0x40
 8005b06:	f7ff ff09 	bl	800591c <_malloc_r>
 8005b0a:	6028      	str	r0, [r5, #0]
 8005b0c:	6128      	str	r0, [r5, #16]
 8005b0e:	b930      	cbnz	r0, 8005b1e <_svfiprintf_r+0x32>
 8005b10:	230c      	movs	r3, #12
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	b01d      	add	sp, #116	@ 0x74
 8005b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1e:	2340      	movs	r3, #64	@ 0x40
 8005b20:	616b      	str	r3, [r5, #20]
 8005b22:	2300      	movs	r3, #0
 8005b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b26:	2320      	movs	r3, #32
 8005b28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b30:	2330      	movs	r3, #48	@ 0x30
 8005b32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005cd0 <_svfiprintf_r+0x1e4>
 8005b36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b3a:	f04f 0901 	mov.w	r9, #1
 8005b3e:	4623      	mov	r3, r4
 8005b40:	469a      	mov	sl, r3
 8005b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b46:	b10a      	cbz	r2, 8005b4c <_svfiprintf_r+0x60>
 8005b48:	2a25      	cmp	r2, #37	@ 0x25
 8005b4a:	d1f9      	bne.n	8005b40 <_svfiprintf_r+0x54>
 8005b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b50:	d00b      	beq.n	8005b6a <_svfiprintf_r+0x7e>
 8005b52:	465b      	mov	r3, fp
 8005b54:	4622      	mov	r2, r4
 8005b56:	4629      	mov	r1, r5
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f7ff ff6b 	bl	8005a34 <__ssputs_r>
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f000 80a7 	beq.w	8005cb2 <_svfiprintf_r+0x1c6>
 8005b64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b66:	445a      	add	r2, fp
 8005b68:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 809f 	beq.w	8005cb2 <_svfiprintf_r+0x1c6>
 8005b74:	2300      	movs	r3, #0
 8005b76:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b7e:	f10a 0a01 	add.w	sl, sl, #1
 8005b82:	9304      	str	r3, [sp, #16]
 8005b84:	9307      	str	r3, [sp, #28]
 8005b86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b8c:	4654      	mov	r4, sl
 8005b8e:	2205      	movs	r2, #5
 8005b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b94:	484e      	ldr	r0, [pc, #312]	@ (8005cd0 <_svfiprintf_r+0x1e4>)
 8005b96:	f7fa fb43 	bl	8000220 <memchr>
 8005b9a:	9a04      	ldr	r2, [sp, #16]
 8005b9c:	b9d8      	cbnz	r0, 8005bd6 <_svfiprintf_r+0xea>
 8005b9e:	06d0      	lsls	r0, r2, #27
 8005ba0:	bf44      	itt	mi
 8005ba2:	2320      	movmi	r3, #32
 8005ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ba8:	0711      	lsls	r1, r2, #28
 8005baa:	bf44      	itt	mi
 8005bac:	232b      	movmi	r3, #43	@ 0x2b
 8005bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bb8:	d015      	beq.n	8005be6 <_svfiprintf_r+0xfa>
 8005bba:	9a07      	ldr	r2, [sp, #28]
 8005bbc:	4654      	mov	r4, sl
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	f04f 0c0a 	mov.w	ip, #10
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bca:	3b30      	subs	r3, #48	@ 0x30
 8005bcc:	2b09      	cmp	r3, #9
 8005bce:	d94b      	bls.n	8005c68 <_svfiprintf_r+0x17c>
 8005bd0:	b1b0      	cbz	r0, 8005c00 <_svfiprintf_r+0x114>
 8005bd2:	9207      	str	r2, [sp, #28]
 8005bd4:	e014      	b.n	8005c00 <_svfiprintf_r+0x114>
 8005bd6:	eba0 0308 	sub.w	r3, r0, r8
 8005bda:	fa09 f303 	lsl.w	r3, r9, r3
 8005bde:	4313      	orrs	r3, r2
 8005be0:	9304      	str	r3, [sp, #16]
 8005be2:	46a2      	mov	sl, r4
 8005be4:	e7d2      	b.n	8005b8c <_svfiprintf_r+0xa0>
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	1d19      	adds	r1, r3, #4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	9103      	str	r1, [sp, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfbb      	ittet	lt
 8005bf2:	425b      	neglt	r3, r3
 8005bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8005bf8:	9307      	strge	r3, [sp, #28]
 8005bfa:	9307      	strlt	r3, [sp, #28]
 8005bfc:	bfb8      	it	lt
 8005bfe:	9204      	strlt	r2, [sp, #16]
 8005c00:	7823      	ldrb	r3, [r4, #0]
 8005c02:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c04:	d10a      	bne.n	8005c1c <_svfiprintf_r+0x130>
 8005c06:	7863      	ldrb	r3, [r4, #1]
 8005c08:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c0a:	d132      	bne.n	8005c72 <_svfiprintf_r+0x186>
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	1d1a      	adds	r2, r3, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	9203      	str	r2, [sp, #12]
 8005c14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c18:	3402      	adds	r4, #2
 8005c1a:	9305      	str	r3, [sp, #20]
 8005c1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ce0 <_svfiprintf_r+0x1f4>
 8005c20:	7821      	ldrb	r1, [r4, #0]
 8005c22:	2203      	movs	r2, #3
 8005c24:	4650      	mov	r0, sl
 8005c26:	f7fa fafb 	bl	8000220 <memchr>
 8005c2a:	b138      	cbz	r0, 8005c3c <_svfiprintf_r+0x150>
 8005c2c:	9b04      	ldr	r3, [sp, #16]
 8005c2e:	eba0 000a 	sub.w	r0, r0, sl
 8005c32:	2240      	movs	r2, #64	@ 0x40
 8005c34:	4082      	lsls	r2, r0
 8005c36:	4313      	orrs	r3, r2
 8005c38:	3401      	adds	r4, #1
 8005c3a:	9304      	str	r3, [sp, #16]
 8005c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c40:	4824      	ldr	r0, [pc, #144]	@ (8005cd4 <_svfiprintf_r+0x1e8>)
 8005c42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c46:	2206      	movs	r2, #6
 8005c48:	f7fa faea 	bl	8000220 <memchr>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d036      	beq.n	8005cbe <_svfiprintf_r+0x1d2>
 8005c50:	4b21      	ldr	r3, [pc, #132]	@ (8005cd8 <_svfiprintf_r+0x1ec>)
 8005c52:	bb1b      	cbnz	r3, 8005c9c <_svfiprintf_r+0x1b0>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	3307      	adds	r3, #7
 8005c58:	f023 0307 	bic.w	r3, r3, #7
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	9303      	str	r3, [sp, #12]
 8005c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c62:	4433      	add	r3, r6
 8005c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c66:	e76a      	b.n	8005b3e <_svfiprintf_r+0x52>
 8005c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	2001      	movs	r0, #1
 8005c70:	e7a8      	b.n	8005bc4 <_svfiprintf_r+0xd8>
 8005c72:	2300      	movs	r3, #0
 8005c74:	3401      	adds	r4, #1
 8005c76:	9305      	str	r3, [sp, #20]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f04f 0c0a 	mov.w	ip, #10
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c84:	3a30      	subs	r2, #48	@ 0x30
 8005c86:	2a09      	cmp	r2, #9
 8005c88:	d903      	bls.n	8005c92 <_svfiprintf_r+0x1a6>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0c6      	beq.n	8005c1c <_svfiprintf_r+0x130>
 8005c8e:	9105      	str	r1, [sp, #20]
 8005c90:	e7c4      	b.n	8005c1c <_svfiprintf_r+0x130>
 8005c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c96:	4604      	mov	r4, r0
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e7f0      	b.n	8005c7e <_svfiprintf_r+0x192>
 8005c9c:	ab03      	add	r3, sp, #12
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	462a      	mov	r2, r5
 8005ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8005cdc <_svfiprintf_r+0x1f0>)
 8005ca4:	a904      	add	r1, sp, #16
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	f3af 8000 	nop.w
 8005cac:	1c42      	adds	r2, r0, #1
 8005cae:	4606      	mov	r6, r0
 8005cb0:	d1d6      	bne.n	8005c60 <_svfiprintf_r+0x174>
 8005cb2:	89ab      	ldrh	r3, [r5, #12]
 8005cb4:	065b      	lsls	r3, r3, #25
 8005cb6:	f53f af2d 	bmi.w	8005b14 <_svfiprintf_r+0x28>
 8005cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cbc:	e72c      	b.n	8005b18 <_svfiprintf_r+0x2c>
 8005cbe:	ab03      	add	r3, sp, #12
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	462a      	mov	r2, r5
 8005cc4:	4b05      	ldr	r3, [pc, #20]	@ (8005cdc <_svfiprintf_r+0x1f0>)
 8005cc6:	a904      	add	r1, sp, #16
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f000 f879 	bl	8005dc0 <_printf_i>
 8005cce:	e7ed      	b.n	8005cac <_svfiprintf_r+0x1c0>
 8005cd0:	0800668c 	.word	0x0800668c
 8005cd4:	08006696 	.word	0x08006696
 8005cd8:	00000000 	.word	0x00000000
 8005cdc:	08005a35 	.word	0x08005a35
 8005ce0:	08006692 	.word	0x08006692

08005ce4 <_printf_common>:
 8005ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce8:	4616      	mov	r6, r2
 8005cea:	4698      	mov	r8, r3
 8005cec:	688a      	ldr	r2, [r1, #8]
 8005cee:	690b      	ldr	r3, [r1, #16]
 8005cf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	bfb8      	it	lt
 8005cf8:	4613      	movlt	r3, r2
 8005cfa:	6033      	str	r3, [r6, #0]
 8005cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d00:	4607      	mov	r7, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	b10a      	cbz	r2, 8005d0a <_printf_common+0x26>
 8005d06:	3301      	adds	r3, #1
 8005d08:	6033      	str	r3, [r6, #0]
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	0699      	lsls	r1, r3, #26
 8005d0e:	bf42      	ittt	mi
 8005d10:	6833      	ldrmi	r3, [r6, #0]
 8005d12:	3302      	addmi	r3, #2
 8005d14:	6033      	strmi	r3, [r6, #0]
 8005d16:	6825      	ldr	r5, [r4, #0]
 8005d18:	f015 0506 	ands.w	r5, r5, #6
 8005d1c:	d106      	bne.n	8005d2c <_printf_common+0x48>
 8005d1e:	f104 0a19 	add.w	sl, r4, #25
 8005d22:	68e3      	ldr	r3, [r4, #12]
 8005d24:	6832      	ldr	r2, [r6, #0]
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	42ab      	cmp	r3, r5
 8005d2a:	dc26      	bgt.n	8005d7a <_printf_common+0x96>
 8005d2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	3b00      	subs	r3, #0
 8005d34:	bf18      	it	ne
 8005d36:	2301      	movne	r3, #1
 8005d38:	0692      	lsls	r2, r2, #26
 8005d3a:	d42b      	bmi.n	8005d94 <_printf_common+0xb0>
 8005d3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d40:	4641      	mov	r1, r8
 8005d42:	4638      	mov	r0, r7
 8005d44:	47c8      	blx	r9
 8005d46:	3001      	adds	r0, #1
 8005d48:	d01e      	beq.n	8005d88 <_printf_common+0xa4>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	6922      	ldr	r2, [r4, #16]
 8005d4e:	f003 0306 	and.w	r3, r3, #6
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	bf02      	ittt	eq
 8005d56:	68e5      	ldreq	r5, [r4, #12]
 8005d58:	6833      	ldreq	r3, [r6, #0]
 8005d5a:	1aed      	subeq	r5, r5, r3
 8005d5c:	68a3      	ldr	r3, [r4, #8]
 8005d5e:	bf0c      	ite	eq
 8005d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d64:	2500      	movne	r5, #0
 8005d66:	4293      	cmp	r3, r2
 8005d68:	bfc4      	itt	gt
 8005d6a:	1a9b      	subgt	r3, r3, r2
 8005d6c:	18ed      	addgt	r5, r5, r3
 8005d6e:	2600      	movs	r6, #0
 8005d70:	341a      	adds	r4, #26
 8005d72:	42b5      	cmp	r5, r6
 8005d74:	d11a      	bne.n	8005dac <_printf_common+0xc8>
 8005d76:	2000      	movs	r0, #0
 8005d78:	e008      	b.n	8005d8c <_printf_common+0xa8>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	4641      	mov	r1, r8
 8005d80:	4638      	mov	r0, r7
 8005d82:	47c8      	blx	r9
 8005d84:	3001      	adds	r0, #1
 8005d86:	d103      	bne.n	8005d90 <_printf_common+0xac>
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d90:	3501      	adds	r5, #1
 8005d92:	e7c6      	b.n	8005d22 <_printf_common+0x3e>
 8005d94:	18e1      	adds	r1, r4, r3
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	2030      	movs	r0, #48	@ 0x30
 8005d9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d9e:	4422      	add	r2, r4
 8005da0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005da4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005da8:	3302      	adds	r3, #2
 8005daa:	e7c7      	b.n	8005d3c <_printf_common+0x58>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4622      	mov	r2, r4
 8005db0:	4641      	mov	r1, r8
 8005db2:	4638      	mov	r0, r7
 8005db4:	47c8      	blx	r9
 8005db6:	3001      	adds	r0, #1
 8005db8:	d0e6      	beq.n	8005d88 <_printf_common+0xa4>
 8005dba:	3601      	adds	r6, #1
 8005dbc:	e7d9      	b.n	8005d72 <_printf_common+0x8e>
	...

08005dc0 <_printf_i>:
 8005dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	7e0f      	ldrb	r7, [r1, #24]
 8005dc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dc8:	2f78      	cmp	r7, #120	@ 0x78
 8005dca:	4691      	mov	r9, r2
 8005dcc:	4680      	mov	r8, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	469a      	mov	sl, r3
 8005dd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dd6:	d807      	bhi.n	8005de8 <_printf_i+0x28>
 8005dd8:	2f62      	cmp	r7, #98	@ 0x62
 8005dda:	d80a      	bhi.n	8005df2 <_printf_i+0x32>
 8005ddc:	2f00      	cmp	r7, #0
 8005dde:	f000 80d1 	beq.w	8005f84 <_printf_i+0x1c4>
 8005de2:	2f58      	cmp	r7, #88	@ 0x58
 8005de4:	f000 80b8 	beq.w	8005f58 <_printf_i+0x198>
 8005de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005df0:	e03a      	b.n	8005e68 <_printf_i+0xa8>
 8005df2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005df6:	2b15      	cmp	r3, #21
 8005df8:	d8f6      	bhi.n	8005de8 <_printf_i+0x28>
 8005dfa:	a101      	add	r1, pc, #4	@ (adr r1, 8005e00 <_printf_i+0x40>)
 8005dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e00:	08005e59 	.word	0x08005e59
 8005e04:	08005e6d 	.word	0x08005e6d
 8005e08:	08005de9 	.word	0x08005de9
 8005e0c:	08005de9 	.word	0x08005de9
 8005e10:	08005de9 	.word	0x08005de9
 8005e14:	08005de9 	.word	0x08005de9
 8005e18:	08005e6d 	.word	0x08005e6d
 8005e1c:	08005de9 	.word	0x08005de9
 8005e20:	08005de9 	.word	0x08005de9
 8005e24:	08005de9 	.word	0x08005de9
 8005e28:	08005de9 	.word	0x08005de9
 8005e2c:	08005f6b 	.word	0x08005f6b
 8005e30:	08005e97 	.word	0x08005e97
 8005e34:	08005f25 	.word	0x08005f25
 8005e38:	08005de9 	.word	0x08005de9
 8005e3c:	08005de9 	.word	0x08005de9
 8005e40:	08005f8d 	.word	0x08005f8d
 8005e44:	08005de9 	.word	0x08005de9
 8005e48:	08005e97 	.word	0x08005e97
 8005e4c:	08005de9 	.word	0x08005de9
 8005e50:	08005de9 	.word	0x08005de9
 8005e54:	08005f2d 	.word	0x08005f2d
 8005e58:	6833      	ldr	r3, [r6, #0]
 8005e5a:	1d1a      	adds	r2, r3, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6032      	str	r2, [r6, #0]
 8005e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e09c      	b.n	8005fa6 <_printf_i+0x1e6>
 8005e6c:	6833      	ldr	r3, [r6, #0]
 8005e6e:	6820      	ldr	r0, [r4, #0]
 8005e70:	1d19      	adds	r1, r3, #4
 8005e72:	6031      	str	r1, [r6, #0]
 8005e74:	0606      	lsls	r6, r0, #24
 8005e76:	d501      	bpl.n	8005e7c <_printf_i+0xbc>
 8005e78:	681d      	ldr	r5, [r3, #0]
 8005e7a:	e003      	b.n	8005e84 <_printf_i+0xc4>
 8005e7c:	0645      	lsls	r5, r0, #25
 8005e7e:	d5fb      	bpl.n	8005e78 <_printf_i+0xb8>
 8005e80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e84:	2d00      	cmp	r5, #0
 8005e86:	da03      	bge.n	8005e90 <_printf_i+0xd0>
 8005e88:	232d      	movs	r3, #45	@ 0x2d
 8005e8a:	426d      	negs	r5, r5
 8005e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e90:	4858      	ldr	r0, [pc, #352]	@ (8005ff4 <_printf_i+0x234>)
 8005e92:	230a      	movs	r3, #10
 8005e94:	e011      	b.n	8005eba <_printf_i+0xfa>
 8005e96:	6821      	ldr	r1, [r4, #0]
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	0608      	lsls	r0, r1, #24
 8005e9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ea0:	d402      	bmi.n	8005ea8 <_printf_i+0xe8>
 8005ea2:	0649      	lsls	r1, r1, #25
 8005ea4:	bf48      	it	mi
 8005ea6:	b2ad      	uxthmi	r5, r5
 8005ea8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eaa:	4852      	ldr	r0, [pc, #328]	@ (8005ff4 <_printf_i+0x234>)
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	bf14      	ite	ne
 8005eb0:	230a      	movne	r3, #10
 8005eb2:	2308      	moveq	r3, #8
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eba:	6866      	ldr	r6, [r4, #4]
 8005ebc:	60a6      	str	r6, [r4, #8]
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	db05      	blt.n	8005ece <_printf_i+0x10e>
 8005ec2:	6821      	ldr	r1, [r4, #0]
 8005ec4:	432e      	orrs	r6, r5
 8005ec6:	f021 0104 	bic.w	r1, r1, #4
 8005eca:	6021      	str	r1, [r4, #0]
 8005ecc:	d04b      	beq.n	8005f66 <_printf_i+0x1a6>
 8005ece:	4616      	mov	r6, r2
 8005ed0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ed4:	fb03 5711 	mls	r7, r3, r1, r5
 8005ed8:	5dc7      	ldrb	r7, [r0, r7]
 8005eda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ede:	462f      	mov	r7, r5
 8005ee0:	42bb      	cmp	r3, r7
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	d9f4      	bls.n	8005ed0 <_printf_i+0x110>
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d10b      	bne.n	8005f02 <_printf_i+0x142>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	07df      	lsls	r7, r3, #31
 8005eee:	d508      	bpl.n	8005f02 <_printf_i+0x142>
 8005ef0:	6923      	ldr	r3, [r4, #16]
 8005ef2:	6861      	ldr	r1, [r4, #4]
 8005ef4:	4299      	cmp	r1, r3
 8005ef6:	bfde      	ittt	le
 8005ef8:	2330      	movle	r3, #48	@ 0x30
 8005efa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005efe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f02:	1b92      	subs	r2, r2, r6
 8005f04:	6122      	str	r2, [r4, #16]
 8005f06:	f8cd a000 	str.w	sl, [sp]
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	aa03      	add	r2, sp, #12
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4640      	mov	r0, r8
 8005f12:	f7ff fee7 	bl	8005ce4 <_printf_common>
 8005f16:	3001      	adds	r0, #1
 8005f18:	d14a      	bne.n	8005fb0 <_printf_i+0x1f0>
 8005f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1e:	b004      	add	sp, #16
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	f043 0320 	orr.w	r3, r3, #32
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	4832      	ldr	r0, [pc, #200]	@ (8005ff8 <_printf_i+0x238>)
 8005f2e:	2778      	movs	r7, #120	@ 0x78
 8005f30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	6831      	ldr	r1, [r6, #0]
 8005f38:	061f      	lsls	r7, r3, #24
 8005f3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f3e:	d402      	bmi.n	8005f46 <_printf_i+0x186>
 8005f40:	065f      	lsls	r7, r3, #25
 8005f42:	bf48      	it	mi
 8005f44:	b2ad      	uxthmi	r5, r5
 8005f46:	6031      	str	r1, [r6, #0]
 8005f48:	07d9      	lsls	r1, r3, #31
 8005f4a:	bf44      	itt	mi
 8005f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8005f50:	6023      	strmi	r3, [r4, #0]
 8005f52:	b11d      	cbz	r5, 8005f5c <_printf_i+0x19c>
 8005f54:	2310      	movs	r3, #16
 8005f56:	e7ad      	b.n	8005eb4 <_printf_i+0xf4>
 8005f58:	4826      	ldr	r0, [pc, #152]	@ (8005ff4 <_printf_i+0x234>)
 8005f5a:	e7e9      	b.n	8005f30 <_printf_i+0x170>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	f023 0320 	bic.w	r3, r3, #32
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	e7f6      	b.n	8005f54 <_printf_i+0x194>
 8005f66:	4616      	mov	r6, r2
 8005f68:	e7bd      	b.n	8005ee6 <_printf_i+0x126>
 8005f6a:	6833      	ldr	r3, [r6, #0]
 8005f6c:	6825      	ldr	r5, [r4, #0]
 8005f6e:	6961      	ldr	r1, [r4, #20]
 8005f70:	1d18      	adds	r0, r3, #4
 8005f72:	6030      	str	r0, [r6, #0]
 8005f74:	062e      	lsls	r6, r5, #24
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	d501      	bpl.n	8005f7e <_printf_i+0x1be>
 8005f7a:	6019      	str	r1, [r3, #0]
 8005f7c:	e002      	b.n	8005f84 <_printf_i+0x1c4>
 8005f7e:	0668      	lsls	r0, r5, #25
 8005f80:	d5fb      	bpl.n	8005f7a <_printf_i+0x1ba>
 8005f82:	8019      	strh	r1, [r3, #0]
 8005f84:	2300      	movs	r3, #0
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	4616      	mov	r6, r2
 8005f8a:	e7bc      	b.n	8005f06 <_printf_i+0x146>
 8005f8c:	6833      	ldr	r3, [r6, #0]
 8005f8e:	1d1a      	adds	r2, r3, #4
 8005f90:	6032      	str	r2, [r6, #0]
 8005f92:	681e      	ldr	r6, [r3, #0]
 8005f94:	6862      	ldr	r2, [r4, #4]
 8005f96:	2100      	movs	r1, #0
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f7fa f941 	bl	8000220 <memchr>
 8005f9e:	b108      	cbz	r0, 8005fa4 <_printf_i+0x1e4>
 8005fa0:	1b80      	subs	r0, r0, r6
 8005fa2:	6060      	str	r0, [r4, #4]
 8005fa4:	6863      	ldr	r3, [r4, #4]
 8005fa6:	6123      	str	r3, [r4, #16]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fae:	e7aa      	b.n	8005f06 <_printf_i+0x146>
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	4632      	mov	r2, r6
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	47d0      	blx	sl
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d0ad      	beq.n	8005f1a <_printf_i+0x15a>
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	079b      	lsls	r3, r3, #30
 8005fc2:	d413      	bmi.n	8005fec <_printf_i+0x22c>
 8005fc4:	68e0      	ldr	r0, [r4, #12]
 8005fc6:	9b03      	ldr	r3, [sp, #12]
 8005fc8:	4298      	cmp	r0, r3
 8005fca:	bfb8      	it	lt
 8005fcc:	4618      	movlt	r0, r3
 8005fce:	e7a6      	b.n	8005f1e <_printf_i+0x15e>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	4632      	mov	r2, r6
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	47d0      	blx	sl
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d09d      	beq.n	8005f1a <_printf_i+0x15a>
 8005fde:	3501      	adds	r5, #1
 8005fe0:	68e3      	ldr	r3, [r4, #12]
 8005fe2:	9903      	ldr	r1, [sp, #12]
 8005fe4:	1a5b      	subs	r3, r3, r1
 8005fe6:	42ab      	cmp	r3, r5
 8005fe8:	dcf2      	bgt.n	8005fd0 <_printf_i+0x210>
 8005fea:	e7eb      	b.n	8005fc4 <_printf_i+0x204>
 8005fec:	2500      	movs	r5, #0
 8005fee:	f104 0619 	add.w	r6, r4, #25
 8005ff2:	e7f5      	b.n	8005fe0 <_printf_i+0x220>
 8005ff4:	0800669d 	.word	0x0800669d
 8005ff8:	080066ae 	.word	0x080066ae

08005ffc <memmove>:
 8005ffc:	4288      	cmp	r0, r1
 8005ffe:	b510      	push	{r4, lr}
 8006000:	eb01 0402 	add.w	r4, r1, r2
 8006004:	d902      	bls.n	800600c <memmove+0x10>
 8006006:	4284      	cmp	r4, r0
 8006008:	4623      	mov	r3, r4
 800600a:	d807      	bhi.n	800601c <memmove+0x20>
 800600c:	1e43      	subs	r3, r0, #1
 800600e:	42a1      	cmp	r1, r4
 8006010:	d008      	beq.n	8006024 <memmove+0x28>
 8006012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006016:	f803 2f01 	strb.w	r2, [r3, #1]!
 800601a:	e7f8      	b.n	800600e <memmove+0x12>
 800601c:	4402      	add	r2, r0
 800601e:	4601      	mov	r1, r0
 8006020:	428a      	cmp	r2, r1
 8006022:	d100      	bne.n	8006026 <memmove+0x2a>
 8006024:	bd10      	pop	{r4, pc}
 8006026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800602a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800602e:	e7f7      	b.n	8006020 <memmove+0x24>

08006030 <_sbrk_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4d06      	ldr	r5, [pc, #24]	@ (800604c <_sbrk_r+0x1c>)
 8006034:	2300      	movs	r3, #0
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fa fdd8 	bl	8000bf0 <_sbrk>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_sbrk_r+0x1a>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_sbrk_r+0x1a>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	2000257c 	.word	0x2000257c

08006050 <memcpy>:
 8006050:	440a      	add	r2, r1
 8006052:	4291      	cmp	r1, r2
 8006054:	f100 33ff 	add.w	r3, r0, #4294967295
 8006058:	d100      	bne.n	800605c <memcpy+0xc>
 800605a:	4770      	bx	lr
 800605c:	b510      	push	{r4, lr}
 800605e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006066:	4291      	cmp	r1, r2
 8006068:	d1f9      	bne.n	800605e <memcpy+0xe>
 800606a:	bd10      	pop	{r4, pc}

0800606c <_realloc_r>:
 800606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006070:	4607      	mov	r7, r0
 8006072:	4614      	mov	r4, r2
 8006074:	460d      	mov	r5, r1
 8006076:	b921      	cbnz	r1, 8006082 <_realloc_r+0x16>
 8006078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800607c:	4611      	mov	r1, r2
 800607e:	f7ff bc4d 	b.w	800591c <_malloc_r>
 8006082:	b92a      	cbnz	r2, 8006090 <_realloc_r+0x24>
 8006084:	f7ff fbde 	bl	8005844 <_free_r>
 8006088:	4625      	mov	r5, r4
 800608a:	4628      	mov	r0, r5
 800608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006090:	f000 f81a 	bl	80060c8 <_malloc_usable_size_r>
 8006094:	4284      	cmp	r4, r0
 8006096:	4606      	mov	r6, r0
 8006098:	d802      	bhi.n	80060a0 <_realloc_r+0x34>
 800609a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800609e:	d8f4      	bhi.n	800608a <_realloc_r+0x1e>
 80060a0:	4621      	mov	r1, r4
 80060a2:	4638      	mov	r0, r7
 80060a4:	f7ff fc3a 	bl	800591c <_malloc_r>
 80060a8:	4680      	mov	r8, r0
 80060aa:	b908      	cbnz	r0, 80060b0 <_realloc_r+0x44>
 80060ac:	4645      	mov	r5, r8
 80060ae:	e7ec      	b.n	800608a <_realloc_r+0x1e>
 80060b0:	42b4      	cmp	r4, r6
 80060b2:	4622      	mov	r2, r4
 80060b4:	4629      	mov	r1, r5
 80060b6:	bf28      	it	cs
 80060b8:	4632      	movcs	r2, r6
 80060ba:	f7ff ffc9 	bl	8006050 <memcpy>
 80060be:	4629      	mov	r1, r5
 80060c0:	4638      	mov	r0, r7
 80060c2:	f7ff fbbf 	bl	8005844 <_free_r>
 80060c6:	e7f1      	b.n	80060ac <_realloc_r+0x40>

080060c8 <_malloc_usable_size_r>:
 80060c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060cc:	1f18      	subs	r0, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bfbc      	itt	lt
 80060d2:	580b      	ldrlt	r3, [r1, r0]
 80060d4:	18c0      	addlt	r0, r0, r3
 80060d6:	4770      	bx	lr

080060d8 <_init>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	bf00      	nop
 80060dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060de:	bc08      	pop	{r3}
 80060e0:	469e      	mov	lr, r3
 80060e2:	4770      	bx	lr

080060e4 <_fini>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr
