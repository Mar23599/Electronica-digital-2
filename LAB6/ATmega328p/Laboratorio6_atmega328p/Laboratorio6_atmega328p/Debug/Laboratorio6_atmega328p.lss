
Laboratorio6_atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000912  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000793  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000471  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e5  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002003  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
// NON-Interrupt subroutines


void setup(){
	
	cli();
  a6:	f8 94       	cli
	//Inicializar botones de entrada
	
	DDRC &= ~((1 << PC0)|(1 << PC1)|(1 << PC2)|(1 << PC3)|(1 << PC4)|(1 << PC5)); 
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	80 7c       	andi	r24, 0xC0	; 192
  ac:	87 b9       	out	0x07, r24	; 7
	PORTC |= ((1 << PC0)|(1 << PC1)|(1 << PC2)|(1 << PC3)|(1 << PC4)|(1 << PC5)); // Colocar pull-up
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	8f 63       	ori	r24, 0x3F	; 63
  b2:	88 b9       	out	0x08, r24	; 8
	
	// Habilitar interrupciones y configurar mascaras
	 PCICR |= (1 << PCIE1); //habilitar interrupciones por pin change en puerto C
  b4:	e8 e6       	ldi	r30, 0x68	; 104
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	 
	  PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11) | (1 << PCINT12) | (1 << PCINT13); // Mascaras para interrupción en cada pin
  be:	ec e6       	ldi	r30, 0x6C	; 108
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8f 63       	ori	r24, 0x3F	; 63
  c6:	80 83       	st	Z, r24
	
	//inicializacion de comunicación serial
	
	UART_init(0); // Desabilitar interrupciones por recepción
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 ef 00 	call	0x1de	; 0x1de <UART_init>
	
	// Configuración del timer0 para interrupcion de 1ms. (ANTIREBOTE)
	
	TCCR0A |= (1 << WGM01); // Activar modo CTC
  ce:	84 b5       	in	r24, 0x24	; 36
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00); // Prescaler de 64 -> Freq = 1Khz
  d4:	85 b5       	in	r24, 0x25	; 37
  d6:	83 60       	ori	r24, 0x03	; 3
  d8:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; // (16Mhz / 64 * 1k) -1 = 249 para interrumpir en 1ms
  da:	89 ef       	ldi	r24, 0xF9	; 249
  dc:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A); // Habilitar interrupciones por comparación A
  de:	ee e6       	ldi	r30, 0x6E	; 110
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	80 83       	st	Z, r24
	
	
	sei(); 
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <main>:
// Main Function

int main(void)
{
	
	setup();
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x4>

000000f2 <__vector_4>:
}

/****************************************/
// Interrupt routines

ISR(PCINT1_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	1f 93       	push	r17
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	if (!debounce_flag)
 11a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 11e:	81 11       	cpse	r24, r1
 120:	35 c0       	rjmp	.+106    	; 0x18c <__vector_4+0x9a>
	{
		uint8_t estado = PINC & 0b00111111;
 122:	d6 b1       	in	r29, 0x06	; 6
 124:	1d 2f       	mov	r17, r29
 126:	1f 73       	andi	r17, 0x3F	; 63
		uint8_t cambios = prev_estado ^ estado; // prev_estado XOR estado: Determinar que bit cambio
 128:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	c1 27       	eor	r28, r17

		if ( (cambios & (1 << PC0)) && !(estado & (1 << PC0)) ) {
 12e:	c0 ff       	sbrs	r28, 0
 130:	05 c0       	rjmp	.+10     	; 0x13c <__vector_4+0x4a>
 132:	d0 fd       	sbrc	r29, 0
 134:	03 c0       	rjmp	.+6      	; 0x13c <__vector_4+0x4a>
			UART_SendChar('A');
 136:	81 e4       	ldi	r24, 0x41	; 65
 138:	0e 94 08 01 	call	0x210	; 0x210 <UART_SendChar>
		}
		if ( (cambios & (1 << PC1)) && !(estado & (1 << PC1)) ) {
 13c:	c1 ff       	sbrs	r28, 1
 13e:	05 c0       	rjmp	.+10     	; 0x14a <__vector_4+0x58>
 140:	d1 fd       	sbrc	r29, 1
 142:	03 c0       	rjmp	.+6      	; 0x14a <__vector_4+0x58>
			UART_SendChar('B');
 144:	82 e4       	ldi	r24, 0x42	; 66
 146:	0e 94 08 01 	call	0x210	; 0x210 <UART_SendChar>
		}
		if ( (cambios & (1 << PC2)) && !(estado & (1 << PC2)) ) {
 14a:	c2 ff       	sbrs	r28, 2
 14c:	05 c0       	rjmp	.+10     	; 0x158 <__vector_4+0x66>
 14e:	d2 fd       	sbrc	r29, 2
 150:	03 c0       	rjmp	.+6      	; 0x158 <__vector_4+0x66>
			UART_SendChar('C');
 152:	83 e4       	ldi	r24, 0x43	; 67
 154:	0e 94 08 01 	call	0x210	; 0x210 <UART_SendChar>
		}
		if ( (cambios & (1 << PC3)) && !(estado & (1 << PC3)) ) {
 158:	c3 ff       	sbrs	r28, 3
 15a:	05 c0       	rjmp	.+10     	; 0x166 <__vector_4+0x74>
 15c:	d3 fd       	sbrc	r29, 3
 15e:	03 c0       	rjmp	.+6      	; 0x166 <__vector_4+0x74>
			UART_SendChar('D');
 160:	84 e4       	ldi	r24, 0x44	; 68
 162:	0e 94 08 01 	call	0x210	; 0x210 <UART_SendChar>
		}
		if ( (cambios & (1 << PC4)) && !(estado & (1 << PC4)) ) {
 166:	c4 ff       	sbrs	r28, 4
 168:	05 c0       	rjmp	.+10     	; 0x174 <__vector_4+0x82>
 16a:	d4 fd       	sbrc	r29, 4
 16c:	03 c0       	rjmp	.+6      	; 0x174 <__vector_4+0x82>
			UART_SendChar('E');
 16e:	85 e4       	ldi	r24, 0x45	; 69
 170:	0e 94 08 01 	call	0x210	; 0x210 <UART_SendChar>
		}
		if ( (cambios & (1 << PC5)) && !(estado & (1 << PC5)) ) {
 174:	c5 ff       	sbrs	r28, 5
 176:	05 c0       	rjmp	.+10     	; 0x182 <__vector_4+0x90>
 178:	d5 fd       	sbrc	r29, 5
 17a:	03 c0       	rjmp	.+6      	; 0x182 <__vector_4+0x90>
			UART_SendChar('F');
 17c:	86 e4       	ldi	r24, 0x46	; 70
 17e:	0e 94 08 01 	call	0x210	; 0x210 <UART_SendChar>
		}

		prev_estado = estado;   //  actualizar para la próxima interrupción
 182:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__DATA_REGION_ORIGIN__>
		debounce_flag = 20;     // 20ms de bloqueo
 186:	84 e1       	ldi	r24, 0x14	; 20
 188:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	1f 91       	pop	r17
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_14>:



ISR(TIMER0_COMPA_vect){
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
	
	if (debounce_flag)
 1c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1c4:	88 23       	and	r24, r24
 1c6:	29 f0       	breq	.+10     	; 0x1d2 <__vector_14+0x1e>
	{
		debounce_flag--; // Decrementar cada 1ms 
 1c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1cc:	81 50       	subi	r24, 0x01	; 1
 1ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
	
} 
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <UART_init>:
 * Para 16MHz y 9600 baudios: (16000000 / (16 * 9600)) - 1 = 103.166 ? 103
 */
void UART_init(uint8_t interrupts) {
    // Configurar Baud Rate para 9600
    uint16_t ubrr = 103; // Valor para 16MHz y 9600 baudios
    UBRR0H = (uint8_t)(ubrr >> 8);  // High byte de UBRR
 1de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (uint8_t)ubrr;         // Low byte de UBRR
 1e2:	97 e6       	ldi	r25, 0x67	; 103
 1e4:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    
    // Habilitar transmitter y receiver
    UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 1e8:	98 e1       	ldi	r25, 0x18	; 24
 1ea:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    // Configurar formato de frame: 8 data bits, 1 stop bit, no parity
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8-bit data
 1ee:	96 e0       	ldi	r25, 0x06	; 6
 1f0:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    
    // Configurar interrupciones de recepción si se solicitan
    if (interrupts) {
 1f4:	88 23       	and	r24, r24
 1f6:	31 f0       	breq	.+12     	; 0x204 <UART_init+0x26>
        UCSR0B |= (1 << RXCIE0);  // Habilitar interrupción de recepción
 1f8:	e1 ec       	ldi	r30, 0xC1	; 193
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	80 68       	ori	r24, 0x80	; 128
 200:	80 83       	st	Z, r24
 202:	08 95       	ret
        
    } else {
        UCSR0B &= ~(1 << RXCIE0); // Deshabilitar interrupción de recepción
 204:	e1 ec       	ldi	r30, 0xC1	; 193
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	8f 77       	andi	r24, 0x7F	; 127
 20c:	80 83       	st	Z, r24
 20e:	08 95       	ret

00000210 <UART_SendChar>:
 * Espera a que el buffer de transmisión esté vacío
 * antes de enviar el nuevo carácter
 */
void UART_SendChar(char data) {
    // Esperar hasta que el buffer de transmisión esté vacío
    while (!(UCSR0A & (1 << UDRE0)));
 210:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 214:	95 ff       	sbrs	r25, 5
 216:	fc cf       	rjmp	.-8      	; 0x210 <UART_SendChar>
    
    // Colocar el dato en el buffer de transmisión
    UDR0 = data;
 218:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
