
Laboratorio6_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e58  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800301c  0800301c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003034  08003034  0000503c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003034  08003034  00004034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800303c  0800303c  0000503c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800303c  0800303c  0000403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003040  08003040  00004040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08003044  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000003c  08003080  0000503c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003080  000050f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008df9  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185c  00000000  00000000  0000de65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059a  00000000  00000000  0000fe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000203b6  00000000  00000000  000103b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a03  00000000  00000000  00030768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4d93  00000000  00000000  0003a16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000feefe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cec  00000000  00000000  000fef44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00100c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000003c 	.word	0x2000003c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003004 	.word	0x08003004

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000040 	.word	0x20000040
 8000200:	08003004 	.word	0x08003004

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fb08 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f88a 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f94a 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f91e 	bl	8000780 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000544:	f000 f8f2 	bl	800072c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &RX1_buffer, 1);
 8000548:	2201      	movs	r2, #1
 800054a:	4937      	ldr	r1, [pc, #220]	@ (8000628 <main+0xf8>)
 800054c:	4837      	ldr	r0, [pc, #220]	@ (800062c <main+0xfc>)
 800054e:	f001 fd9c 	bl	800208a <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch (RX1_buffer){
 8000552:	4b35      	ldr	r3, [pc, #212]	@ (8000628 <main+0xf8>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	3b41      	subs	r3, #65	@ 0x41
 8000558:	2b05      	cmp	r3, #5
 800055a:	d863      	bhi.n	8000624 <main+0xf4>
 800055c:	a201      	add	r2, pc, #4	@ (adr r2, 8000564 <main+0x34>)
 800055e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000562:	bf00      	nop
 8000564:	0800057d 	.word	0x0800057d
 8000568:	08000599 	.word	0x08000599
 800056c:	080005b5 	.word	0x080005b5
 8000570:	080005d1 	.word	0x080005d1
 8000574:	080005ed 	.word	0x080005ed
 8000578:	08000609 	.word	0x08000609

	  case 'A':

		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800057c:	2120      	movs	r1, #32
 800057e:	482c      	ldr	r0, [pc, #176]	@ (8000630 <main+0x100>)
 8000580:	f000 fea5 	bl	80012ce <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart2, buffer_left, 5, 10);
 8000584:	230a      	movs	r3, #10
 8000586:	2205      	movs	r2, #5
 8000588:	492a      	ldr	r1, [pc, #168]	@ (8000634 <main+0x104>)
 800058a:	482b      	ldr	r0, [pc, #172]	@ (8000638 <main+0x108>)
 800058c:	f001 fcf2 	bl	8001f74 <HAL_UART_Transmit>
		  RX1_buffer = 0; // Limpiar buffer
 8000590:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <main+0xf8>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
		  break;
 8000596:	e046      	b.n	8000626 <main+0xf6>

	  case 'B':

		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000598:	2120      	movs	r1, #32
 800059a:	4825      	ldr	r0, [pc, #148]	@ (8000630 <main+0x100>)
 800059c:	f000 fe97 	bl	80012ce <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart2, buffer_UP, 3, 10);
 80005a0:	230a      	movs	r3, #10
 80005a2:	2203      	movs	r2, #3
 80005a4:	4925      	ldr	r1, [pc, #148]	@ (800063c <main+0x10c>)
 80005a6:	4824      	ldr	r0, [pc, #144]	@ (8000638 <main+0x108>)
 80005a8:	f001 fce4 	bl	8001f74 <HAL_UART_Transmit>
		  RX1_buffer = 0; // Limpiar buffer
 80005ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <main+0xf8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
		  break;
 80005b2:	e038      	b.n	8000626 <main+0xf6>

	  case 'C':

		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80005b4:	2120      	movs	r1, #32
 80005b6:	481e      	ldr	r0, [pc, #120]	@ (8000630 <main+0x100>)
 80005b8:	f000 fe89 	bl	80012ce <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart2, buffer_DOWN, 5, 10);
 80005bc:	230a      	movs	r3, #10
 80005be:	2205      	movs	r2, #5
 80005c0:	491f      	ldr	r1, [pc, #124]	@ (8000640 <main+0x110>)
 80005c2:	481d      	ldr	r0, [pc, #116]	@ (8000638 <main+0x108>)
 80005c4:	f001 fcd6 	bl	8001f74 <HAL_UART_Transmit>
		  RX1_buffer = 0; // Limpiar buffer
 80005c8:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <main+0xf8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
		  break;
 80005ce:	e02a      	b.n	8000626 <main+0xf6>

	  case 'D':

		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80005d0:	2120      	movs	r1, #32
 80005d2:	4817      	ldr	r0, [pc, #92]	@ (8000630 <main+0x100>)
 80005d4:	f000 fe7b 	bl	80012ce <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart2, buffer_right,6, 10);
 80005d8:	230a      	movs	r3, #10
 80005da:	2206      	movs	r2, #6
 80005dc:	4919      	ldr	r1, [pc, #100]	@ (8000644 <main+0x114>)
 80005de:	4816      	ldr	r0, [pc, #88]	@ (8000638 <main+0x108>)
 80005e0:	f001 fcc8 	bl	8001f74 <HAL_UART_Transmit>
		  RX1_buffer = 0; // Limpiar buffer
 80005e4:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <main+0xf8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
		  break;
 80005ea:	e01c      	b.n	8000626 <main+0xf6>

	  case 'E':

		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80005ec:	2120      	movs	r1, #32
 80005ee:	4810      	ldr	r0, [pc, #64]	@ (8000630 <main+0x100>)
 80005f0:	f000 fe6d 	bl	80012ce <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart2, buffer_forward, 8, 10);
 80005f4:	230a      	movs	r3, #10
 80005f6:	2208      	movs	r2, #8
 80005f8:	4913      	ldr	r1, [pc, #76]	@ (8000648 <main+0x118>)
 80005fa:	480f      	ldr	r0, [pc, #60]	@ (8000638 <main+0x108>)
 80005fc:	f001 fcba 	bl	8001f74 <HAL_UART_Transmit>
		  RX1_buffer = 0; // Limpiar buffer
 8000600:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <main+0xf8>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
		  break;
 8000606:	e00e      	b.n	8000626 <main+0xf6>

	  case 'F':

		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000608:	2120      	movs	r1, #32
 800060a:	4809      	ldr	r0, [pc, #36]	@ (8000630 <main+0x100>)
 800060c:	f000 fe5f 	bl	80012ce <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart2, buffer_backward, 9, 10);
 8000610:	230a      	movs	r3, #10
 8000612:	2209      	movs	r2, #9
 8000614:	490d      	ldr	r1, [pc, #52]	@ (800064c <main+0x11c>)
 8000616:	4808      	ldr	r0, [pc, #32]	@ (8000638 <main+0x108>)
 8000618:	f001 fcac 	bl	8001f74 <HAL_UART_Transmit>
		  RX1_buffer = 0; // Limpiar buffer
 800061c:	4b02      	ldr	r3, [pc, #8]	@ (8000628 <main+0xf8>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
		  break;
 8000622:	e000      	b.n	8000626 <main+0xf6>

	  default:
		  break;
 8000624:	bf00      	nop
	  switch (RX1_buffer){
 8000626:	e794      	b.n	8000552 <main+0x22>
 8000628:	200000e8 	.word	0x200000e8
 800062c:	20000058 	.word	0x20000058
 8000630:	40020000 	.word	0x40020000
 8000634:	2000000c 	.word	0x2000000c
 8000638:	200000a0 	.word	0x200000a0
 800063c:	20000000 	.word	0x20000000
 8000640:	20000004 	.word	0x20000004
 8000644:	20000014 	.word	0x20000014
 8000648:	2000001c 	.word	0x2000001c
 800064c:	20000024 	.word	0x20000024

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	@ 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fca4 	bl	8002fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a29      	ldr	r2, [pc, #164]	@ (8000724 <SystemClock_Config+0xd4>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <SystemClock_Config+0xd4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <SystemClock_Config+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069c:	4a22      	ldr	r2, [pc, #136]	@ (8000728 <SystemClock_Config+0xd8>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <SystemClock_Config+0xd8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c4:	2310      	movs	r3, #16
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f95a 	bl	8001998 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ea:	f000 f8f3 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fdfa 	bl	8001304 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000716:	f000 f8dd 	bl	80008d4 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	@ 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_USART1_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000738:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800073c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000764:	f001 fbb6 	bl	8001ed4 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f8b1 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000058 	.word	0x20000058
 800077c:	40011000 	.word	0x40011000

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <MX_USART2_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b8:	f001 fb8c 	bl	8001ed4 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f887 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000a0 	.word	0x200000a0
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a2c      	ldr	r2, [pc, #176]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b2a      	ldr	r3, [pc, #168]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a25      	ldr	r2, [pc, #148]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b23      	ldr	r3, [pc, #140]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a1e      	ldr	r2, [pc, #120]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a17      	ldr	r2, [pc, #92]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	4812      	ldr	r0, [pc, #72]	@ (80008a8 <MX_GPIO_Init+0xd4>)
 8000860:	f000 fd1c 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	480c      	ldr	r0, [pc, #48]	@ (80008ac <MX_GPIO_Init+0xd8>)
 800087c:	f000 fb7a 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000880:	2320      	movs	r3, #32
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_GPIO_Init+0xd4>)
 8000898:	f000 fb6c 	bl	8000f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	@ 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020800 	.word	0x40020800

080008b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

  HAL_UART_Receive_IT(&huart1, &RX1_buffer, 1);
 80008b8:	2201      	movs	r2, #1
 80008ba:	4904      	ldr	r1, [pc, #16]	@ (80008cc <HAL_UART_RxCpltCallback+0x1c>)
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <HAL_UART_RxCpltCallback+0x20>)
 80008be:	f001 fbe4 	bl	800208a <HAL_UART_Receive_IT>

}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000e8 	.word	0x200000e8
 80008d0:	20000058 	.word	0x20000058

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ee:	4a0f      	ldr	r2, [pc, #60]	@ (800092c <HAL_MspInit+0x4c>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	4a08      	ldr	r2, [pc, #32]	@ (800092c <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	@ 0x40
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800091e:	2007      	movs	r0, #7
 8000920:	f000 fa54 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	@ 0x30
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a3a      	ldr	r2, [pc, #232]	@ (8000a38 <HAL_UART_MspInit+0x108>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d135      	bne.n	80009be <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b39      	ldr	r3, [pc, #228]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a38      	ldr	r2, [pc, #224]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
 8000962:	4b36      	ldr	r3, [pc, #216]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b32      	ldr	r3, [pc, #200]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a31      	ldr	r2, [pc, #196]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800098a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800099c:	2307      	movs	r3, #7
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4826      	ldr	r0, [pc, #152]	@ (8000a40 <HAL_UART_MspInit+0x110>)
 80009a8:	f000 fae4 	bl	8000f74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2025      	movs	r0, #37	@ 0x25
 80009b2:	f000 fa16 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b6:	2025      	movs	r0, #37	@ 0x25
 80009b8:	f000 fa2f 	bl	8000e1a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80009bc:	e038      	b.n	8000a30 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a20      	ldr	r2, [pc, #128]	@ (8000a44 <HAL_UART_MspInit+0x114>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d133      	bne.n	8000a30 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 80009d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ec:	4a13      	ldr	r2, [pc, #76]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <HAL_UART_MspInit+0x10c>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a00:	230c      	movs	r3, #12
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a10:	2307      	movs	r3, #7
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4809      	ldr	r0, [pc, #36]	@ (8000a40 <HAL_UART_MspInit+0x110>)
 8000a1c:	f000 faaa 	bl	8000f74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2026      	movs	r0, #38	@ 0x26
 8000a26:	f000 f9dc 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a2a:	2026      	movs	r0, #38	@ 0x26
 8000a2c:	f000 f9f5 	bl	8000e1a <HAL_NVIC_EnableIRQ>
}
 8000a30:	bf00      	nop
 8000a32:	3730      	adds	r7, #48	@ 0x30
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40011000 	.word	0x40011000
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40004400 	.word	0x40004400

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <NMI_Handler+0x4>

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <MemManage_Handler+0x4>

08000a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 f8a5 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aac:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <USART1_IRQHandler+0x10>)
 8000aae:	f001 fb11 	bl	80020d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000058 	.word	0x20000058

08000abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ac0:	4802      	ldr	r0, [pc, #8]	@ (8000acc <USART2_IRQHandler+0x10>)
 8000ac2:	f001 fb07 	bl	80020d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000a0 	.word	0x200000a0

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000af8:	f7ff ffea 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	@ (8000b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	@ (8000b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f002 fa4b 	bl	8002fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fd03 	bl	8000530 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000b38:	08003044 	.word	0x08003044
  ldr r2, =_sbss
 8000b3c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000b40:	200000f0 	.word	0x200000f0

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f92b 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff feb0 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f943 	bl	8000e36 <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 f90b 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000030 	.word	0x20000030
 8000be4:	20000038 	.word	0x20000038
 8000be8:	20000034 	.word	0x20000034

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000038 	.word	0x20000038
 8000c10:	200000ec 	.word	0x200000ec

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200000ec 	.word	0x200000ec

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db0b      	blt.n	8000cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 021f 	and.w	r2, r3, #31
 8000ca8:	4907      	ldr	r1, [pc, #28]	@ (8000cc8 <__NVIC_EnableIRQ+0x38>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	@ (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	@ (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	@ 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff8e 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff29 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff3e 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff8e 	bl	8000d20 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5d 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff31 	bl	8000c90 <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa2 	bl	8000d88 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff feda 	bl	8000c14 <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d008      	beq.n	8000e80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2280      	movs	r2, #128	@ 0x80
 8000e72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e052      	b.n	8000f26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0216 	bic.w	r2, r2, #22
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d103      	bne.n	8000eb0 <HAL_DMA_Abort+0x62>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0208 	bic.w	r2, r2, #8
 8000ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0201 	bic.w	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ed0:	e013      	b.n	8000efa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ed2:	f7ff fe9f 	bl	8000c14 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d90c      	bls.n	8000efa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e015      	b.n	8000f26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1e4      	bne.n	8000ed2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f0c:	223f      	movs	r2, #63	@ 0x3f
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d004      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2280      	movs	r2, #128	@ 0x80
 8000f46:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e00c      	b.n	8000f66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2205      	movs	r2, #5
 8000f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0201 	bic.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	@ 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	e165      	b.n	800125c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	f040 8154 	bne.w	8001256 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d005      	beq.n	8000fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d130      	bne.n	8001028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	f003 0201 	and.w	r2, r3, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b03      	cmp	r3, #3
 8001032:	d017      	beq.n	8001064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d123      	bne.n	80010b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	08da      	lsrs	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3208      	adds	r2, #8
 8001078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	220f      	movs	r2, #15
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	69b9      	ldr	r1, [r7, #24]
 80010b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0203 	and.w	r2, r3, #3
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80ae 	beq.w	8001256 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001274 <HAL_GPIO_Init+0x300>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	4a5c      	ldr	r2, [pc, #368]	@ (8001274 <HAL_GPIO_Init+0x300>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001108:	6453      	str	r3, [r2, #68]	@ 0x44
 800110a:	4b5a      	ldr	r3, [pc, #360]	@ (8001274 <HAL_GPIO_Init+0x300>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001116:	4a58      	ldr	r2, [pc, #352]	@ (8001278 <HAL_GPIO_Init+0x304>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4f      	ldr	r2, [pc, #316]	@ (800127c <HAL_GPIO_Init+0x308>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x21a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4e      	ldr	r2, [pc, #312]	@ (8001280 <HAL_GPIO_Init+0x30c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x216>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4d      	ldr	r2, [pc, #308]	@ (8001284 <HAL_GPIO_Init+0x310>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x212>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4c      	ldr	r2, [pc, #304]	@ (8001288 <HAL_GPIO_Init+0x314>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x20e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4b      	ldr	r2, [pc, #300]	@ (800128c <HAL_GPIO_Init+0x318>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x20a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4a      	ldr	r2, [pc, #296]	@ (8001290 <HAL_GPIO_Init+0x31c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x206>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a49      	ldr	r2, [pc, #292]	@ (8001294 <HAL_GPIO_Init+0x320>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x202>
 8001172:	2306      	movs	r3, #6
 8001174:	e00c      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001176:	2307      	movs	r3, #7
 8001178:	e00a      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800117a:	2305      	movs	r3, #5
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800117e:	2304      	movs	r3, #4
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800118e:	2300      	movs	r3, #0
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	f002 0203 	and.w	r2, r2, #3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a0:	4935      	ldr	r1, [pc, #212]	@ (8001278 <HAL_GPIO_Init+0x304>)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001298 <HAL_GPIO_Init+0x324>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a31      	ldr	r2, [pc, #196]	@ (8001298 <HAL_GPIO_Init+0x324>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_GPIO_Init+0x324>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a26      	ldr	r2, [pc, #152]	@ (8001298 <HAL_GPIO_Init+0x324>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001202:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <HAL_GPIO_Init+0x324>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001226:	4a1c      	ldr	r2, [pc, #112]	@ (8001298 <HAL_GPIO_Init+0x324>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <HAL_GPIO_Init+0x324>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001250:	4a11      	ldr	r2, [pc, #68]	@ (8001298 <HAL_GPIO_Init+0x324>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	f67f ae96 	bls.w	8000f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40013800 	.word	0x40013800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40021400 	.word	0x40021400
 8001294:	40021800 	.word	0x40021800
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e0:	887a      	ldrh	r2, [r7, #2]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	041a      	lsls	r2, r3, #16
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	400b      	ands	r3, r1
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0cc      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001318:	4b68      	ldr	r3, [pc, #416]	@ (80014bc <HAL_RCC_ClockConfig+0x1b8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d90c      	bls.n	8001340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b65      	ldr	r3, [pc, #404]	@ (80014bc <HAL_RCC_ClockConfig+0x1b8>)
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800132e:	4b63      	ldr	r3, [pc, #396]	@ (80014bc <HAL_RCC_ClockConfig+0x1b8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d001      	beq.n	8001340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0b8      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d020      	beq.n	800138e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001358:	4b59      	ldr	r3, [pc, #356]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4a58      	ldr	r2, [pc, #352]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001362:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001370:	4b53      	ldr	r3, [pc, #332]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4a52      	ldr	r2, [pc, #328]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800137a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800137c:	4b50      	ldr	r3, [pc, #320]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	494d      	ldr	r1, [pc, #308]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	4313      	orrs	r3, r2
 800138c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d044      	beq.n	8001424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d107      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b47      	ldr	r3, [pc, #284]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d119      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e07f      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d003      	beq.n	80013c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d107      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c2:	4b3f      	ldr	r3, [pc, #252]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e06f      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d2:	4b3b      	ldr	r3, [pc, #236]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e067      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e2:	4b37      	ldr	r3, [pc, #220]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f023 0203 	bic.w	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4934      	ldr	r1, [pc, #208]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013f4:	f7ff fc0e 	bl	8000c14 <HAL_GetTick>
 80013f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013fc:	f7ff fc0a 	bl	8000c14 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e04f      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001412:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 020c 	and.w	r2, r3, #12
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	429a      	cmp	r2, r3
 8001422:	d1eb      	bne.n	80013fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001424:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <HAL_RCC_ClockConfig+0x1b8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d20c      	bcs.n	800144c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001432:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <HAL_RCC_ClockConfig+0x1b8>)
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <HAL_RCC_ClockConfig+0x1b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e032      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4916      	ldr	r1, [pc, #88]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001476:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	490e      	ldr	r1, [pc, #56]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	4313      	orrs	r3, r2
 8001488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800148a:	f000 f855 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 800148e:	4602      	mov	r2, r0
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	490a      	ldr	r1, [pc, #40]	@ (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	5ccb      	ldrb	r3, [r1, r3]
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <HAL_RCC_ClockConfig+0x1c8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fb6e 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023c00 	.word	0x40023c00
 80014c0:	40023800 	.word	0x40023800
 80014c4:	0800301c 	.word	0x0800301c
 80014c8:	20000030 	.word	0x20000030
 80014cc:	20000034 	.word	0x20000034

080014d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000030 	.word	0x20000030

080014e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014ec:	f7ff fff0 	bl	80014d0 <HAL_RCC_GetHCLKFreq>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	0a9b      	lsrs	r3, r3, #10
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	4903      	ldr	r1, [pc, #12]	@ (800150c <HAL_RCC_GetPCLK1Freq+0x24>)
 80014fe:	5ccb      	ldrb	r3, [r1, r3]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	0800302c 	.word	0x0800302c

08001510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001514:	f7ff ffdc 	bl	80014d0 <HAL_RCC_GetHCLKFreq>
 8001518:	4602      	mov	r2, r0
 800151a:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	0b5b      	lsrs	r3, r3, #13
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	4903      	ldr	r1, [pc, #12]	@ (8001534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001526:	5ccb      	ldrb	r3, [r1, r3]
 8001528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800152c:	4618      	mov	r0, r3
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	0800302c 	.word	0x0800302c

08001538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800153c:	b0ae      	sub	sp, #184	@ 0xb8
 800153e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800155e:	4bcb      	ldr	r3, [pc, #812]	@ (800188c <HAL_RCC_GetSysClockFreq+0x354>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b0c      	cmp	r3, #12
 8001568:	f200 8206 	bhi.w	8001978 <HAL_RCC_GetSysClockFreq+0x440>
 800156c:	a201      	add	r2, pc, #4	@ (adr r2, 8001574 <HAL_RCC_GetSysClockFreq+0x3c>)
 800156e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001572:	bf00      	nop
 8001574:	080015a9 	.word	0x080015a9
 8001578:	08001979 	.word	0x08001979
 800157c:	08001979 	.word	0x08001979
 8001580:	08001979 	.word	0x08001979
 8001584:	080015b1 	.word	0x080015b1
 8001588:	08001979 	.word	0x08001979
 800158c:	08001979 	.word	0x08001979
 8001590:	08001979 	.word	0x08001979
 8001594:	080015b9 	.word	0x080015b9
 8001598:	08001979 	.word	0x08001979
 800159c:	08001979 	.word	0x08001979
 80015a0:	08001979 	.word	0x08001979
 80015a4:	080017a9 	.word	0x080017a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015a8:	4bb9      	ldr	r3, [pc, #740]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x358>)
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ae:	e1e7      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b0:	4bb8      	ldr	r3, [pc, #736]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015b6:	e1e3      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b8:	4bb4      	ldr	r3, [pc, #720]	@ (800188c <HAL_RCC_GetSysClockFreq+0x354>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c4:	4bb1      	ldr	r3, [pc, #708]	@ (800188c <HAL_RCC_GetSysClockFreq+0x354>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d071      	beq.n	80016b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d0:	4bae      	ldr	r3, [pc, #696]	@ (800188c <HAL_RCC_GetSysClockFreq+0x354>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015f6:	4622      	mov	r2, r4
 80015f8:	462b      	mov	r3, r5
 80015fa:	f04f 0000 	mov.w	r0, #0
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	0159      	lsls	r1, r3, #5
 8001604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001608:	0150      	lsls	r0, r2, #5
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4621      	mov	r1, r4
 8001610:	1a51      	subs	r1, r2, r1
 8001612:	6439      	str	r1, [r7, #64]	@ 0x40
 8001614:	4629      	mov	r1, r5
 8001616:	eb63 0301 	sbc.w	r3, r3, r1
 800161a:	647b      	str	r3, [r7, #68]	@ 0x44
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001628:	4649      	mov	r1, r9
 800162a:	018b      	lsls	r3, r1, #6
 800162c:	4641      	mov	r1, r8
 800162e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001632:	4641      	mov	r1, r8
 8001634:	018a      	lsls	r2, r1, #6
 8001636:	4641      	mov	r1, r8
 8001638:	1a51      	subs	r1, r2, r1
 800163a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800163c:	4649      	mov	r1, r9
 800163e:	eb63 0301 	sbc.w	r3, r3, r1
 8001642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001650:	4649      	mov	r1, r9
 8001652:	00cb      	lsls	r3, r1, #3
 8001654:	4641      	mov	r1, r8
 8001656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800165a:	4641      	mov	r1, r8
 800165c:	00ca      	lsls	r2, r1, #3
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	4603      	mov	r3, r0
 8001664:	4622      	mov	r2, r4
 8001666:	189b      	adds	r3, r3, r2
 8001668:	633b      	str	r3, [r7, #48]	@ 0x30
 800166a:	462b      	mov	r3, r5
 800166c:	460a      	mov	r2, r1
 800166e:	eb42 0303 	adc.w	r3, r2, r3
 8001672:	637b      	str	r3, [r7, #52]	@ 0x34
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001680:	4629      	mov	r1, r5
 8001682:	024b      	lsls	r3, r1, #9
 8001684:	4621      	mov	r1, r4
 8001686:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800168a:	4621      	mov	r1, r4
 800168c:	024a      	lsls	r2, r1, #9
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001696:	2200      	movs	r2, #0
 8001698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800169c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80016a4:	f7fe fdae 	bl	8000204 <__aeabi_uldivmod>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4613      	mov	r3, r2
 80016ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016b2:	e067      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b4:	4b75      	ldr	r3, [pc, #468]	@ (800188c <HAL_RCC_GetSysClockFreq+0x354>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	099b      	lsrs	r3, r3, #6
 80016ba:	2200      	movs	r2, #0
 80016bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016ce:	2300      	movs	r3, #0
 80016d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016d6:	4622      	mov	r2, r4
 80016d8:	462b      	mov	r3, r5
 80016da:	f04f 0000 	mov.w	r0, #0
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	0159      	lsls	r1, r3, #5
 80016e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e8:	0150      	lsls	r0, r2, #5
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4621      	mov	r1, r4
 80016f0:	1a51      	subs	r1, r2, r1
 80016f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016f4:	4629      	mov	r1, r5
 80016f6:	eb63 0301 	sbc.w	r3, r3, r1
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001708:	4649      	mov	r1, r9
 800170a:	018b      	lsls	r3, r1, #6
 800170c:	4641      	mov	r1, r8
 800170e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001712:	4641      	mov	r1, r8
 8001714:	018a      	lsls	r2, r1, #6
 8001716:	4641      	mov	r1, r8
 8001718:	ebb2 0a01 	subs.w	sl, r2, r1
 800171c:	4649      	mov	r1, r9
 800171e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800172e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001732:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001736:	4692      	mov	sl, r2
 8001738:	469b      	mov	fp, r3
 800173a:	4623      	mov	r3, r4
 800173c:	eb1a 0303 	adds.w	r3, sl, r3
 8001740:	623b      	str	r3, [r7, #32]
 8001742:	462b      	mov	r3, r5
 8001744:	eb4b 0303 	adc.w	r3, fp, r3
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001756:	4629      	mov	r1, r5
 8001758:	028b      	lsls	r3, r1, #10
 800175a:	4621      	mov	r1, r4
 800175c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001760:	4621      	mov	r1, r4
 8001762:	028a      	lsls	r2, r1, #10
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800176c:	2200      	movs	r2, #0
 800176e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001770:	677a      	str	r2, [r7, #116]	@ 0x74
 8001772:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001776:	f7fe fd45 	bl	8000204 <__aeabi_uldivmod>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4613      	mov	r3, r2
 8001780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001784:	4b41      	ldr	r3, [pc, #260]	@ (800188c <HAL_RCC_GetSysClockFreq+0x354>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	3301      	adds	r3, #1
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001796:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800179a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017a6:	e0eb      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a8:	4b38      	ldr	r3, [pc, #224]	@ (800188c <HAL_RCC_GetSysClockFreq+0x354>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b4:	4b35      	ldr	r3, [pc, #212]	@ (800188c <HAL_RCC_GetSysClockFreq+0x354>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d06b      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c0:	4b32      	ldr	r3, [pc, #200]	@ (800188c <HAL_RCC_GetSysClockFreq+0x354>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	099b      	lsrs	r3, r3, #6
 80017c6:	2200      	movs	r2, #0
 80017c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80017d4:	2300      	movs	r3, #0
 80017d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80017d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017dc:	4622      	mov	r2, r4
 80017de:	462b      	mov	r3, r5
 80017e0:	f04f 0000 	mov.w	r0, #0
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	0159      	lsls	r1, r3, #5
 80017ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ee:	0150      	lsls	r0, r2, #5
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4621      	mov	r1, r4
 80017f6:	1a51      	subs	r1, r2, r1
 80017f8:	61b9      	str	r1, [r7, #24]
 80017fa:	4629      	mov	r1, r5
 80017fc:	eb63 0301 	sbc.w	r3, r3, r1
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800180e:	4659      	mov	r1, fp
 8001810:	018b      	lsls	r3, r1, #6
 8001812:	4651      	mov	r1, sl
 8001814:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001818:	4651      	mov	r1, sl
 800181a:	018a      	lsls	r2, r1, #6
 800181c:	4651      	mov	r1, sl
 800181e:	ebb2 0801 	subs.w	r8, r2, r1
 8001822:	4659      	mov	r1, fp
 8001824:	eb63 0901 	sbc.w	r9, r3, r1
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001834:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001838:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800183c:	4690      	mov	r8, r2
 800183e:	4699      	mov	r9, r3
 8001840:	4623      	mov	r3, r4
 8001842:	eb18 0303 	adds.w	r3, r8, r3
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	462b      	mov	r3, r5
 800184a:	eb49 0303 	adc.w	r3, r9, r3
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800185c:	4629      	mov	r1, r5
 800185e:	024b      	lsls	r3, r1, #9
 8001860:	4621      	mov	r1, r4
 8001862:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001866:	4621      	mov	r1, r4
 8001868:	024a      	lsls	r2, r1, #9
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001872:	2200      	movs	r2, #0
 8001874:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001876:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001878:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800187c:	f7fe fcc2 	bl	8000204 <__aeabi_uldivmod>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4613      	mov	r3, r2
 8001886:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800188a:	e065      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x420>
 800188c:	40023800 	.word	0x40023800
 8001890:	00f42400 	.word	0x00f42400
 8001894:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001898:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x458>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	099b      	lsrs	r3, r3, #6
 800189e:	2200      	movs	r2, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	4611      	mov	r1, r2
 80018a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80018aa:	2300      	movs	r3, #0
 80018ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80018ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80018b2:	4642      	mov	r2, r8
 80018b4:	464b      	mov	r3, r9
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	0159      	lsls	r1, r3, #5
 80018c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c4:	0150      	lsls	r0, r2, #5
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4641      	mov	r1, r8
 80018cc:	1a51      	subs	r1, r2, r1
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	4649      	mov	r1, r9
 80018d2:	eb63 0301 	sbc.w	r3, r3, r1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018e4:	4659      	mov	r1, fp
 80018e6:	018b      	lsls	r3, r1, #6
 80018e8:	4651      	mov	r1, sl
 80018ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ee:	4651      	mov	r1, sl
 80018f0:	018a      	lsls	r2, r1, #6
 80018f2:	4651      	mov	r1, sl
 80018f4:	1a54      	subs	r4, r2, r1
 80018f6:	4659      	mov	r1, fp
 80018f8:	eb63 0501 	sbc.w	r5, r3, r1
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	00eb      	lsls	r3, r5, #3
 8001906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800190a:	00e2      	lsls	r2, r4, #3
 800190c:	4614      	mov	r4, r2
 800190e:	461d      	mov	r5, r3
 8001910:	4643      	mov	r3, r8
 8001912:	18e3      	adds	r3, r4, r3
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	464b      	mov	r3, r9
 8001918:	eb45 0303 	adc.w	r3, r5, r3
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800192a:	4629      	mov	r1, r5
 800192c:	028b      	lsls	r3, r1, #10
 800192e:	4621      	mov	r1, r4
 8001930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001934:	4621      	mov	r1, r4
 8001936:	028a      	lsls	r2, r1, #10
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001940:	2200      	movs	r2, #0
 8001942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001944:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001946:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800194a:	f7fe fc5b 	bl	8000204 <__aeabi_uldivmod>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4613      	mov	r3, r2
 8001954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001958:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x458>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	0f1b      	lsrs	r3, r3, #28
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800196a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001976:	e003      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x45c>)
 800197a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800197e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001984:	4618      	mov	r0, r3
 8001986:	37b8      	adds	r7, #184	@ 0xb8
 8001988:	46bd      	mov	sp, r7
 800198a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	00f42400 	.word	0x00f42400

08001998 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e28d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8083 	beq.w	8001abe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019b8:	4b94      	ldr	r3, [pc, #592]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d019      	beq.n	80019f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019c4:	4b91      	ldr	r3, [pc, #580]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019d0:	4b8e      	ldr	r3, [pc, #568]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019dc:	d00c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019de:	4b8b      	ldr	r3, [pc, #556]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d112      	bne.n	8001a10 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ea:	4b88      	ldr	r3, [pc, #544]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019f6:	d10b      	bne.n	8001a10 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	4b84      	ldr	r3, [pc, #528]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d05b      	beq.n	8001abc <HAL_RCC_OscConfig+0x124>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d157      	bne.n	8001abc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e25a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a18:	d106      	bne.n	8001a28 <HAL_RCC_OscConfig+0x90>
 8001a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7b      	ldr	r2, [pc, #492]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e01d      	b.n	8001a64 <HAL_RCC_OscConfig+0xcc>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0xb4>
 8001a32:	4b76      	ldr	r3, [pc, #472]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a75      	ldr	r2, [pc, #468]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b73      	ldr	r3, [pc, #460]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a72      	ldr	r2, [pc, #456]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0xcc>
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a6e      	ldr	r2, [pc, #440]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b6c      	ldr	r3, [pc, #432]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f8d2 	bl	8000c14 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff f8ce 	bl	8000c14 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	@ 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e21f      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b61      	ldr	r3, [pc, #388]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0xdc>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f8be 	bl	8000c14 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f8ba 	bl	8000c14 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	@ 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e20b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	4b57      	ldr	r3, [pc, #348]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x104>
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d06f      	beq.n	8001baa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001aca:	4b50      	ldr	r3, [pc, #320]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d017      	beq.n	8001b06 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d105      	bne.n	8001aee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aee:	4b47      	ldr	r3, [pc, #284]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d11c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afa:	4b44      	ldr	r3, [pc, #272]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d116      	bne.n	8001b34 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	4b41      	ldr	r3, [pc, #260]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x186>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e1d3      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4937      	ldr	r1, [pc, #220]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	e03a      	b.n	8001baa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	4b34      	ldr	r3, [pc, #208]	@ (8001c10 <HAL_RCC_OscConfig+0x278>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff f867 	bl	8000c14 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff f863 	bl	8000c14 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e1b4      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4925      	ldr	r1, [pc, #148]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e015      	b.n	8001baa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <HAL_RCC_OscConfig+0x278>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff f846 	bl	8000c14 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff f842 	bl	8000c14 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e193      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d036      	beq.n	8001c24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d016      	beq.n	8001bec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f826 	bl	8000c14 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f822 	bl	8000c14 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e173      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x234>
 8001bea:	e01b      	b.n	8001c24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <HAL_RCC_OscConfig+0x27c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff f80f 	bl	8000c14 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	e00e      	b.n	8001c18 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff f80b 	bl	8000c14 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d907      	bls.n	8001c18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e15c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	42470000 	.word	0x42470000
 8001c14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4b8a      	ldr	r3, [pc, #552]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ea      	bne.n	8001bfa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8097 	beq.w	8001d60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b83      	ldr	r3, [pc, #524]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10f      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b7f      	ldr	r3, [pc, #508]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b7c      	ldr	r3, [pc, #496]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b79      	ldr	r3, [pc, #484]	@ (8001e48 <HAL_RCC_OscConfig+0x4b0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6e:	4b76      	ldr	r3, [pc, #472]	@ (8001e48 <HAL_RCC_OscConfig+0x4b0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a75      	ldr	r2, [pc, #468]	@ (8001e48 <HAL_RCC_OscConfig+0x4b0>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe ffcb 	bl	8000c14 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7fe ffc7 	bl	8000c14 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e118      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b6c      	ldr	r3, [pc, #432]	@ (8001e48 <HAL_RCC_OscConfig+0x4b0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x31e>
 8001ca8:	4b66      	ldr	r3, [pc, #408]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cac:	4a65      	ldr	r2, [pc, #404]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb4:	e01c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x358>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x340>
 8001cbe:	4b61      	ldr	r3, [pc, #388]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc2:	4a60      	ldr	r2, [pc, #384]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cca:	4b5e      	ldr	r3, [pc, #376]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cce:	4a5d      	ldr	r2, [pc, #372]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x358>
 8001cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cdc:	4a59      	ldr	r2, [pc, #356]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce4:	4b57      	ldr	r3, [pc, #348]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce8:	4a56      	ldr	r2, [pc, #344]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	f023 0304 	bic.w	r3, r3, #4
 8001cee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d015      	beq.n	8001d24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7fe ff8c 	bl	8000c14 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7fe ff88 	bl	8000c14 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e0d7      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d16:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0ee      	beq.n	8001d00 <HAL_RCC_OscConfig+0x368>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7fe ff76 	bl	8000c14 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7fe ff72 	bl	8000c14 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0c1      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d42:	4b40      	ldr	r3, [pc, #256]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ee      	bne.n	8001d2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d54:	4b3b      	ldr	r3, [pc, #236]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	4a3a      	ldr	r2, [pc, #232]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80ad 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d6a:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d060      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d145      	bne.n	8001e0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	4b33      	ldr	r3, [pc, #204]	@ (8001e4c <HAL_RCC_OscConfig+0x4b4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7fe ff46 	bl	8000c14 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7fe ff42 	bl	8000c14 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e093      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9e:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	019b      	lsls	r3, r3, #6
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	041b      	lsls	r3, r3, #16
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	071b      	lsls	r3, r3, #28
 8001dd6:	491b      	ldr	r1, [pc, #108]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_RCC_OscConfig+0x4b4>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7fe ff17 	bl	8000c14 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7fe ff13 	bl	8000c14 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e064      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x452>
 8001e08:	e05c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_RCC_OscConfig+0x4b4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7fe ff00 	bl	8000c14 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7fe fefc 	bl	8000c14 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e04d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_RCC_OscConfig+0x4ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x480>
 8001e36:	e045      	b.n	8001ec4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e040      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <HAL_RCC_OscConfig+0x538>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d030      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d129      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d122      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d119      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d10f      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e042      	b.n	8001f6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fd18 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	@ 0x24
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fdd3 	bl	8002ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d175      	bne.n	8002080 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_UART_Transmit+0x2c>
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e06e      	b.n	8002082 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2221      	movs	r2, #33	@ 0x21
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fe2f 	bl	8000c14 <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_UART_Transmit+0x6c>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d104      	bne.n	8001fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e003      	b.n	8001fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fe8:	e02e      	b.n	8002048 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2180      	movs	r1, #128	@ 0x80
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fb37 	bl	8002668 <UART_WaitOnFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e03a      	b.n	8002082 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10b      	bne.n	800202a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	3302      	adds	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	e007      	b.n	800203a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	3301      	adds	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1cb      	bne.n	8001fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	2140      	movs	r1, #64	@ 0x40
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fb03 	bl	8002668 <UART_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	4613      	mov	r3, r2
 8002096:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d112      	bne.n	80020ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_UART_Receive_IT+0x26>
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e00b      	b.n	80020cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	461a      	mov	r2, r3
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fb2a 	bl	800271a <UART_Start_Receive_IT>
 80020c6:	4603      	mov	r3, r0
 80020c8:	e000      	b.n	80020cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80020ca:	2302      	movs	r3, #2
  }
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0ba      	sub	sp, #232	@ 0xe8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10f      	bne.n	800213a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800211a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_UART_IRQHandler+0x66>
 8002126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fc07 	bl	8002946 <UART_Receive_IT>
      return;
 8002138:	e273      	b.n	8002622 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800213a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80de 	beq.w	8002300 <HAL_UART_IRQHandler+0x22c>
 8002144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d106      	bne.n	800215e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002154:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80d1 	beq.w	8002300 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_UART_IRQHandler+0xae>
 800216a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800216e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_UART_IRQHandler+0xd2>
 800218e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	f043 0202 	orr.w	r2, r3, #2
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_UART_IRQHandler+0xf6>
 80021b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f043 0204 	orr.w	r2, r3, #4
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80021ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d011      	beq.n	80021fa <HAL_UART_IRQHandler+0x126>
 80021d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80021e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	f043 0208 	orr.w	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 820a 	beq.w	8002618 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_UART_IRQHandler+0x14e>
 8002210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fb92 	bl	8002946 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222c:	2b40      	cmp	r3, #64	@ 0x40
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d103      	bne.n	800224e <HAL_UART_IRQHandler+0x17a>
 8002246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d04f      	beq.n	80022ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fa9d 	bl	800278e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225e:	2b40      	cmp	r3, #64	@ 0x40
 8002260:	d141      	bne.n	80022e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3314      	adds	r3, #20
 8002268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002270:	e853 3f00 	ldrex	r3, [r3]
 8002274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800227c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3314      	adds	r3, #20
 800228a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800228e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800229a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800229e:	e841 2300 	strex	r3, r2, [r1]
 80022a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80022a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1d9      	bne.n	8002262 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d013      	beq.n	80022de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ba:	4a8a      	ldr	r2, [pc, #552]	@ (80024e4 <HAL_UART_IRQHandler+0x410>)
 80022bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fe33 	bl	8000f2e <HAL_DMA_Abort_IT>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022d8:	4610      	mov	r0, r2
 80022da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022dc:	e00e      	b.n	80022fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f9ac 	bl	800263c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e4:	e00a      	b.n	80022fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f9a8 	bl	800263c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ec:	e006      	b.n	80022fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f9a4 	bl	800263c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80022fa:	e18d      	b.n	8002618 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	bf00      	nop
    return;
 80022fe:	e18b      	b.n	8002618 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 8167 	bne.w	80025d8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800230a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8160 	beq.w	80025d8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8159 	beq.w	80025d8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002346:	2b40      	cmp	r3, #64	@ 0x40
 8002348:	f040 80ce 	bne.w	80024e8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002358:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a9 	beq.w	80024b4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800236a:	429a      	cmp	r2, r3
 800236c:	f080 80a2 	bcs.w	80024b4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002376:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002382:	f000 8088 	beq.w	8002496 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	330c      	adds	r3, #12
 800238c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002390:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800239c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	330c      	adds	r3, #12
 80023ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80023b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80023be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80023c2:	e841 2300 	strex	r3, r2, [r1]
 80023c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80023ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1d9      	bne.n	8002386 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3314      	adds	r3, #20
 80023d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023dc:	e853 3f00 	ldrex	r3, [r3]
 80023e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80023e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3314      	adds	r3, #20
 80023f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80023fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80023fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002402:	e841 2300 	strex	r3, r2, [r1]
 8002406:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e1      	bne.n	80023d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3314      	adds	r3, #20
 8002414:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002416:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002418:	e853 3f00 	ldrex	r3, [r3]
 800241c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800241e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002424:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3314      	adds	r3, #20
 800242e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002432:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002434:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002436:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002438:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800243a:	e841 2300 	strex	r3, r2, [r1]
 800243e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e3      	bne.n	800240e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	330c      	adds	r3, #12
 800245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800245e:	e853 3f00 	ldrex	r3, [r3]
 8002462:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002466:	f023 0310 	bic.w	r3, r3, #16
 800246a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	330c      	adds	r3, #12
 8002474:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002478:	65ba      	str	r2, [r7, #88]	@ 0x58
 800247a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800247e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002480:	e841 2300 	strex	r3, r2, [r1]
 8002484:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e3      	bne.n	8002454 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fcdc 	bl	8000e4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4619      	mov	r1, r3
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f8cf 	bl	8002650 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80024b2:	e0b3      	b.n	800261c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024bc:	429a      	cmp	r2, r3
 80024be:	f040 80ad 	bne.w	800261c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024cc:	f040 80a6 	bne.w	800261c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024da:	4619      	mov	r1, r3
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8b7 	bl	8002650 <HAL_UARTEx_RxEventCallback>
      return;
 80024e2:	e09b      	b.n	800261c <HAL_UART_IRQHandler+0x548>
 80024e4:	08002855 	.word	0x08002855
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 808e 	beq.w	8002620 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8089 	beq.w	8002620 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	330c      	adds	r3, #12
 8002514:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002518:	e853 3f00 	ldrex	r3, [r3]
 800251c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800251e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002524:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	330c      	adds	r3, #12
 800252e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002532:	647a      	str	r2, [r7, #68]	@ 0x44
 8002534:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002536:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800253a:	e841 2300 	strex	r3, r2, [r1]
 800253e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e3      	bne.n	800250e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3314      	adds	r3, #20
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	e853 3f00 	ldrex	r3, [r3]
 8002554:	623b      	str	r3, [r7, #32]
   return(result);
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3314      	adds	r3, #20
 8002566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800256a:	633a      	str	r2, [r7, #48]	@ 0x30
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002572:	e841 2300 	strex	r3, r2, [r1]
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1e3      	bne.n	8002546 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	e853 3f00 	ldrex	r3, [r3]
 800259a:	60fb      	str	r3, [r7, #12]
   return(result);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0310 	bic.w	r3, r3, #16
 80025a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	330c      	adds	r3, #12
 80025ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80025b0:	61fa      	str	r2, [r7, #28]
 80025b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	e841 2300 	strex	r3, r2, [r1]
 80025bc:	617b      	str	r3, [r7, #20]
   return(result);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e3      	bne.n	800258c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025ce:	4619      	mov	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f83d 	bl	8002650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025d6:	e023      	b.n	8002620 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d009      	beq.n	80025f8 <HAL_UART_IRQHandler+0x524>
 80025e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f940 	bl	8002876 <UART_Transmit_IT>
    return;
 80025f6:	e014      	b.n	8002622 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00e      	beq.n	8002622 <HAL_UART_IRQHandler+0x54e>
 8002604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f980 	bl	8002916 <UART_EndTransmit_IT>
    return;
 8002616:	e004      	b.n	8002622 <HAL_UART_IRQHandler+0x54e>
    return;
 8002618:	bf00      	nop
 800261a:	e002      	b.n	8002622 <HAL_UART_IRQHandler+0x54e>
      return;
 800261c:	bf00      	nop
 800261e:	e000      	b.n	8002622 <HAL_UART_IRQHandler+0x54e>
      return;
 8002620:	bf00      	nop
  }
}
 8002622:	37e8      	adds	r7, #232	@ 0xe8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002678:	e03b      	b.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d037      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7fe fac7 	bl	8000c14 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <UART_WaitOnFlagUntilTimeout+0x30>
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e03a      	b.n	8002712 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d023      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b80      	cmp	r3, #128	@ 0x80
 80026ae:	d020      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b40      	cmp	r3, #64	@ 0x40
 80026b4:	d01d      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d116      	bne.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f857 	bl	800278e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2208      	movs	r2, #8
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00f      	b.n	8002712 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	429a      	cmp	r2, r3
 800270e:	d0b4      	beq.n	800267a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	4613      	mov	r3, r2
 8002726:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2222      	movs	r2, #34	@ 0x22
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800275e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0220 	orr.w	r2, r2, #32
 800277e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800278e:	b480      	push	{r7}
 8002790:	b095      	sub	sp, #84	@ 0x54
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a0:	e853 3f00 	ldrex	r3, [r3]
 80027a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	330c      	adds	r3, #12
 80027b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80027b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027be:	e841 2300 	strex	r3, r2, [r1]
 80027c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e5      	bne.n	8002796 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3314      	adds	r3, #20
 80027d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3314      	adds	r3, #20
 80027e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1e5      	bne.n	80027ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	2b01      	cmp	r3, #1
 8002804:	d119      	bne.n	800283a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	330c      	adds	r3, #12
 800280c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	e853 3f00 	ldrex	r3, [r3]
 8002814:	60bb      	str	r3, [r7, #8]
   return(result);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f023 0310 	bic.w	r3, r3, #16
 800281c:	647b      	str	r3, [r7, #68]	@ 0x44
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	330c      	adds	r3, #12
 8002824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002826:	61ba      	str	r2, [r7, #24]
 8002828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282a:	6979      	ldr	r1, [r7, #20]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	613b      	str	r3, [r7, #16]
   return(result);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e5      	bne.n	8002806 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002848:	bf00      	nop
 800284a:	3754      	adds	r7, #84	@ 0x54
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff fee7 	bl	800263c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002876:	b480      	push	{r7}
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b21      	cmp	r3, #33	@ 0x21
 8002888:	d13e      	bne.n	8002908 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002892:	d114      	bne.n	80028be <UART_Transmit_IT+0x48>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d110      	bne.n	80028be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	1c9a      	adds	r2, r3, #2
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	621a      	str	r2, [r3, #32]
 80028bc:	e008      	b.n	80028d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	1c59      	adds	r1, r3, #1
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6211      	str	r1, [r2, #32]
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29b      	uxth	r3, r3
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4619      	mov	r1, r3
 80028de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10f      	bne.n	8002904 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002902:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800292c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fe76 	bl	8002628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b08c      	sub	sp, #48	@ 0x30
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b22      	cmp	r3, #34	@ 0x22
 8002960:	f040 80aa 	bne.w	8002ab8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296c:	d115      	bne.n	800299a <UART_Receive_IT+0x54>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d111      	bne.n	800299a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002988:	b29a      	uxth	r2, r3
 800298a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	1c9a      	adds	r2, r3, #2
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	@ 0x28
 8002998:	e024      	b.n	80029e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a8:	d007      	beq.n	80029ba <UART_Receive_IT+0x74>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <UART_Receive_IT+0x82>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e008      	b.n	80029da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4619      	mov	r1, r3
 80029f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d15d      	bne.n	8002ab4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0220 	bic.w	r2, r2, #32
 8002a06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d135      	bne.n	8002aaa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	330c      	adds	r3, #12
 8002a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	e853 3f00 	ldrex	r3, [r3]
 8002a52:	613b      	str	r3, [r7, #16]
   return(result);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f023 0310 	bic.w	r3, r3, #16
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	330c      	adds	r3, #12
 8002a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a64:	623a      	str	r2, [r7, #32]
 8002a66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a68:	69f9      	ldr	r1, [r7, #28]
 8002a6a:	6a3a      	ldr	r2, [r7, #32]
 8002a6c:	e841 2300 	strex	r3, r2, [r1]
 8002a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e5      	bne.n	8002a44 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d10a      	bne.n	8002a9c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fdd4 	bl	8002650 <HAL_UARTEx_RxEventCallback>
 8002aa8:	e002      	b.n	8002ab0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fd ff00 	bl	80008b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e002      	b.n	8002aba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
  }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3730      	adds	r7, #48	@ 0x30
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac8:	b0c0      	sub	sp, #256	@ 0x100
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	68d9      	ldr	r1, [r3, #12]
 8002ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	ea40 0301 	orr.w	r3, r0, r1
 8002aec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b1c:	f021 010c 	bic.w	r1, r1, #12
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	6999      	ldr	r1, [r3, #24]
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	ea40 0301 	orr.w	r3, r0, r1
 8002b4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b8f      	ldr	r3, [pc, #572]	@ (8002d90 <UART_SetConfig+0x2cc>)
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d005      	beq.n	8002b64 <UART_SetConfig+0xa0>
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d94 <UART_SetConfig+0x2d0>)
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d104      	bne.n	8002b6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b64:	f7fe fcd4 	bl	8001510 <HAL_RCC_GetPCLK2Freq>
 8002b68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b6c:	e003      	b.n	8002b76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b6e:	f7fe fcbb 	bl	80014e8 <HAL_RCC_GetPCLK1Freq>
 8002b72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b80:	f040 810c 	bne.w	8002d9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b96:	4622      	mov	r2, r4
 8002b98:	462b      	mov	r3, r5
 8002b9a:	1891      	adds	r1, r2, r2
 8002b9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b9e:	415b      	adcs	r3, r3
 8002ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ba2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	eb12 0801 	adds.w	r8, r2, r1
 8002bac:	4629      	mov	r1, r5
 8002bae:	eb43 0901 	adc.w	r9, r3, r1
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bc6:	4690      	mov	r8, r2
 8002bc8:	4699      	mov	r9, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	eb18 0303 	adds.w	r3, r8, r3
 8002bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	eb49 0303 	adc.w	r3, r9, r3
 8002bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	18db      	adds	r3, r3, r3
 8002bf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	eb42 0303 	adc.w	r3, r2, r3
 8002bfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c08:	f7fd fafc 	bl	8000204 <__aeabi_uldivmod>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4b61      	ldr	r3, [pc, #388]	@ (8002d98 <UART_SetConfig+0x2d4>)
 8002c12:	fba3 2302 	umull	r2, r3, r3, r2
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	011c      	lsls	r4, r3, #4
 8002c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c2c:	4642      	mov	r2, r8
 8002c2e:	464b      	mov	r3, r9
 8002c30:	1891      	adds	r1, r2, r2
 8002c32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c34:	415b      	adcs	r3, r3
 8002c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	eb12 0a01 	adds.w	sl, r2, r1
 8002c42:	4649      	mov	r1, r9
 8002c44:	eb43 0b01 	adc.w	fp, r3, r1
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c5c:	4692      	mov	sl, r2
 8002c5e:	469b      	mov	fp, r3
 8002c60:	4643      	mov	r3, r8
 8002c62:	eb1a 0303 	adds.w	r3, sl, r3
 8002c66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	18db      	adds	r3, r3, r3
 8002c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c8e:	4613      	mov	r3, r2
 8002c90:	eb42 0303 	adc.w	r3, r2, r3
 8002c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c9e:	f7fd fab1 	bl	8000204 <__aeabi_uldivmod>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8002d98 <UART_SetConfig+0x2d4>)
 8002caa:	fba3 2301 	umull	r2, r3, r3, r1
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2264      	movs	r2, #100	@ 0x64
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	1acb      	subs	r3, r1, r3
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cbe:	4b36      	ldr	r3, [pc, #216]	@ (8002d98 <UART_SetConfig+0x2d4>)
 8002cc0:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ccc:	441c      	add	r4, r3
 8002cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002cdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	1891      	adds	r1, r2, r2
 8002ce6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ce8:	415b      	adcs	r3, r3
 8002cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cf0:	4641      	mov	r1, r8
 8002cf2:	1851      	adds	r1, r2, r1
 8002cf4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	414b      	adcs	r3, r1
 8002cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d08:	4659      	mov	r1, fp
 8002d0a:	00cb      	lsls	r3, r1, #3
 8002d0c:	4651      	mov	r1, sl
 8002d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d12:	4651      	mov	r1, sl
 8002d14:	00ca      	lsls	r2, r1, #3
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4642      	mov	r2, r8
 8002d1e:	189b      	adds	r3, r3, r2
 8002d20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d24:	464b      	mov	r3, r9
 8002d26:	460a      	mov	r2, r1
 8002d28:	eb42 0303 	adc.w	r3, r2, r3
 8002d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d44:	460b      	mov	r3, r1
 8002d46:	18db      	adds	r3, r3, r3
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	eb42 0303 	adc.w	r3, r2, r3
 8002d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d5a:	f7fd fa53 	bl	8000204 <__aeabi_uldivmod>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <UART_SetConfig+0x2d4>)
 8002d64:	fba3 1302 	umull	r1, r3, r3, r2
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	2164      	movs	r1, #100	@ 0x64
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	3332      	adds	r3, #50	@ 0x32
 8002d76:	4a08      	ldr	r2, [pc, #32]	@ (8002d98 <UART_SetConfig+0x2d4>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	f003 0207 	and.w	r2, r3, #7
 8002d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4422      	add	r2, r4
 8002d8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d8c:	e106      	b.n	8002f9c <UART_SetConfig+0x4d8>
 8002d8e:	bf00      	nop
 8002d90:	40011000 	.word	0x40011000
 8002d94:	40011400 	.word	0x40011400
 8002d98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002da6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002daa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dae:	4642      	mov	r2, r8
 8002db0:	464b      	mov	r3, r9
 8002db2:	1891      	adds	r1, r2, r2
 8002db4:	6239      	str	r1, [r7, #32]
 8002db6:	415b      	adcs	r3, r3
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dbe:	4641      	mov	r1, r8
 8002dc0:	1854      	adds	r4, r2, r1
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	eb43 0501 	adc.w	r5, r3, r1
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	00eb      	lsls	r3, r5, #3
 8002dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dd6:	00e2      	lsls	r2, r4, #3
 8002dd8:	4614      	mov	r4, r2
 8002dda:	461d      	mov	r5, r3
 8002ddc:	4643      	mov	r3, r8
 8002dde:	18e3      	adds	r3, r4, r3
 8002de0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002de4:	464b      	mov	r3, r9
 8002de6:	eb45 0303 	adc.w	r3, r5, r3
 8002dea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002dfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	008b      	lsls	r3, r1, #2
 8002e0e:	4621      	mov	r1, r4
 8002e10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e14:	4621      	mov	r1, r4
 8002e16:	008a      	lsls	r2, r1, #2
 8002e18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e1c:	f7fd f9f2 	bl	8000204 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4b60      	ldr	r3, [pc, #384]	@ (8002fa8 <UART_SetConfig+0x4e4>)
 8002e26:	fba3 2302 	umull	r2, r3, r3, r2
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	011c      	lsls	r4, r3, #4
 8002e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e32:	2200      	movs	r2, #0
 8002e34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e40:	4642      	mov	r2, r8
 8002e42:	464b      	mov	r3, r9
 8002e44:	1891      	adds	r1, r2, r2
 8002e46:	61b9      	str	r1, [r7, #24]
 8002e48:	415b      	adcs	r3, r3
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e50:	4641      	mov	r1, r8
 8002e52:	1851      	adds	r1, r2, r1
 8002e54:	6139      	str	r1, [r7, #16]
 8002e56:	4649      	mov	r1, r9
 8002e58:	414b      	adcs	r3, r1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e68:	4659      	mov	r1, fp
 8002e6a:	00cb      	lsls	r3, r1, #3
 8002e6c:	4651      	mov	r1, sl
 8002e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e72:	4651      	mov	r1, sl
 8002e74:	00ca      	lsls	r2, r1, #3
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	189b      	adds	r3, r3, r2
 8002e80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e84:	464b      	mov	r3, r9
 8002e86:	460a      	mov	r2, r1
 8002e88:	eb42 0303 	adc.w	r3, r2, r3
 8002e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	008b      	lsls	r3, r1, #2
 8002eac:	4641      	mov	r1, r8
 8002eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	008a      	lsls	r2, r1, #2
 8002eb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002eba:	f7fd f9a3 	bl	8000204 <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4b38      	ldr	r3, [pc, #224]	@ (8002fa8 <UART_SetConfig+0x4e4>)
 8002ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2264      	movs	r2, #100	@ 0x64
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	1acb      	subs	r3, r1, r3
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	3332      	adds	r3, #50	@ 0x32
 8002ed8:	4a33      	ldr	r2, [pc, #204]	@ (8002fa8 <UART_SetConfig+0x4e4>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ee4:	441c      	add	r4, r3
 8002ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eea:	2200      	movs	r2, #0
 8002eec:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eee:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ef0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	464b      	mov	r3, r9
 8002ef8:	1891      	adds	r1, r2, r2
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	415b      	adcs	r3, r3
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f04:	4641      	mov	r1, r8
 8002f06:	1851      	adds	r1, r2, r1
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	4649      	mov	r1, r9
 8002f0c:	414b      	adcs	r3, r1
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	00cb      	lsls	r3, r1, #3
 8002f20:	4651      	mov	r1, sl
 8002f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f26:	4651      	mov	r1, sl
 8002f28:	00ca      	lsls	r2, r1, #3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4642      	mov	r2, r8
 8002f32:	189b      	adds	r3, r3, r2
 8002f34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f36:	464b      	mov	r3, r9
 8002f38:	460a      	mov	r2, r1
 8002f3a:	eb42 0303 	adc.w	r3, r2, r3
 8002f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f58:	4649      	mov	r1, r9
 8002f5a:	008b      	lsls	r3, r1, #2
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f62:	4641      	mov	r1, r8
 8002f64:	008a      	lsls	r2, r1, #2
 8002f66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f6a:	f7fd f94b 	bl	8000204 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <UART_SetConfig+0x4e4>)
 8002f74:	fba3 1302 	umull	r1, r3, r3, r2
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	2164      	movs	r1, #100	@ 0x64
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	3332      	adds	r3, #50	@ 0x32
 8002f86:	4a08      	ldr	r2, [pc, #32]	@ (8002fa8 <UART_SetConfig+0x4e4>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	f003 020f 	and.w	r2, r3, #15
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4422      	add	r2, r4
 8002f9a:	609a      	str	r2, [r3, #8]
}
 8002f9c:	bf00      	nop
 8002f9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa8:	51eb851f 	.word	0x51eb851f

08002fac <memset>:
 8002fac:	4402      	add	r2, r0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <memset+0xa>
 8002fb4:	4770      	bx	lr
 8002fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fba:	e7f9      	b.n	8002fb0 <memset+0x4>

08002fbc <__libc_init_array>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8002ff4 <__libc_init_array+0x38>)
 8002fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8002ff8 <__libc_init_array+0x3c>)
 8002fc2:	1b64      	subs	r4, r4, r5
 8002fc4:	10a4      	asrs	r4, r4, #2
 8002fc6:	2600      	movs	r6, #0
 8002fc8:	42a6      	cmp	r6, r4
 8002fca:	d109      	bne.n	8002fe0 <__libc_init_array+0x24>
 8002fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8002ffc <__libc_init_array+0x40>)
 8002fce:	4c0c      	ldr	r4, [pc, #48]	@ (8003000 <__libc_init_array+0x44>)
 8002fd0:	f000 f818 	bl	8003004 <_init>
 8002fd4:	1b64      	subs	r4, r4, r5
 8002fd6:	10a4      	asrs	r4, r4, #2
 8002fd8:	2600      	movs	r6, #0
 8002fda:	42a6      	cmp	r6, r4
 8002fdc:	d105      	bne.n	8002fea <__libc_init_array+0x2e>
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe4:	4798      	blx	r3
 8002fe6:	3601      	adds	r6, #1
 8002fe8:	e7ee      	b.n	8002fc8 <__libc_init_array+0xc>
 8002fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fee:	4798      	blx	r3
 8002ff0:	3601      	adds	r6, #1
 8002ff2:	e7f2      	b.n	8002fda <__libc_init_array+0x1e>
 8002ff4:	0800303c 	.word	0x0800303c
 8002ff8:	0800303c 	.word	0x0800303c
 8002ffc:	0800303c 	.word	0x0800303c
 8003000:	08003040 	.word	0x08003040

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
