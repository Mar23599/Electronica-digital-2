
ED2 LAB1 - intento2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000330  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000810  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000697  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045c  00000000  00000000  0000133f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000433  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fa  00000000  00000000  00001cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ea5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_3>
  10:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  9e:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
// NON-Interrupt subroutines


void setup(){
	
	cli();
  a6:	f8 94       	cli
	
	//Configuración del PRESCALADOR del sistema
	
	CLKPR = (1 << CLKPCE); // Habilitar cambio de prescaldor
  a8:	e1 e6       	ldi	r30, 0x61	; 97
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 e8       	ldi	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS1); // Aplicar prescalador de 4 -> FR_CPU 4MHz
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
	
	
	//Salidas
	
	DDRD = 0xFF; // Todo puerto D sera un salida
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; // Puerto D inicia totalmente apagado
  b8:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3); // PB0, PB1, PB2 y PB3 configurados como salidas del jugador A
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	8f 60       	ori	r24, 0x0F	; 15
  be:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)); // Inicialmente apagados
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	85 b9       	out	0x05, r24	; 5
	
	DDRC |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3); // PC0, PC1, PC2 y PC3 configurados como salidas del jugador B
  c6:	87 b1       	in	r24, 0x07	; 7
  c8:	8f 60       	ori	r24, 0x0F	; 15
  ca:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)); // Inicialmente apagados
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	88 b9       	out	0x08, r24	; 8
	
	
	//Entradas
	
	DDRC &= ~((1 << 4)|(1 << 5)); // COnfigurar PC4 y PC5 como entrada para jugador A y B
  d2:	87 b1       	in	r24, 0x07	; 7
  d4:	8f 7c       	andi	r24, 0xCF	; 207
  d6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << 4)|(1 << 5); // Activar pull ups
  d8:	88 b1       	in	r24, 0x08	; 8
  da:	80 63       	ori	r24, 0x30	; 48
  dc:	88 b9       	out	0x08, r24	; 8
	
	DDRB &= ~(1 << 4);// Configurar PB5 como entrada 
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	84 b9       	out	0x04, r24	; 4
	PORTB |=(1 << 4); // Activar pull up
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	85 b9       	out	0x05, r24	; 5
	
	//Interrupciones
	
	//interrupciones pin change en puerto C y mascara para PC4 y PC5. Puerto B PB5.
	
	PCICR |= (1 << PCIE1)|(1 << PCIE0); // Habilitar interrupciones por pin change en puerto C y B
  ea:	e8 e6       	ldi	r30, 0x68	; 104
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	80 83       	st	Z, r24
	
	PCMSK1 |= (1 << PCINT12)|(1 << PCINT13); // Mascara para habilitar interrupciones en PC4 y PC5
  f4:	ec e6       	ldi	r30, 0x6C	; 108
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 63       	ori	r24, 0x30	; 48
  fc:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT4); // Mascara para habilitar interrupciones en PB5
  fe:	eb e6       	ldi	r30, 0x6B	; 107
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 61       	ori	r24, 0x10	; 16
 106:	80 83       	st	Z, r24
	
	// Interrupciones de modo CTC del timer0 y configuracion del timer0
	
	
	TCCR0A |= (1 << WGM01); // Configurar timer en modo CTC
 108:	84 b5       	in	r24, 0x24	; 36
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00); //Configurar prescalador de 1024
 10e:	85 b5       	in	r24, 0x25	; 37
 110:	85 60       	ori	r24, 0x05	; 5
 112:	85 bd       	out	0x25, r24	; 37
	OCR0A = 195; // Se busca interrumpir cada 5 ms
 114:	83 ec       	ldi	r24, 0xC3	; 195
 116:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 &= ~(1 << OCIE0A); // NO habilitar interrupciones por comparacion A, se habilitará despues
 118:	ee e6       	ldi	r30, 0x6E	; 110
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8d 7f       	andi	r24, 0xFD	; 253
 120:	80 83       	st	Z, r24
	
	
	
	
	
	sei();
 122:	78 94       	sei
 124:	08 95       	ret

00000126 <PrintA>:
}


void PrintA(	uint8_t contadorA	){
	
	switch (contadorA){
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	81 f0       	breq	.+32     	; 0x14a <PrintA+0x24>
 12a:	18 f4       	brcc	.+6      	; 0x132 <PrintA+0xc>
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	31 f0       	breq	.+12     	; 0x13c <PrintA+0x16>
 130:	08 95       	ret
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	89 f0       	breq	.+34     	; 0x158 <PrintA+0x32>
 136:	84 30       	cpi	r24, 0x04	; 4
 138:	b1 f0       	breq	.+44     	; 0x166 <PrintA+0x40>
 13a:	08 95       	ret
		
	case 1:
	PORTB &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)); // Apagar todos los pines
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	80 7f       	andi	r24, 0xF0	; 240
 140:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 0); //Encender el primer bit
 142:	85 b1       	in	r24, 0x05	; 5
 144:	81 60       	ori	r24, 0x01	; 1
 146:	85 b9       	out	0x05, r24	; 5
	break;
 148:	08 95       	ret
	
	case 2:
	PORTB &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)); // Apagar todos los pines
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 1); //Encender el segundo bit
 150:	85 b1       	in	r24, 0x05	; 5
 152:	82 60       	ori	r24, 0x02	; 2
 154:	85 b9       	out	0x05, r24	; 5
	break;
 156:	08 95       	ret
	
	case 3:
	PORTB &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)); // Apagar todos los pines
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 2); //Encender el tercer bit
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	84 60       	ori	r24, 0x04	; 4
 162:	85 b9       	out	0x05, r24	; 5
	break;
 164:	08 95       	ret
	
	case 4:
	PORTB &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)); // Apagar todos los pines
 166:	85 b1       	in	r24, 0x05	; 5
 168:	80 7f       	andi	r24, 0xF0	; 240
 16a:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 3); //Encender el cuarto bit
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	85 b9       	out	0x05, r24	; 5
	
	flag_winner = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 178:	08 95       	ret

0000017a <PrintB>:
	
}

void PrintB(	uint8_t contadorB	){
	
	switch (contadorB){
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	81 f0       	breq	.+32     	; 0x19e <PrintB+0x24>
 17e:	18 f4       	brcc	.+6      	; 0x186 <PrintB+0xc>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	31 f0       	breq	.+12     	; 0x190 <PrintB+0x16>
 184:	08 95       	ret
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	89 f0       	breq	.+34     	; 0x1ac <PrintB+0x32>
 18a:	84 30       	cpi	r24, 0x04	; 4
 18c:	b1 f0       	breq	.+44     	; 0x1ba <PrintB+0x40>
 18e:	08 95       	ret
		
	case 1:
	PORTC &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)); // Apagar todos los pines
 190:	88 b1       	in	r24, 0x08	; 8
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << 0); //Encender el primer bit
 196:	88 b1       	in	r24, 0x08	; 8
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	88 b9       	out	0x08, r24	; 8
	break;
 19c:	08 95       	ret
	
	case 2:
	PORTC &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)); // Apagar todos los pines
 19e:	88 b1       	in	r24, 0x08	; 8
 1a0:	80 7f       	andi	r24, 0xF0	; 240
 1a2:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << 1); //Encender el segundo bit
 1a4:	88 b1       	in	r24, 0x08	; 8
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	88 b9       	out	0x08, r24	; 8
	break;
 1aa:	08 95       	ret
	
	case 3:
	PORTC &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)); // Apagar todos los pines
 1ac:	88 b1       	in	r24, 0x08	; 8
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << 2); //Encender el tercer bit
 1b2:	88 b1       	in	r24, 0x08	; 8
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	88 b9       	out	0x08, r24	; 8
	break;
 1b8:	08 95       	ret
	
	case 4:
	PORTC &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)); // Apagar todos los pines
 1ba:	88 b1       	in	r24, 0x08	; 8
 1bc:	80 7f       	andi	r24, 0xF0	; 240
 1be:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << 3); //Encender el cuarto bit
 1c0:	88 b1       	in	r24, 0x08	; 8
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	88 b9       	out	0x08, r24	; 8
	
	flag_winner = 2;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1cc:	08 95       	ret

000001ce <winner>:
}

void winner(	uint8_t winner_flag		){
	
	
	if ( winner_flag == 1)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	51 f4       	brne	.+20     	; 0x1e6 <winner+0x18>
	{
		// Si gana jugador A
		PORTB |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3); // Encender los pines del ganador A
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	8f 60       	ori	r24, 0x0F	; 15
 1d6:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~(	(1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)	); //Apagar todos los pines del perdedor B
 1d8:	88 b1       	in	r24, 0x08	; 8
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	88 b9       	out	0x08, r24	; 8
		PORTD = display_7seg[1];
 1de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	08 95       	ret
		
	} 
	else if ( winner_flag == 2)
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	49 f4       	brne	.+18     	; 0x1fc <winner+0x2e>
	{
		// Si gana jugador B
		PORTC |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3); // Encender los pines del ganador B
 1ea:	88 b1       	in	r24, 0x08	; 8
 1ec:	8f 60       	ori	r24, 0x0F	; 15
 1ee:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~(	(1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)	); //Apagar todos los pines del perdedor A
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	85 b9       	out	0x05, r24	; 5
		PORTD = display_7seg [2];
 1f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	08 95       	ret

000001fe <main>:
// Main Function

int main(void)
{
	
	setup();
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	while (1)
	{
		
		
		
		if ( flag_winner != 0)
 202:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 206:	88 23       	and	r24, r24
 208:	31 f0       	breq	.+12     	; 0x216 <main+0x18>
		{
			cli();
 20a:	f8 94       	cli
			winner(flag_winner);
 20c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 210:	0e 94 e7 00 	call	0x1ce	; 0x1ce <winner>
 214:	f6 cf       	rjmp	.-20     	; 0x202 <main+0x4>
		} else {
			
			PrintA( counter_playerA );
 216:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter_playerA>
 21a:	0e 94 93 00 	call	0x126	; 0x126 <PrintA>
			PrintB( counter_playerB );
 21e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <counter_playerB>
 222:	0e 94 bd 00 	call	0x17a	; 0x17a <PrintB>
 226:	ed cf       	rjmp	.-38     	; 0x202 <main+0x4>

00000228 <__vector_4>:
/****************************************/
// Interrupt routines

// Interrupciones pin change en puerto C

ISR (	PCINT1_vect	){
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
	
	if ( flag_game_start == 1)
 234:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag_game_start>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	71 f4       	brne	.+28     	; 0x258 <__vector_4+0x30>
	{
	
	
	
		if (	!(PINC & (1 << 4))	)
 23c:	34 99       	sbic	0x06, 4	; 6
 23e:	05 c0       	rjmp	.+10     	; 0x24a <__vector_4+0x22>
		{
		counter_playerA = counter_playerA + 1; // incrementar el contador de jugador A
 240:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter_playerA>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <counter_playerA>
		} 
	
		if (	!(PINC & (1 << 5))	)
 24a:	35 99       	sbic	0x06, 5	; 6
 24c:	05 c0       	rjmp	.+10     	; 0x258 <__vector_4+0x30>
		{
		counter_playerB = counter_playerB + 1; // Incrementar contador de jugador B
 24e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <counter_playerB>
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <counter_playerB>
		}
	
	}
	
	
	}
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_3>:
	
	
// Interrupciones pin change en puerto B
ISR (	PCINT0_vect	){
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	8f 93       	push	r24
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31

	
	if (	!(PINB & (1 << 4))	)
 274:	1c 99       	sbic	0x03, 4	; 3
 276:	05 c0       	rjmp	.+10     	; 0x282 <__vector_3+0x1e>
	{	
		TIMSK0 |= (1 << OCIE0A); // habilitar interrupciones del timer 0
 278:	ee e6       	ldi	r30, 0x6E	; 110
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	80 83       	st	Z, r24
	}


}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__vector_14>:
	
	


ISR (TIMER0_COMPA_vect){
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	8f 93       	push	r24
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
	
	sec_counter = sec_counter +1 ; // Cada 5 ms aumentar la cuenta de sec_counter
 2a2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sec_counter>
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sec_counter>
	
	
	if (sec_counter == 20) // Cuando se alcanze un segundo
 2ac:	84 31       	cpi	r24, 0x14	; 20
 2ae:	39 f4       	brne	.+14     	; 0x2be <__vector_14+0x2c>
	{
		time_counter = time_counter +1 ; // Cada segundo, incrementar la cuenta de time counter.
 2b0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <time_counter>
 2b4:	8f 5f       	subi	r24, 0xFF	; 255
 2b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <time_counter>
		sec_counter = 0; //Reiniciar la cuenta desde 0
 2ba:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sec_counter>
	}
	
	switch (time_counter){
 2be:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <time_counter>
 2c2:	83 30       	cpi	r24, 0x03	; 3
 2c4:	a1 f0       	breq	.+40     	; 0x2ee <__vector_14+0x5c>
 2c6:	28 f4       	brcc	.+10     	; 0x2d2 <__vector_14+0x40>
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	49 f0       	breq	.+18     	; 0x2de <__vector_14+0x4c>
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	59 f0       	breq	.+22     	; 0x2e6 <__vector_14+0x54>
 2d0:	25 c0       	rjmp	.+74     	; 0x31c <__vector_14+0x8a>
 2d2:	85 30       	cpi	r24, 0x05	; 5
 2d4:	a1 f0       	breq	.+40     	; 0x2fe <__vector_14+0x6c>
 2d6:	78 f0       	brcs	.+30     	; 0x2f6 <__vector_14+0x64>
 2d8:	86 30       	cpi	r24, 0x06	; 6
 2da:	a9 f0       	breq	.+42     	; 0x306 <__vector_14+0x74>
 2dc:	1f c0       	rjmp	.+62     	; 0x31c <__vector_14+0x8a>
		
		
		case 1: PORTD = display_7seg[5];
 2de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 2e2:	8b b9       	out	0x0b, r24	; 11
		break;
 2e4:	1b c0       	rjmp	.+54     	; 0x31c <__vector_14+0x8a>
		
		case 2: PORTD = display_7seg[4];
 2e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 2ea:	8b b9       	out	0x0b, r24	; 11
		break;
 2ec:	17 c0       	rjmp	.+46     	; 0x31c <__vector_14+0x8a>
		case 3: PORTD = display_7seg[3];
 2ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2f2:	8b b9       	out	0x0b, r24	; 11
		break;
 2f4:	13 c0       	rjmp	.+38     	; 0x31c <__vector_14+0x8a>
		case 4: PORTD = display_7seg[2];
 2f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2fa:	8b b9       	out	0x0b, r24	; 11
		break;
 2fc:	0f c0       	rjmp	.+30     	; 0x31c <__vector_14+0x8a>
		case 5: PORTD = display_7seg[1];
 2fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 302:	8b b9       	out	0x0b, r24	; 11
		break;
 304:	0b c0       	rjmp	.+22     	; 0x31c <__vector_14+0x8a>
		case 6: PORTD = display_7seg[0];
 306:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 30a:	8b b9       	out	0x0b, r24	; 11
		
		//Desabilitar el timer0 y levantar bandera de inicio de juego
		
		flag_game_start = 1; // Iniciar el juego
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flag_game_start>
		TIMSK0 &= ~(1 << OCIE0A); // Desahbilitar interrupciones del timer0
 312:	ee e6       	ldi	r30, 0x6E	; 110
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	8d 7f       	andi	r24, 0xFD	; 253
 31a:	80 83       	st	Z, r24
		
		
	}
	
	
}
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
