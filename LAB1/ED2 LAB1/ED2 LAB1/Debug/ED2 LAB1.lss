
ED2 LAB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001d4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008be  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f4  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000358  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  0000162c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ff  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000233  00000000  00000000  00001a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001cd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
// NON-Interrupt subroutines


void setup(){

	cli(); // Desabiliar interrupciones globales
  a6:	f8 94       	cli
	
	UCSR0B &= ~((1 << TXEN0) | (1 << RXEN0));// Desabilitar UART
  a8:	e1 ec       	ldi	r30, 0xC1	; 193
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	87 7e       	andi	r24, 0xE7	; 231
  b0:	80 83       	st	Z, r24
	// ***********************************************************************************************
	//Configuración de pines de entrada
	
	//Puerto C con pull-up activado: PC0, PC1, PC2
	
	DDRC &= ~( (1 << PushB0)|(1 << PushB1)|(1 << PushB2) ); // Pines de PC declarados como entrada
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	87 b9       	out	0x07, r24	; 7
	PORTC = (1 << PushB0)|(1 << PushB1)|(1 << PushB2);		//Activiar pull up
  b8:	87 e0       	ldi	r24, 0x07	; 7
  ba:	88 b9       	out	0x08, r24	; 8
	
	//Configuración de pines de salida
	
	//Puerto D completo activado como salida. DP no se utiliza en esta versión. 
	
	DDRD = 0xFF; //Pines de PD declarados como salida
  bc:	9f ef       	ldi	r25, 0xFF	; 255
  be:	9a b9       	out	0x0a, r25	; 10
	
	
	//Puerto B para control de multiplexado: PB0, PB1, PB2
	
	DDRB = (1 << 0)| (1 << 1) | (1 << 2);
  c0:	84 b9       	out	0x04, r24	; 4
	
	//Configuración de interrupciones
	
	//Interrupciones en el puerto C:
	
	PCICR = (1 << PCIE1); // Habilitar interrupciones del Puerto C
  c2:	92 e0       	ldi	r25, 0x02	; 2
  c4:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK1 = (1 << PCINT8)|(1 << PCINT9)|(1 << PCINT10); // Mascara para habilitarinterrupciones en PC0, PC1 y PC2
  c8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	
	
	
	

	sei(); // Habilitar interrupciones globales
  cc:	78 94       	sei
  ce:	08 95       	ret

000000d0 <race_counter>:
}


void race_counter(){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	60 97       	sbiw	r28, 0x10	; 16
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
	
	// Arreglo que almacena contenido de display

	uint8_t display_7seg[16] = {
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	e0 e0       	ldi	r30, 0x00	; 0
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	de 01       	movw	r26, r28
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	01 90       	ld	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	8a 95       	dec	r24
  f4:	e1 f7       	brne	.-8      	; 0xee <race_counter+0x1e>
			0x5E, // d
			0x79, // E
			0x71  // F
		};
	
	PORTD =0x00;	
  f6:	1b b8       	out	0x0b, r1	; 11
	PORTD = display_7seg[5]; // Imprimir 5
  f8:	8e 81       	ldd	r24, Y+6	; 0x06
  fa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	83 ed       	ldi	r24, 0xD3	; 211
 100:	90 e3       	ldi	r25, 0x30	; 48
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <race_counter+0x32>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <race_counter+0x3c>
 10c:	00 00       	nop
	_delay_ms(1000);
	
	PORTD =0x00;
 10e:	1b b8       	out	0x0b, r1	; 11
	PORTD = display_7seg[4]; // Imprimir 4
 110:	8d 81       	ldd	r24, Y+5	; 0x05
 112:	8b b9       	out	0x0b, r24	; 11
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	83 ed       	ldi	r24, 0xD3	; 211
 118:	90 e3       	ldi	r25, 0x30	; 48
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <race_counter+0x4a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <race_counter+0x54>
 124:	00 00       	nop
	_delay_ms(1000);
	
	PORTD =0x00;
 126:	1b b8       	out	0x0b, r1	; 11
	PORTD = display_7seg[3]; // Imprimir 3
 128:	8c 81       	ldd	r24, Y+4	; 0x04
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	83 ed       	ldi	r24, 0xD3	; 211
 130:	90 e3       	ldi	r25, 0x30	; 48
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <race_counter+0x62>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <race_counter+0x6c>
 13c:	00 00       	nop
	_delay_ms(1000);
	
	PORTD =0x00;
 13e:	1b b8       	out	0x0b, r1	; 11
	PORTD = display_7seg[2]; // Imprimir 2
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	8b b9       	out	0x0b, r24	; 11
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	83 ed       	ldi	r24, 0xD3	; 211
 148:	90 e3       	ldi	r25, 0x30	; 48
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <race_counter+0x7a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <race_counter+0x84>
 154:	00 00       	nop
	_delay_ms(1000);
	
	PORTD =0x00;
 156:	1b b8       	out	0x0b, r1	; 11
	PORTD = display_7seg[1]; // Imprimir 1
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	83 ed       	ldi	r24, 0xD3	; 211
 160:	90 e3       	ldi	r25, 0x30	; 48
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <race_counter+0x92>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <race_counter+0x9c>
 16c:	00 00       	nop
	_delay_ms(1000);
	
	PORTD =0x00;
 16e:	1b b8       	out	0x0b, r1	; 11
	PORTD = display_7seg[0]; // Imprimir 0
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	8b b9       	out	0x0b, r24	; 11
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	83 ed       	ldi	r24, 0xD3	; 211
 178:	90 e3       	ldi	r25, 0x30	; 48
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <race_counter+0xaa>
 182:	00 c0       	rjmp	.+0      	; 0x184 <race_counter+0xb4>
 184:	00 00       	nop
	_delay_ms(1000);
	
	
}
 186:	60 96       	adiw	r28, 0x10	; 16
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <main>:
// Main Function

int main(void)
{
	
	setup();
 198:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>

	
	while (1)
	{
		
		if ( race_start_flag == 1)
 19c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x4>
		{
			race_counter(); // Efecutar funcione de incio de carrera
 1a4:	0e 94 68 00 	call	0xd0	; 0xd0 <race_counter>
			race_start_flag = 0; // apagar bandera de inicio de carrera
 1a8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 1ac:	f7 cf       	rjmp	.-18     	; 0x19c <main+0x4>

000001ae <__vector_4>:
// Interrupt routines

//Interrupciones del puerto C


ISR(PCINT1_vect){
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
	
	if (	!(PINC & (1 << 0))	){
 1ba:	30 99       	sbic	0x06, 0	; 6
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <__vector_4+0x16>
		
		race_start_flag = 1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		
	}
	
	
}
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
