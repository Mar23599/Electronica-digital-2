
Master_P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004ec  00800100  00001312  000013a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001312  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008005ec  008005ec  00001892  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002016  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adf  00000000  00000000  00003a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f17  00000000  00000000  00004575  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  0000548c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ef  00000000  00000000  00005894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012f7  00000000  00000000  00006083  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000737a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e1       	ldi	r30, 0x12	; 18
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3e       	cpi	r26, 0xEC	; 236
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	ac ee       	ldi	r26, 0xEC	; 236
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3f       	cpi	r26, 0xF0	; 240
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <main>
      9e:	0c 94 87 09 	jmp	0x130e	; 0x130e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_init>:

#include "Ale-lib-UART.h"

void UART_init(uint8_t IE){
	
	UBRR0H = 0x00;
      a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x67; // UBRR0 = 103 = 0x0067 para 9600 bauds
      aa:	97 e6       	ldi	r25, 0x67	; 103
      ac:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Limpiar registros de configuraciones previas
	
	UCSR0B = 0x00;
      b0:	a1 ec       	ldi	r26, 0xC1	; 193
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	1c 92       	st	X, r1
	UCSR0C = 0x00; 
      b6:	e2 ec       	ldi	r30, 0xC2	; 194
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	10 82       	st	Z, r1
	
	//Configurar modo asíncrono, 8 bits, 1 stop bit, sin pararidad
	
	UCSR0C &= ~( (1 << UMSEL01) | (1 << UMSEL00) ); // Configuracion de modo ASINCRONO
      bc:	90 81       	ld	r25, Z
      be:	9f 73       	andi	r25, 0x3F	; 63
      c0:	90 83       	st	Z, r25
	
	UCSR0C &= ~(	(1 << UPM01)|(1 << UPM00)	); // Sin paridad
      c2:	90 81       	ld	r25, Z
      c4:	9f 7c       	andi	r25, 0xCF	; 207
      c6:	90 83       	st	Z, r25
	
	UCSR0C &= ~(1 << USBS0); // 1 bit de stop
      c8:	90 81       	ld	r25, Z
      ca:	97 7f       	andi	r25, 0xF7	; 247
      cc:	90 83       	st	Z, r25
	
	
	UCSR0C |= (1 << UCSZ01)|(1 << UCSZ00); // 8 bits de datos
      ce:	90 81       	ld	r25, Z
      d0:	96 60       	ori	r25, 0x06	; 6
      d2:	90 83       	st	Z, r25
	UCSR0B |= (1 << TXEN0)|(1 << RXEN0); // Habilitar transmisor y receptor
      d4:	9c 91       	ld	r25, X
      d6:	98 61       	ori	r25, 0x18	; 24
      d8:	9c 93       	st	X, r25
	
	if ( IE == 1)
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	29 f4       	brne	.+10     	; 0xe8 <UART_init+0x42>
	{
		UCSR0B |= (1 << RXCIE0); // Si IE es 1 -> activar las interrupciones por UART
      de:	e1 ec       	ldi	r30, 0xC1	; 193
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 81       	ld	r24, Z
      e4:	80 68       	ori	r24, 0x80	; 128
      e6:	80 83       	st	Z, r24
      e8:	08 95       	ret

000000ea <UART_SendChar>:


void UART_SendChar(char c){
	
	
	while (	!((UCSR0A) & (1 << UDRE0))	); // Esperara que el buffer esté vacio
      ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      ee:	95 ff       	sbrs	r25, 5
      f0:	fc cf       	rjmp	.-8      	; 0xea <UART_SendChar>
	UDR0 = c; //Escribir el caracter a transmitir
      f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      f6:	08 95       	ret

000000f8 <UART_SendString>:
	
}

void UART_SendString(const char *str) {
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	ec 01       	movw	r28, r24
	if (str == NULL) return;  // Protección contra NULL
      fe:	89 2b       	or	r24, r25
     100:	21 f4       	brne	.+8      	; 0x10a <UART_SendString+0x12>
     102:	06 c0       	rjmp	.+12     	; 0x110 <UART_SendString+0x18>
	
	while (*str != '\0') {
		UART_SendChar(*str++);
     104:	21 96       	adiw	r28, 0x01	; 1
     106:	0e 94 75 00 	call	0xea	; 0xea <UART_SendChar>
}

void UART_SendString(const char *str) {
	if (str == NULL) return;  // Protección contra NULL
	
	while (*str != '\0') {
     10a:	88 81       	ld	r24, Y
     10c:	81 11       	cpse	r24, r1
     10e:	fa cf       	rjmp	.-12     	; 0x104 <UART_SendString+0xc>
		UART_SendChar(*str++);
	}
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	08 95       	ret

00000116 <I2C_Master_Init>:
	*data = I2C_Master_Read(0);
	
	// Finalizar comunicación
	I2C_Master_Stop();
	return 1; // Éxito
}
     116:	0f 93       	push	r16
     118:	1f 93       	push	r17
     11a:	cf 93       	push	r28
     11c:	8b 01       	movw	r16, r22
     11e:	9c 01       	movw	r18, r24
     120:	c4 2f       	mov	r28, r20
     122:	87 b1       	in	r24, 0x07	; 7
     124:	8f 7c       	andi	r24, 0xCF	; 207
     126:	87 b9       	out	0x07, r24	; 7
     128:	88 b1       	in	r24, 0x08	; 8
     12a:	8f 7e       	andi	r24, 0xEF	; 239
     12c:	88 b9       	out	0x08, r24	; 8
     12e:	44 30       	cpi	r20, 0x04	; 4
     130:	79 f0       	breq	.+30     	; 0x150 <I2C_Master_Init+0x3a>
     132:	18 f4       	brcc	.+6      	; 0x13a <I2C_Master_Init+0x24>
     134:	41 30       	cpi	r20, 0x01	; 1
     136:	31 f0       	breq	.+12     	; 0x144 <I2C_Master_Init+0x2e>
     138:	23 c0       	rjmp	.+70     	; 0x180 <I2C_Master_Init+0x6a>
     13a:	40 31       	cpi	r20, 0x10	; 16
     13c:	91 f0       	breq	.+36     	; 0x162 <I2C_Master_Init+0x4c>
     13e:	40 34       	cpi	r20, 0x40	; 64
     140:	c9 f0       	breq	.+50     	; 0x174 <I2C_Master_Init+0x5e>
     142:	1e c0       	rjmp	.+60     	; 0x180 <I2C_Master_Init+0x6a>
     144:	e9 eb       	ldi	r30, 0xB9	; 185
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	8c 7f       	andi	r24, 0xFC	; 252
     14c:	80 83       	st	Z, r24
     14e:	1e c0       	rjmp	.+60     	; 0x18c <I2C_Master_Init+0x76>
     150:	e9 eb       	ldi	r30, 0xB9	; 185
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	8d 7f       	andi	r24, 0xFD	; 253
     158:	80 83       	st	Z, r24
     15a:	80 81       	ld	r24, Z
     15c:	81 60       	ori	r24, 0x01	; 1
     15e:	80 83       	st	Z, r24
     160:	15 c0       	rjmp	.+42     	; 0x18c <I2C_Master_Init+0x76>
     162:	e9 eb       	ldi	r30, 0xB9	; 185
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	8e 7f       	andi	r24, 0xFE	; 254
     16a:	80 83       	st	Z, r24
     16c:	80 81       	ld	r24, Z
     16e:	82 60       	ori	r24, 0x02	; 2
     170:	80 83       	st	Z, r24
     172:	0c c0       	rjmp	.+24     	; 0x18c <I2C_Master_Init+0x76>
     174:	e9 eb       	ldi	r30, 0xB9	; 185
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	83 60       	ori	r24, 0x03	; 3
     17c:	80 83       	st	Z, r24
     17e:	06 c0       	rjmp	.+12     	; 0x18c <I2C_Master_Init+0x76>
     180:	e9 eb       	ldi	r30, 0xB9	; 185
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	8c 7f       	andi	r24, 0xFC	; 252
     188:	80 83       	st	Z, r24
     18a:	c1 e0       	ldi	r28, 0x01	; 1
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	74 e2       	ldi	r23, 0x24	; 36
     190:	84 ef       	ldi	r24, 0xF4	; 244
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	a9 01       	movw	r20, r18
     196:	98 01       	movw	r18, r16
     198:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__udivmodsi4>
     19c:	ca 01       	movw	r24, r20
     19e:	b9 01       	movw	r22, r18
     1a0:	60 51       	subi	r22, 0x10	; 16
     1a2:	71 09       	sbc	r23, r1
     1a4:	81 09       	sbc	r24, r1
     1a6:	91 09       	sbc	r25, r1
     1a8:	4c 2f       	mov	r20, r28
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	9a 01       	movw	r18, r20
     1ae:	22 0f       	add	r18, r18
     1b0:	33 1f       	adc	r19, r19
     1b2:	03 2e       	mov	r0, r19
     1b4:	00 0c       	add	r0, r0
     1b6:	44 0b       	sbc	r20, r20
     1b8:	55 0b       	sbc	r21, r21
     1ba:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__udivmodsi4>
     1be:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     1c2:	84 e0       	ldi	r24, 0x04	; 4
     1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	08 95       	ret

000001d0 <I2C_Master_Start>:
     1d0:	94 ea       	ldi	r25, 0xA4	; 164
     1d2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1da:	99 23       	and	r25, r25
     1dc:	e4 f7       	brge	.-8      	; 0x1d6 <I2C_Master_Start+0x6>
     1de:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1e2:	98 7f       	andi	r25, 0xF8	; 248
     1e4:	98 30       	cpi	r25, 0x08	; 8
     1e6:	11 f0       	breq	.+4      	; 0x1ec <I2C_Master_Start+0x1c>
     1e8:	90 31       	cpi	r25, 0x10	; 16
     1ea:	d1 f4       	brne	.+52     	; 0x220 <I2C_Master_Start+0x50>
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	86 2b       	or	r24, r22
     1f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1f8:	84 e8       	ldi	r24, 0x84	; 132
     1fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     202:	88 23       	and	r24, r24
     204:	e4 f7       	brge	.-8      	; 0x1fe <I2C_Master_Start+0x2e>
     206:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     20a:	88 7f       	andi	r24, 0xF8	; 248
     20c:	66 23       	and	r22, r22
     20e:	11 f0       	breq	.+4      	; 0x214 <I2C_Master_Start+0x44>
     210:	80 34       	cpi	r24, 0x40	; 64
     212:	41 f4       	brne	.+16     	; 0x224 <I2C_Master_Start+0x54>
     214:	61 11       	cpse	r22, r1
     216:	08 c0       	rjmp	.+16     	; 0x228 <I2C_Master_Start+0x58>
     218:	88 31       	cpi	r24, 0x18	; 24
     21a:	41 f4       	brne	.+16     	; 0x22c <I2C_Master_Start+0x5c>
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	08 95       	ret
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	08 95       	ret
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	08 95       	ret
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	08 95       	ret
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	08 95       	ret

00000230 <I2C_Master_Write>:
     230:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     234:	84 e8       	ldi	r24, 0x84	; 132
     236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     23a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     23e:	88 23       	and	r24, r24
     240:	e4 f7       	brge	.-8      	; 0x23a <I2C_Master_Write+0xa>
     242:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     246:	88 7f       	andi	r24, 0xF8	; 248
     248:	88 32       	cpi	r24, 0x28	; 40
     24a:	11 f0       	breq	.+4      	; 0x250 <I2C_Master_Write+0x20>
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	08 95       	ret
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	08 95       	ret

00000254 <I2C_Master_Read>:
     254:	88 23       	and	r24, r24
     256:	21 f0       	breq	.+8      	; 0x260 <I2C_Master_Read+0xc>
     258:	84 ec       	ldi	r24, 0xC4	; 196
     25a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     25e:	03 c0       	rjmp	.+6      	; 0x266 <I2C_Master_Read+0x12>
     260:	84 e8       	ldi	r24, 0x84	; 132
     262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     266:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     26a:	88 23       	and	r24, r24
     26c:	e4 f7       	brge	.-8      	; 0x266 <I2C_Master_Read+0x12>
     26e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     272:	08 95       	ret

00000274 <I2C_Master_Stop>:
     274:	84 e9       	ldi	r24, 0x94	; 148
     276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     27a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     27e:	84 fd       	sbrc	r24, 4
     280:	fc cf       	rjmp	.-8      	; 0x27a <I2C_Master_Stop+0x6>
     282:	08 95       	ret

00000284 <I2C_Write_Register>:
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	c6 2f       	mov	r28, r22
     28a:	d4 2f       	mov	r29, r20
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Master_Start>
     292:	88 23       	and	r24, r24
     294:	69 f0       	breq	.+26     	; 0x2b0 <I2C_Write_Register+0x2c>
     296:	8c 2f       	mov	r24, r28
     298:	0e 94 18 01 	call	0x230	; 0x230 <I2C_Master_Write>
     29c:	88 23       	and	r24, r24
     29e:	41 f0       	breq	.+16     	; 0x2b0 <I2C_Write_Register+0x2c>
     2a0:	8d 2f       	mov	r24, r29
     2a2:	0e 94 18 01 	call	0x230	; 0x230 <I2C_Master_Write>
     2a6:	88 23       	and	r24, r24
     2a8:	19 f0       	breq	.+6      	; 0x2b0 <I2C_Write_Register+0x2c>
     2aa:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Master_Stop>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <I2C_Read_Multiple>:

uint8_t I2C_Read_Multiple(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint8_t length) {
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
	// Si no hay bytes que leer, retornar éxito
	if (length == 0) return 1;
     2c0:	22 23       	and	r18, r18
     2c2:	a1 f1       	breq	.+104    	; 0x32c <I2C_Read_Multiple+0x76>
     2c4:	c2 2f       	mov	r28, r18
     2c6:	8a 01       	movw	r16, r20
     2c8:	f6 2e       	mov	r15, r22
     2ca:	d8 2f       	mov	r29, r24
	
	// Primero: modo escritura para especificar el registro inicial
	if (!I2C_Master_Start(dev_addr, 0)) return 0;
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Master_Start>
     2d2:	88 23       	and	r24, r24
     2d4:	61 f1       	breq	.+88     	; 0x32e <I2C_Read_Multiple+0x78>
	
	// Enviar dirección del primer registro a leer
	if (!I2C_Master_Write(reg_addr)) return 0;
     2d6:	8f 2d       	mov	r24, r15
     2d8:	0e 94 18 01 	call	0x230	; 0x230 <I2C_Master_Write>
     2dc:	88 23       	and	r24, r24
     2de:	39 f1       	breq	.+78     	; 0x32e <I2C_Read_Multiple+0x78>
	
	// Segundo: reiniciar comunicación en modo lectura
	if (!I2C_Master_Start(dev_addr, 1)) return 0;
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	8d 2f       	mov	r24, r29
     2e4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Master_Start>
     2e8:	88 23       	and	r24, r24
     2ea:	09 f1       	breq	.+66     	; 0x32e <I2C_Read_Multiple+0x78>
     2ec:	d0 e0       	ldi	r29, 0x00	; 0
     2ee:	18 c0       	rjmp	.+48     	; 0x320 <I2C_Read_Multiple+0x6a>
	
	// Leer múltiples bytes
	for (uint8_t i = 0; i < length; i++) {
		if (i == length - 1) {
     2f0:	2d 2f       	mov	r18, r29
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	8c 2f       	mov	r24, r28
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	28 17       	cp	r18, r24
     2fc:	39 07       	cpc	r19, r25
     2fe:	41 f4       	brne	.+16     	; 0x310 <I2C_Read_Multiple+0x5a>
			// Último byte: leer con NACK
			data[i] = I2C_Master_Read(0);
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	0e 94 2a 01 	call	0x254	; 0x254 <I2C_Master_Read>
     306:	f8 01       	movw	r30, r16
     308:	ed 0f       	add	r30, r29
     30a:	f1 1d       	adc	r31, r1
     30c:	80 83       	st	Z, r24
     30e:	07 c0       	rjmp	.+14     	; 0x31e <I2C_Read_Multiple+0x68>
			} else {
			// Bytes intermedios: leer con ACK
			data[i] = I2C_Master_Read(1);
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	0e 94 2a 01 	call	0x254	; 0x254 <I2C_Master_Read>
     316:	f8 01       	movw	r30, r16
     318:	ed 0f       	add	r30, r29
     31a:	f1 1d       	adc	r31, r1
     31c:	80 83       	st	Z, r24
	
	// Segundo: reiniciar comunicación en modo lectura
	if (!I2C_Master_Start(dev_addr, 1)) return 0;
	
	// Leer múltiples bytes
	for (uint8_t i = 0; i < length; i++) {
     31e:	df 5f       	subi	r29, 0xFF	; 255
     320:	dc 17       	cp	r29, r28
     322:	30 f3       	brcs	.-52     	; 0x2f0 <I2C_Read_Multiple+0x3a>
			data[i] = I2C_Master_Read(1);
		}
	}
	
	// Finalizar comunicación
	I2C_Master_Stop();
     324:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Master_Stop>
	return 1; // Éxito
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	01 c0       	rjmp	.+2      	; 0x32e <I2C_Read_Multiple+0x78>
	return 1; // Éxito
}

uint8_t I2C_Read_Multiple(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint8_t length) {
	// Si no hay bytes que leer, retornar éxito
	if (length == 0) return 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	// Finalizar comunicación
	I2C_Master_Stop();
	return 1; // Éxito
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	08 95       	ret

0000033a <AHT10_SoftReset>:
}



uint8_t AHT10_SoftReset(void)
{
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	2a 97       	sbiw	r28, 0x0a	; 10
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
	UART_SendString("SOFTRESET: Iniciando...\n");
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	// Método alternativo de reset
	// Algunos AHT10 responden mejor a este enfoque
	
	if (!I2C_Master_Start(AHT10_ADDRESS, 0)) {
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	88 e3       	ldi	r24, 0x38	; 56
     35e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Master_Start>
     362:	18 2f       	mov	r17, r24
     364:	81 11       	cpse	r24, r1
     366:	05 c0       	rjmp	.+10     	; 0x372 <AHT10_SoftReset+0x38>
		UART_SendString("SOFTRESET: ERROR DE START\n");
     368:	89 e1       	ldi	r24, 0x19	; 25
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		return 0;
     370:	4e c0       	rjmp	.+156    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	}
	
	// Enviar comando de reset
	TWDR = 0xBA;
     372:	8a eb       	ldi	r24, 0xBA	; 186
     374:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
     378:	84 e8       	ldi	r24, 0x84	; 132
     37a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// Esperar con timeout
	uint16_t timeout = 0;
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
	while (!(TWCR & (1 << TWINT)) && timeout < 500) {
     382:	05 c0       	rjmp	.+10     	; 0x38e <AHT10_SoftReset+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     384:	25 e3       	ldi	r18, 0x35	; 53
     386:	2a 95       	dec	r18
     388:	f1 f7       	brne	.-4      	; 0x386 <AHT10_SoftReset+0x4c>
     38a:	00 00       	nop
		_delay_us(10);
		timeout++;
     38c:	01 96       	adiw	r24, 0x01	; 1
	TWDR = 0xBA;
	TWCR = (1 << TWINT) | (1 << TWEN);
	
	// Esperar con timeout
	uint16_t timeout = 0;
	while (!(TWCR & (1 << TWINT)) && timeout < 500) {
     38e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     392:	22 23       	and	r18, r18
     394:	24 f0       	brlt	.+8      	; 0x39e <AHT10_SoftReset+0x64>
     396:	84 3f       	cpi	r24, 0xF4	; 244
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	92 07       	cpc	r25, r18
     39c:	98 f3       	brcs	.-26     	; 0x384 <AHT10_SoftReset+0x4a>
		_delay_us(10);
		timeout++;
	}
	
	if (timeout >= 500) {
     39e:	84 3f       	cpi	r24, 0xF4	; 244
     3a0:	91 40       	sbci	r25, 0x01	; 1
     3a2:	40 f0       	brcs	.+16     	; 0x3b4 <AHT10_SoftReset+0x7a>
		UART_SendString("SOFTRESET: TIMEOUT\n");
     3a4:	84 e3       	ldi	r24, 0x34	; 52
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		I2C_Master_Stop();
     3ac:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Master_Stop>
		return 0;
     3b0:	10 e0       	ldi	r17, 0x00	; 0
     3b2:	2d c0       	rjmp	.+90     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	}
	
	// Verificar si el sensor aceptó el reset
	if ((TWSR & 0xF8) != TW_MT_DATA_ACK) {
     3b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     3b8:	88 7f       	andi	r24, 0xF8	; 248
     3ba:	88 32       	cpi	r24, 0x28	; 40
     3bc:	09 f1       	breq	.+66     	; 0x400 <__EEPROM_REGION_LENGTH__>
		UART_SendString("SOFTRESET: SENSOR NO ACK - Estado: 0x");
     3be:	88 e4       	ldi	r24, 0x48	; 72
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		char status_buf[10];
		sprintf(status_buf, "%02X\n", TWSR & 0xF8);
     3c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     3ca:	88 7f       	andi	r24, 0xF8	; 248
     3cc:	1f 92       	push	r1
     3ce:	8f 93       	push	r24
     3d0:	8e e6       	ldi	r24, 0x6E	; 110
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	8e 01       	movw	r16, r28
     3da:	0f 5f       	subi	r16, 0xFF	; 255
     3dc:	1f 4f       	sbci	r17, 0xFF	; 255
     3de:	1f 93       	push	r17
     3e0:	0f 93       	push	r16
     3e2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <sprintf>
		UART_SendString(status_buf);
     3e6:	c8 01       	movw	r24, r16
     3e8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		I2C_Master_Stop();
     3ec:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Master_Stop>
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
		return 0;
     3fc:	10 e0       	ldi	r17, 0x00	; 0
     3fe:	07 c0       	rjmp	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	}
	
	I2C_Master_Stop();
     400:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Master_Stop>
	UART_SendString("SOFTRESET: EXITOSO\n");
     404:	84 e7       	ldi	r24, 0x74	; 116
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	return 1;
     40c:	11 e0       	ldi	r17, 0x01	; 1
}
     40e:	81 2f       	mov	r24, r17
     410:	2a 96       	adiw	r28, 0x0a	; 10
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	08 95       	ret

00000426 <AHT10_ReadStatusByte>:
	return 1; // Lectura exitosa
}


//Funcion para lectura de estado del AHT10
uint8_t AHT10_ReadStatusByte(uint8_t *status) {
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
	if (!I2C_Master_Start(AHT10_ADDRESS, 1)) { // 1 para lectura
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	88 e3       	ldi	r24, 0x38	; 56
     430:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Master_Start>
     434:	88 23       	and	r24, r24
     436:	39 f0       	breq	.+14     	; 0x446 <AHT10_ReadStatusByte+0x20>
		return 0; // Error
	}
	*status = I2C_Master_Read(0); // 0 para NACK
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 2a 01 	call	0x254	; 0x254 <I2C_Master_Read>
     43e:	88 83       	st	Y, r24
	I2C_Master_Stop();
     440:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Master_Stop>
	return 1; // Éxito
     444:	81 e0       	ldi	r24, 0x01	; 1
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <AHT10_GetStatus>:
	return 1;
}

uint8_t AHT10_GetStatus(uint8_t *status) {
	// Usar la nueva función específica para leer el byte de estado del AHT10
	if (!AHT10_ReadStatusByte(status)) {
     44c:	0e 94 13 02 	call	0x426	; 0x426 <AHT10_ReadStatusByte>
     450:	81 11       	cpse	r24, r1
		return 0; // Error al leer estado
	}
	return 1; // Lectura exitosa
     452:	81 e0       	ldi	r24, 0x01	; 1
}
     454:	08 95       	ret

00000456 <AHT10_ReadRawData>:
		UART_SendString(buffer);
	}
}

uint8_t AHT10_ReadRawData(uint32_t *raw_temp, uint32_t *raw_hum)
{
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	2a 97       	sbiw	r28, 0x0a	; 10
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	6c 01       	movw	r12, r24
     47a:	5b 01       	movw	r10, r22
	uint8_t data[6];
	uint8_t trigger_cmd[3] = {AHT10_TRIGGER_MEASUREMENT_CMD, 0x33, 0x00};
     47c:	8c ea       	ldi	r24, 0xAC	; 172
     47e:	8f 83       	std	Y+7, r24	; 0x07
     480:	83 e3       	ldi	r24, 0x33	; 51
     482:	88 87       	std	Y+8, r24	; 0x08
     484:	19 86       	std	Y+9, r1	; 0x09
	
	// Enviar comando para disparar medición
	if (!I2C_Master_Start(AHT10_ADDRESS, 0)) {
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	88 e3       	ldi	r24, 0x38	; 56
     48a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Master_Start>
     48e:	f8 2e       	mov	r15, r24
     490:	88 23       	and	r24, r24
     492:	09 f4       	brne	.+2      	; 0x496 <AHT10_ReadRawData+0x40>
     494:	91 c0       	rjmp	.+290    	; 0x5b8 <AHT10_ReadRawData+0x162>
     496:	10 e0       	ldi	r17, 0x00	; 0
     498:	14 c0       	rjmp	.+40     	; 0x4c2 <AHT10_ReadRawData+0x6c>
		return 0;
	}
	
	// Enviar comando de trigger (3 bytes)
	for (uint8_t i = 0; i < 3; i++) {
		if (!I2C_Master_Write(trigger_cmd[i])) {
     49a:	e7 e0       	ldi	r30, 0x07	; 7
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	ec 0f       	add	r30, r28
     4a0:	fd 1f       	adc	r31, r29
     4a2:	e1 0f       	add	r30, r17
     4a4:	f1 1d       	adc	r31, r1
     4a6:	80 81       	ld	r24, Z
     4a8:	0e 94 18 01 	call	0x230	; 0x230 <I2C_Master_Write>
     4ac:	f8 2e       	mov	r15, r24
     4ae:	81 11       	cpse	r24, r1
     4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <AHT10_ReadRawData+0x6a>
			UART_SendString("Error: I2C Write failed\n");
     4b2:	88 e8       	ldi	r24, 0x88	; 136
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
			I2C_Master_Stop();
     4ba:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Master_Stop>
			return 0;
     4be:	7c c0       	rjmp	.+248    	; 0x5b8 <AHT10_ReadRawData+0x162>
		//UART_SendString("Error: I2C Start failed\n");
		return 0;
	}
	
	// Enviar comando de trigger (3 bytes)
	for (uint8_t i = 0; i < 3; i++) {
     4c0:	1f 5f       	subi	r17, 0xFF	; 255
     4c2:	13 30       	cpi	r17, 0x03	; 3
     4c4:	50 f3       	brcs	.-44     	; 0x49a <AHT10_ReadRawData+0x44>
			I2C_Master_Stop();
			return 0;
		}
	}
	
	I2C_Master_Stop();
     4c6:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Master_Stop>
	
	// Esperar a que la medición se complete
	uint16_t timeout = 0;
     4ca:	00 e0       	ldi	r16, 0x00	; 0
     4cc:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ce:	8f e3       	ldi	r24, 0x3F	; 63
     4d0:	9c e9       	ldi	r25, 0x9C	; 156
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <AHT10_ReadRawData+0x7c>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <AHT10_ReadRawData+0x82>
     4d8:	00 00       	nop
	uint8_t status;
	
	do {
		_delay_ms(10);
		timeout++;
     4da:	0f 5f       	subi	r16, 0xFF	; 255
     4dc:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if (timeout > 100) {
     4de:	05 36       	cpi	r16, 0x65	; 101
     4e0:	11 05       	cpc	r17, r1
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <AHT10_ReadRawData+0x90>
     4e4:	68 c0       	rjmp	.+208    	; 0x5b6 <AHT10_ReadRawData+0x160>
			//UART_SendString("Error: Timeout waiting for measurement\n");
			return 0;
		}
		
		// Leer estado
		if (!AHT10_GetStatus(&status)) {
     4e6:	ce 01       	movw	r24, r28
     4e8:	0a 96       	adiw	r24, 0x0a	; 10
     4ea:	0e 94 26 02 	call	0x44c	; 0x44c <AHT10_GetStatus>
     4ee:	f8 2e       	mov	r15, r24
     4f0:	88 23       	and	r24, r24
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <AHT10_ReadRawData+0xa0>
     4f4:	61 c0       	rjmp	.+194    	; 0x5b8 <AHT10_ReadRawData+0x162>
			//UART_SendString("Error: Failed to read status\n");
			return 0;
		}
		
	} while (status & AHT10_STATUS_BUSY);
     4f6:	8a 85       	ldd	r24, Y+10	; 0x0a
     4f8:	88 23       	and	r24, r24
     4fa:	4c f3       	brlt	.-46     	; 0x4ce <AHT10_ReadRawData+0x78>
	
	// Leer los 6 bytes de datos
	if (!I2C_Read_Multiple(AHT10_ADDRESS, 0, data, 6)) {
     4fc:	26 e0       	ldi	r18, 0x06	; 6
     4fe:	ae 01       	movw	r20, r28
     500:	4f 5f       	subi	r20, 0xFF	; 255
     502:	5f 4f       	sbci	r21, 0xFF	; 255
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	88 e3       	ldi	r24, 0x38	; 56
     508:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <I2C_Read_Multiple>
     50c:	f8 2e       	mov	r15, r24
     50e:	88 23       	and	r24, r24
     510:	09 f4       	brne	.+2      	; 0x514 <AHT10_ReadRawData+0xbe>
     512:	52 c0       	rjmp	.+164    	; 0x5b8 <AHT10_ReadRawData+0x162>
	//data[0], data[1], data[2], data[3], data[4], data[5]);
	//UART_SendString(debug_buf);
	
	// Extraer datos - CORREGIDO según datasheet AHT10
	// Humedad: 20 bits en data[1], data[2], data[3] (primeros 4 bits)
	*raw_hum = ((uint32_t)data[1] << 12) | ((uint32_t)data[2] << 4) | ((uint32_t)data[3] >> 4);
     514:	8a 81       	ldd	r24, Y+2	; 0x02
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	a0 e0       	ldi	r26, 0x00	; 0
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	ac 01       	movw	r20, r24
     51e:	bd 01       	movw	r22, r26
     520:	03 2e       	mov	r0, r19
     522:	3c e0       	ldi	r19, 0x0C	; 12
     524:	44 0f       	add	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	66 1f       	adc	r22, r22
     52a:	77 1f       	adc	r23, r23
     52c:	3a 95       	dec	r19
     52e:	d1 f7       	brne	.-12     	; 0x524 <AHT10_ReadRawData+0xce>
     530:	30 2d       	mov	r19, r0
     532:	9b 81       	ldd	r25, Y+3	; 0x03
     534:	89 2f       	mov	r24, r25
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	a0 e0       	ldi	r26, 0x00	; 0
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	aa 1f       	adc	r26, r26
     542:	bb 1f       	adc	r27, r27
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	aa 1f       	adc	r26, r26
     54a:	bb 1f       	adc	r27, r27
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	aa 1f       	adc	r26, r26
     552:	bb 1f       	adc	r27, r27
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	aa 1f       	adc	r26, r26
     55a:	bb 1f       	adc	r27, r27
     55c:	84 2b       	or	r24, r20
     55e:	95 2b       	or	r25, r21
     560:	a6 2b       	or	r26, r22
     562:	b7 2b       	or	r27, r23
     564:	4c 81       	ldd	r20, Y+4	; 0x04
     566:	24 2f       	mov	r18, r20
     568:	22 95       	swap	r18
     56a:	2f 70       	andi	r18, 0x0F	; 15
     56c:	82 2b       	or	r24, r18
     56e:	f5 01       	movw	r30, r10
     570:	80 83       	st	Z, r24
     572:	91 83       	std	Z+1, r25	; 0x01
     574:	a2 83       	std	Z+2, r26	; 0x02
     576:	b3 83       	std	Z+3, r27	; 0x03
	
	// Temperatura: 20 bits en data[3] (últimos 4 bits), data[4], data[5]
	*raw_temp = ((uint32_t)(data[3] & 0x0F) << 16) | ((uint32_t)data[4] << 8) | data[5];
     578:	84 2f       	mov	r24, r20
     57a:	8f 70       	andi	r24, 0x0F	; 15
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	bc 01       	movw	r22, r24
     584:	55 27       	eor	r21, r21
     586:	44 27       	eor	r20, r20
     588:	9d 81       	ldd	r25, Y+5	; 0x05
     58a:	89 2f       	mov	r24, r25
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	a0 e0       	ldi	r26, 0x00	; 0
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	ba 2f       	mov	r27, r26
     594:	a9 2f       	mov	r26, r25
     596:	98 2f       	mov	r25, r24
     598:	88 27       	eor	r24, r24
     59a:	84 2b       	or	r24, r20
     59c:	95 2b       	or	r25, r21
     59e:	a6 2b       	or	r26, r22
     5a0:	b7 2b       	or	r27, r23
     5a2:	2e 81       	ldd	r18, Y+6	; 0x06
     5a4:	82 2b       	or	r24, r18
     5a6:	f6 01       	movw	r30, r12
     5a8:	80 83       	st	Z, r24
     5aa:	91 83       	std	Z+1, r25	; 0x01
     5ac:	a2 83       	std	Z+2, r26	; 0x02
     5ae:	b3 83       	std	Z+3, r27	; 0x03
	
	return 1;
     5b0:	ff 24       	eor	r15, r15
     5b2:	f3 94       	inc	r15
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <AHT10_ReadRawData+0x162>
		_delay_ms(10);
		timeout++;
		
		if (timeout > 100) {
			//UART_SendString("Error: Timeout waiting for measurement\n");
			return 0;
     5b6:	f1 2c       	mov	r15, r1
	
	// Temperatura: 20 bits en data[3] (últimos 4 bits), data[4], data[5]
	*raw_temp = ((uint32_t)(data[3] & 0x0F) << 16) | ((uint32_t)data[4] << 8) | data[5];
	
	return 1;
}
     5b8:	8f 2d       	mov	r24, r15
     5ba:	2a 96       	adiw	r28, 0x0a	; 10
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	df 90       	pop	r13
     5d2:	cf 90       	pop	r12
     5d4:	bf 90       	pop	r11
     5d6:	af 90       	pop	r10
     5d8:	08 95       	ret

000005da <AHT10_ReadMeasurements>:
// Función alternativa que evita el uso de floats


// Función para leer mediciones convertidas a valores reales

uint8_t AHT10_ReadMeasurements(uint16_t *temperature_scaled, uint16_t *humidity_scaled) {
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	8c 01       	movw	r16, r24
     5f8:	7b 01       	movw	r14, r22
	uint32_t raw_temp, raw_hum;
	
	if (!AHT10_ReadRawData(&raw_temp, &raw_hum)) {
     5fa:	be 01       	movw	r22, r28
     5fc:	6b 5f       	subi	r22, 0xFB	; 251
     5fe:	7f 4f       	sbci	r23, 0xFF	; 255
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	0e 94 2b 02 	call	0x456	; 0x456 <AHT10_ReadRawData>
     608:	88 23       	and	r24, r24
     60a:	d1 f0       	breq	.+52     	; 0x640 <AHT10_ReadMeasurements+0x66>
		return 0;
	}
	
	// CONVERSIÓN SIN FLOATS - usando aritmética entera
	// Humedad: (raw_hum * 10000) / 1048576 (escalado x100)
	*humidity_scaled = (raw_hum * 10000UL) / 1048576UL;
     60c:	2d 81       	ldd	r18, Y+5	; 0x05
     60e:	3e 81       	ldd	r19, Y+6	; 0x06
     610:	4f 81       	ldd	r20, Y+7	; 0x07
     612:	58 85       	ldd	r21, Y+8	; 0x08
     614:	a0 e1       	ldi	r26, 0x10	; 16
     616:	b7 e2       	ldi	r27, 0x27	; 39
     618:	0e 94 92 06 	call	0xd24	; 0xd24 <__muluhisi3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	07 2e       	mov	r0, r23
     622:	74 e1       	ldi	r23, 0x14	; 20
     624:	b6 95       	lsr	r27
     626:	a7 95       	ror	r26
     628:	97 95       	ror	r25
     62a:	87 95       	ror	r24
     62c:	7a 95       	dec	r23
     62e:	d1 f7       	brne	.-12     	; 0x624 <AHT10_ReadMeasurements+0x4a>
     630:	70 2d       	mov	r23, r0
     632:	f7 01       	movw	r30, r14
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24
	uint32_t temp_calc = (raw_temp * 20000UL) / 1048576UL;
	if (temp_calc >= 5000) {
		*temperature_scaled = temp_calc - 5000;
		} else {
		// Manejo de valores negativos (raro pero posible)
		*temperature_scaled = 0;
     638:	f8 01       	movw	r30, r16
     63a:	11 82       	std	Z+1, r1	; 0x01
     63c:	10 82       	st	Z, r1
	}
	
	return 1;
     63e:	81 e0       	ldi	r24, 0x01	; 1
}
     640:	28 96       	adiw	r28, 0x08	; 8
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	ff 90       	pop	r15
     656:	ef 90       	pop	r14
     658:	08 95       	ret

0000065a <uint16_to_str>:

//----------------------------------------------------------------------------------------
//-------------FUNCIONES AUXILEARES------------------------------------------------------

// Función auxiliar para convertir uint16_t a string
void uint16_to_str(uint16_t value, char* buffer, uint8_t decimal_places) {
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	48 2f       	mov	r20, r24
     666:	59 2f       	mov	r21, r25
     668:	eb 01       	movw	r28, r22
	uint8_t i = 0;
	uint16_t temp = value;
     66a:	28 2f       	mov	r18, r24
     66c:	39 2f       	mov	r19, r25
	
	// Calcular longitud
	uint8_t digits = 1;
	uint16_t divisor = 1;
     66e:	e1 e0       	ldi	r30, 0x01	; 1
     670:	f0 e0       	ldi	r31, 0x00	; 0
void uint16_to_str(uint16_t value, char* buffer, uint8_t decimal_places) {
	uint8_t i = 0;
	uint16_t temp = value;
	
	// Calcular longitud
	uint8_t digits = 1;
     672:	ff 24       	eor	r15, r15
     674:	f3 94       	inc	r15
	uint16_t divisor = 1;
	while (temp >= 10) {
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <uint16_to_str+0x4c>
		temp /= 10;
     678:	ad ec       	ldi	r26, 0xCD	; 205
     67a:	bc ec       	ldi	r27, 0xCC	; 204
     67c:	0e 94 83 06 	call	0xd06	; 0xd06 <__umulhisi3>
     680:	9c 01       	movw	r18, r24
     682:	36 95       	lsr	r19
     684:	27 95       	ror	r18
     686:	36 95       	lsr	r19
     688:	27 95       	ror	r18
     68a:	36 95       	lsr	r19
     68c:	27 95       	ror	r18
		digits++;
     68e:	f3 94       	inc	r15
		divisor *= 10;
     690:	cf 01       	movw	r24, r30
     692:	88 0f       	add	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	e8 0f       	add	r30, r24
     6a4:	f9 1f       	adc	r31, r25
	uint16_t temp = value;
	
	// Calcular longitud
	uint8_t digits = 1;
	uint16_t divisor = 1;
	while (temp >= 10) {
     6a6:	2a 30       	cpi	r18, 0x0A	; 10
     6a8:	31 05       	cpc	r19, r1
     6aa:	30 f7       	brcc	.-52     	; 0x678 <uint16_to_str+0x1e>
     6ac:	00 e0       	ldi	r16, 0x00	; 0
     6ae:	10 e0       	ldi	r17, 0x00	; 0
     6b0:	1a c0       	rjmp	.+52     	; 0x6e6 <uint16_to_str+0x8c>
	}
	
	// Convertir dígito por dígito
	temp = value;
	for (uint8_t j = 0; j < digits; j++) {
		uint8_t digit = temp / divisor;
     6b2:	84 2f       	mov	r24, r20
     6b4:	95 2f       	mov	r25, r21
     6b6:	bf 01       	movw	r22, r30
     6b8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__udivmodhi4>
		buffer[i++] = '0' + digit;
     6bc:	de 01       	movw	r26, r28
     6be:	a1 0f       	add	r26, r17
     6c0:	b1 1d       	adc	r27, r1
     6c2:	60 5d       	subi	r22, 0xD0	; 208
     6c4:	6c 93       	st	X, r22
		temp %= divisor;
     6c6:	48 2f       	mov	r20, r24
     6c8:	59 2f       	mov	r21, r25
		divisor /= 10;
     6ca:	9f 01       	movw	r18, r30
     6cc:	ad ec       	ldi	r26, 0xCD	; 205
     6ce:	bc ec       	ldi	r27, 0xCC	; 204
     6d0:	0e 94 83 06 	call	0xd06	; 0xd06 <__umulhisi3>
     6d4:	fc 01       	movw	r30, r24
     6d6:	f6 95       	lsr	r31
     6d8:	e7 95       	ror	r30
     6da:	f6 95       	lsr	r31
     6dc:	e7 95       	ror	r30
     6de:	f6 95       	lsr	r31
     6e0:	e7 95       	ror	r30
		divisor *= 10;
	}
	
	// Convertir dígito por dígito
	temp = value;
	for (uint8_t j = 0; j < digits; j++) {
     6e2:	0f 5f       	subi	r16, 0xFF	; 255
		uint8_t digit = temp / divisor;
		buffer[i++] = '0' + digit;
     6e4:	1f 5f       	subi	r17, 0xFF	; 255
		divisor *= 10;
	}
	
	// Convertir dígito por dígito
	temp = value;
	for (uint8_t j = 0; j < digits; j++) {
     6e6:	0f 15       	cp	r16, r15
     6e8:	20 f3       	brcs	.-56     	; 0x6b2 <uint16_to_str+0x58>
		buffer[i++] = '0' + digit;
		temp %= divisor;
		divisor /= 10;
	}
	
	buffer[i] = '\0';
     6ea:	c1 0f       	add	r28, r17
     6ec:	d1 1d       	adc	r29, r1
     6ee:	18 82       	st	Y, r1
}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	08 95       	ret

000006fc <send_decimal>:
	UART_SendString("INIT: CALIBRACION EXITOSA!\n");
	return 1;
}

// Función auxiliar para enviar números decimales
void send_decimal(uint16_t value_scaled, uint8_t decimal_places) {
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	00 d0       	rcall	.+0      	; 0x708 <send_decimal+0xc>
     708:	00 d0       	rcall	.+0      	; 0x70a <send_decimal+0xe>
     70a:	00 d0       	rcall	.+0      	; 0x70c <send_decimal+0x10>
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	ac 01       	movw	r20, r24
     712:	f6 2e       	mov	r15, r22
	char buffer[6];
	
	// Parte entera
	uint16_t integer_part = value_scaled / 100;
     714:	8c 01       	movw	r16, r24
     716:	16 95       	lsr	r17
     718:	07 95       	ror	r16
     71a:	16 95       	lsr	r17
     71c:	07 95       	ror	r16
     71e:	98 01       	movw	r18, r16
     720:	ab e7       	ldi	r26, 0x7B	; 123
     722:	b4 e1       	ldi	r27, 0x14	; 20
     724:	0e 94 83 06 	call	0xd06	; 0xd06 <__umulhisi3>
     728:	fc 01       	movw	r30, r24
     72a:	f6 95       	lsr	r31
     72c:	e7 95       	ror	r30
	uint16_t decimal_part = value_scaled % 100;
     72e:	24 e6       	ldi	r18, 0x64	; 100
     730:	2e 9f       	mul	r18, r30
     732:	c0 01       	movw	r24, r0
     734:	2f 9f       	mul	r18, r31
     736:	90 0d       	add	r25, r0
     738:	11 24       	eor	r1, r1
     73a:	8a 01       	movw	r16, r20
     73c:	08 1b       	sub	r16, r24
     73e:	19 0b       	sbc	r17, r25
	
	// Convertir parte entera
	uint16_to_str(integer_part, buffer, 0);
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	be 01       	movw	r22, r28
     744:	6f 5f       	subi	r22, 0xFF	; 255
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	cf 01       	movw	r24, r30
     74a:	0e 94 2d 03 	call	0x65a	; 0x65a <uint16_to_str>
	UART_SendString(buffer);
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	UART_SendString(".");
     756:	81 ea       	ldi	r24, 0xA1	; 161
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	// Convertir parte decimal con leading zeros
	if (decimal_places == 2) {
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	f8 12       	cpse	r15, r24
     762:	13 c0       	rjmp	.+38     	; 0x78a <send_decimal+0x8e>
		if (decimal_part < 10) {
     764:	0a 30       	cpi	r16, 0x0A	; 10
     766:	11 05       	cpc	r17, r1
     768:	20 f4       	brcc	.+8      	; 0x772 <send_decimal+0x76>
			UART_SendString("0");
     76a:	83 ea       	ldi	r24, 0xA3	; 163
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		}
		uint16_to_str(decimal_part, buffer, 0);
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	be 01       	movw	r22, r28
     776:	6f 5f       	subi	r22, 0xFF	; 255
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 2d 03 	call	0x65a	; 0x65a <uint16_to_str>
		UART_SendString(buffer);
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
     788:	15 c0       	rjmp	.+42     	; 0x7b4 <send_decimal+0xb8>
		} else if (decimal_places == 1) {
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	f8 12       	cpse	r15, r24
     78e:	12 c0       	rjmp	.+36     	; 0x7b4 <send_decimal+0xb8>
		// Solo un decimal
		uint8_t first_decimal = decimal_part / 10;
     790:	98 01       	movw	r18, r16
     792:	ad ec       	ldi	r26, 0xCD	; 205
     794:	bc ec       	ldi	r27, 0xCC	; 204
     796:	0e 94 83 06 	call	0xd06	; 0xd06 <__umulhisi3>
     79a:	96 95       	lsr	r25
     79c:	87 95       	ror	r24
     79e:	96 95       	lsr	r25
     7a0:	87 95       	ror	r24
     7a2:	96 95       	lsr	r25
     7a4:	87 95       	ror	r24
		buffer[0] = '0' + first_decimal;
     7a6:	80 5d       	subi	r24, 0xD0	; 208
     7a8:	89 83       	std	Y+1, r24	; 0x01
		buffer[1] = '\0';
     7aa:	1a 82       	std	Y+2, r1	; 0x02
		UART_SendString(buffer);
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	}
}
     7b4:	26 96       	adiw	r28, 0x06	; 6
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	08 95       	ret

000007cc <DisplayMeasurements>:
		} else {
		UART_SendString("Error leyendo datos crudos\n");
	}
}

void DisplayMeasurements(uint16_t temp_scaled, uint16_t hum_scaled) {
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	00 d0       	rcall	.+0      	; 0x7de <DisplayMeasurements+0x12>
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <DisplayMeasurements+0x14>
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <DisplayMeasurements+0x16>
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	8c 01       	movw	r16, r24
     7e8:	7b 01       	movw	r14, r22
	char buffer[6];
	
	// Mostrar humedad en formato Hxx.xH
	UART_SendString("H");
     7ea:	85 ea       	ldi	r24, 0xA5	; 165
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	// Parte entera de humedad
	uint8_t hum_int = hum_scaled / 100;
     7f2:	a7 01       	movw	r20, r14
     7f4:	56 95       	lsr	r21
     7f6:	47 95       	ror	r20
     7f8:	56 95       	lsr	r21
     7fa:	47 95       	ror	r20
     7fc:	9a 01       	movw	r18, r20
     7fe:	ab e7       	ldi	r26, 0x7B	; 123
     800:	b4 e1       	ldi	r27, 0x14	; 20
     802:	0e 94 83 06 	call	0xd06	; 0xd06 <__umulhisi3>
     806:	6c 01       	movw	r12, r24
     808:	d6 94       	lsr	r13
     80a:	c7 94       	ror	r12
	uint8_t hum_dec = hum_scaled % 100;
     80c:	84 e6       	ldi	r24, 0x64	; 100
     80e:	c8 9e       	mul	r12, r24
     810:	e0 18       	sub	r14, r0
     812:	11 24       	eor	r1, r1
	
	// Leading zero si es necesario
	if (hum_int < 10) {
     814:	89 e0       	ldi	r24, 0x09	; 9
     816:	8c 15       	cp	r24, r12
     818:	20 f0       	brcs	.+8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		UART_SendString("0");
     81a:	83 ea       	ldi	r24, 0xA3	; 163
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	}
	uint16_to_str(hum_int, buffer, 0);
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	be 01       	movw	r22, r28
     826:	6f 5f       	subi	r22, 0xFF	; 255
     828:	7f 4f       	sbci	r23, 0xFF	; 255
     82a:	8c 2d       	mov	r24, r12
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 2d 03 	call	0x65a	; 0x65a <uint16_to_str>
	UART_SendString(buffer);
     832:	ce 01       	movw	r24, r28
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	UART_SendString(".");
     83a:	81 ea       	ldi	r24, 0xA1	; 161
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	// Parte decimal (solo primer dígito)
	uint8_t first_decimal = hum_dec / 10;
     842:	8d ec       	ldi	r24, 0xCD	; 205
     844:	e8 9e       	mul	r14, r24
     846:	81 2d       	mov	r24, r1
     848:	11 24       	eor	r1, r1
     84a:	86 95       	lsr	r24
     84c:	86 95       	lsr	r24
     84e:	86 95       	lsr	r24
	buffer[0] = '0' + first_decimal;
     850:	80 5d       	subi	r24, 0xD0	; 208
     852:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = '\0';
     854:	1a 82       	std	Y+2, r1	; 0x02
	UART_SendString(buffer);
     856:	ce 01       	movw	r24, r28
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	UART_SendString("H\n");
     85e:	87 ea       	ldi	r24, 0xA7	; 167
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	// Opcional: mostrar temperatura también
	UART_SendString("T");
     866:	8a ea       	ldi	r24, 0xAA	; 170
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	uint8_t temp_int = temp_scaled / 100;
     86e:	a8 01       	movw	r20, r16
     870:	56 95       	lsr	r21
     872:	47 95       	ror	r20
     874:	56 95       	lsr	r21
     876:	47 95       	ror	r20
     878:	9a 01       	movw	r18, r20
     87a:	ab e7       	ldi	r26, 0x7B	; 123
     87c:	b4 e1       	ldi	r27, 0x14	; 20
     87e:	0e 94 83 06 	call	0xd06	; 0xd06 <__umulhisi3>
     882:	7c 01       	movw	r14, r24
     884:	f6 94       	lsr	r15
     886:	e7 94       	ror	r14
	uint8_t temp_dec = temp_scaled % 100;
     888:	84 e6       	ldi	r24, 0x64	; 100
     88a:	e8 9e       	mul	r14, r24
     88c:	00 19       	sub	r16, r0
     88e:	11 24       	eor	r1, r1
	
	if (temp_int < 10 && temp_int >= 0) {
     890:	89 e0       	ldi	r24, 0x09	; 9
     892:	8e 15       	cp	r24, r14
     894:	20 f0       	brcs	.+8      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
		UART_SendString("0");
     896:	83 ea       	ldi	r24, 0xA3	; 163
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	}
	uint16_to_str(temp_int, buffer, 0);
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	be 01       	movw	r22, r28
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	8e 2d       	mov	r24, r14
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 2d 03 	call	0x65a	; 0x65a <uint16_to_str>
	UART_SendString(buffer);
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	UART_SendString(".");
     8b6:	81 ea       	ldi	r24, 0xA1	; 161
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	first_decimal = temp_dec / 10;
     8be:	8d ec       	ldi	r24, 0xCD	; 205
     8c0:	08 9f       	mul	r16, r24
     8c2:	01 2d       	mov	r16, r1
     8c4:	11 24       	eor	r1, r1
     8c6:	06 95       	lsr	r16
     8c8:	06 95       	lsr	r16
     8ca:	06 95       	lsr	r16
	buffer[0] = '0' + first_decimal;
     8cc:	00 5d       	subi	r16, 0xD0	; 208
     8ce:	09 83       	std	Y+1, r16	; 0x01
	buffer[1] = '\0';
     8d0:	1a 82       	std	Y+2, r1	; 0x02
	UART_SendString(buffer);
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	UART_SendString("C\n");
     8da:	8c ea       	ldi	r24, 0xAC	; 172
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
}
     8e2:	26 96       	adiw	r28, 0x06	; 6
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	08 95       	ret

00000900 <AHT10_OutString>:
//--------------------------FUNCIONES AHT10--------------------------------------

void AHT10_OutString(void){
	
	//Desplegar lectura de humedad
	if (AHT10_ReadMeasurements(&current_temp_scaled, &current_hum_scaled))
     900:	6c ee       	ldi	r22, 0xEC	; 236
     902:	75 e0       	ldi	r23, 0x05	; 5
     904:	8e ee       	ldi	r24, 0xEE	; 238
     906:	95 e0       	ldi	r25, 0x05	; 5
     908:	0e 94 ed 02 	call	0x5da	; 0x5da <AHT10_ReadMeasurements>
     90c:	88 23       	and	r24, r24
     90e:	51 f0       	breq	.+20     	; 0x924 <AHT10_OutString+0x24>
	{
		DisplayMeasurements(current_temp_scaled, current_hum_scaled);
     910:	60 91 ec 05 	lds	r22, 0x05EC	; 0x8005ec <__data_end>
     914:	70 91 ed 05 	lds	r23, 0x05ED	; 0x8005ed <__data_end+0x1>
     918:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <current_temp_scaled>
     91c:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <current_temp_scaled+0x1>
     920:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DisplayMeasurements>
     924:	08 95       	ret

00000926 <I2C_Scanner>:
	}
	
	buffer[i] = '\0';
}

void I2C_Scanner(void) {
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	2a 97       	sbiw	r28, 0x0a	; 10
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
	
	UART_SendString("Escaneando dispositivos I2C...\n");
     940:	8f ea       	ldi	r24, 0xAF	; 175
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	char buffer[10]; // Suficiente para "0xXX\n\0"
	for (uint8_t address = 1; address < 127; address++) {
     948:	11 e0       	ldi	r17, 0x01	; 1
     94a:	23 c0       	rjmp	.+70     	; 0x992 <I2C_Scanner+0x6c>
		// Intentar iniciar comunicacin en modo escritura para ver si el dispositivo responde
		if (I2C_Master_Start(address, 0)) {
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	81 2f       	mov	r24, r17
     950:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Master_Start>
     954:	88 23       	and	r24, r24
     956:	e1 f0       	breq	.+56     	; 0x990 <I2C_Scanner+0x6a>
			UART_SendString("Dispositivo encontrado en: 0x");
     958:	8f ec       	ldi	r24, 0xCF	; 207
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
			// Convertir la direccin a hexadecimal y enviarla por UART
			sprintf(buffer, "%02X\n", address); // Formatea a 2 dgitos hexadecimales
     960:	1f 92       	push	r1
     962:	1f 93       	push	r17
     964:	8e e6       	ldi	r24, 0x6E	; 110
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	ce 01       	movw	r24, r28
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	7c 01       	movw	r14, r24
     972:	9f 93       	push	r25
     974:	8f 93       	push	r24
     976:	0e 94 9d 06 	call	0xd3a	; 0xd3a <sprintf>
			UART_SendString(buffer);
     97a:	c7 01       	movw	r24, r14
     97c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
			I2C_Master_Stop(); // Detener la comunicacin
     980:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Master_Stop>
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0

void I2C_Scanner(void) {
	
	UART_SendString("Escaneando dispositivos I2C...\n");
	char buffer[10]; // Suficiente para "0xXX\n\0"
	for (uint8_t address = 1; address < 127; address++) {
     990:	1f 5f       	subi	r17, 0xFF	; 255
     992:	1f 37       	cpi	r17, 0x7F	; 127
     994:	d8 f2       	brcs	.-74     	; 0x94c <I2C_Scanner+0x26>
			sprintf(buffer, "%02X\n", address); // Formatea a 2 dgitos hexadecimales
			UART_SendString(buffer);
			I2C_Master_Stop(); // Detener la comunicacin
		}
	}
	UART_SendString("Escaneo completado\n");
     996:	8d ee       	ldi	r24, 0xED	; 237
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
}
     99e:	2a 96       	adiw	r28, 0x0a	; 10
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	08 95       	ret

000009b6 <send_hex_byte>:

// Enviar byte en formato hexadecimal
void send_hex_byte(uint8_t byte) {
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	61 97       	sbiw	r28, 0x11	; 17
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	18 2f       	mov	r17, r24
	char hex_chars[] = "0123456789ABCDEF";
     9ce:	81 e1       	ldi	r24, 0x11	; 17
     9d0:	e1 e0       	ldi	r30, 0x01	; 1
     9d2:	f2 e0       	ldi	r31, 0x02	; 2
     9d4:	de 01       	movw	r26, r28
     9d6:	11 96       	adiw	r26, 0x01	; 1
     9d8:	01 90       	ld	r0, Z+
     9da:	0d 92       	st	X+, r0
     9dc:	8a 95       	dec	r24
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <send_hex_byte+0x22>
	UART_SendChar(hex_chars[(byte >> 4) & 0x0F]);
     9e0:	81 2f       	mov	r24, r17
     9e2:	82 95       	swap	r24
     9e4:	8f 70       	andi	r24, 0x0F	; 15
     9e6:	e1 e0       	ldi	r30, 0x01	; 1
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	ec 0f       	add	r30, r28
     9ec:	fd 1f       	adc	r31, r29
     9ee:	e8 0f       	add	r30, r24
     9f0:	f1 1d       	adc	r31, r1
     9f2:	80 81       	ld	r24, Z
     9f4:	0e 94 75 00 	call	0xea	; 0xea <UART_SendChar>
	UART_SendChar(hex_chars[byte & 0x0F]);
     9f8:	1f 70       	andi	r17, 0x0F	; 15
     9fa:	e1 e0       	ldi	r30, 0x01	; 1
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	ec 0f       	add	r30, r28
     a00:	fd 1f       	adc	r31, r29
     a02:	e1 0f       	add	r30, r17
     a04:	f1 1d       	adc	r31, r1
     a06:	80 81       	ld	r24, Z
     a08:	0e 94 75 00 	call	0xea	; 0xea <UART_SendChar>
}
     a0c:	61 96       	adiw	r28, 0x11	; 17
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	08 95       	ret

00000a20 <AHT10_Init>:
		DisplayMeasurements(current_temp_scaled, current_hum_scaled);
	}
}

uint8_t AHT10_Init(void)
{
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <AHT10_Init+0xe>
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <AHT10_Init+0x10>
     a30:	1f 92       	push	r1
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;
	
	UART_SendString("INIT: Verificando estado inicial...\n");
     a36:	82 e1       	ldi	r24, 0x12	; 18
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	// PRIMERO: Leer el estado sin hacer reset
	if (!AHT10_GetStatus(&status)) {
     a3e:	ce 01       	movw	r24, r28
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	0e 94 26 02 	call	0x44c	; 0x44c <AHT10_GetStatus>
     a46:	18 2f       	mov	r17, r24
     a48:	81 11       	cpse	r24, r1
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <AHT10_Init+0x36>
		UART_SendString("INIT: ERROR LEYENDO ESTADO INICIAL\n");
     a4c:	87 e3       	ldi	r24, 0x37	; 55
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		return 0;
     a54:	e3 c0       	rjmp	.+454    	; 0xc1c <AHT10_Init+0x1fc>
	}
	
	UART_SendString("INIT: Estado inicial: 0x");
     a56:	8b e5       	ldi	r24, 0x5B	; 91
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	send_hex_byte(status);
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	0e 94 db 04 	call	0x9b6	; 0x9b6 <send_hex_byte>
	UART_SendString("\n");
     a64:	86 ea       	ldi	r24, 0xA6	; 166
     a66:	95 e0       	ldi	r25, 0x05	; 5
     a68:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	// Si ya está calibrado, no necesitamos inicializar
	if (status & AHT10_STATUS_CALIB) {
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	83 ff       	sbrs	r24, 3
     a70:	06 c0       	rjmp	.+12     	; 0xa7e <AHT10_Init+0x5e>
		UART_SendString("INIT: SENSOR YA CALIBRADO - Saltando inicializacion\n");
     a72:	84 e7       	ldi	r24, 0x74	; 116
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		return 1;
     a7a:	11 e0       	ldi	r17, 0x01	; 1
     a7c:	cf c0       	rjmp	.+414    	; 0xc1c <AHT10_Init+0x1fc>
	}
	
	UART_SendString("INIT: Sensor no calibrado, iniciando soft reset...\n");
     a7e:	89 ea       	ldi	r24, 0xA9	; 169
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	if (!AHT10_SoftReset())
     a86:	0e 94 9d 01 	call	0x33a	; 0x33a <AHT10_SoftReset>
     a8a:	18 2f       	mov	r17, r24
     a8c:	81 11       	cpse	r24, r1
     a8e:	05 c0       	rjmp	.+10     	; 0xa9a <AHT10_Init+0x7a>
	{
		UART_SendString("INIT: ERROR DE RESET\n");
     a90:	8d ed       	ldi	r24, 0xDD	; 221
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		return 0;
     a98:	c1 c0       	rjmp	.+386    	; 0xc1c <AHT10_Init+0x1fc>
     a9a:	2f ef       	ldi	r18, 0xFF	; 255
     a9c:	81 ee       	ldi	r24, 0xE1	; 225
     a9e:	94 e0       	ldi	r25, 0x04	; 4
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	80 40       	sbci	r24, 0x00	; 0
     aa4:	90 40       	sbci	r25, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <AHT10_Init+0x80>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <AHT10_Init+0x8a>
     aaa:	00 00       	nop
	}
	
	_delay_ms(100); // Espera después del reset
	
	// Verificar si el reset solucionó el problema
	if (!AHT10_GetStatus(&status)) {
     aac:	ce 01       	movw	r24, r28
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	0e 94 26 02 	call	0x44c	; 0x44c <AHT10_GetStatus>
     ab4:	18 2f       	mov	r17, r24
     ab6:	81 11       	cpse	r24, r1
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <AHT10_Init+0xa4>
		UART_SendString("INIT: ERROR LEYENDO ESTADO POST-RESET\n");
     aba:	83 ef       	ldi	r24, 0xF3	; 243
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		return 0;
     ac2:	ac c0       	rjmp	.+344    	; 0xc1c <AHT10_Init+0x1fc>
	}
	
	UART_SendString("INIT: Estado post-reset: 0x");
     ac4:	8a e1       	ldi	r24, 0x1A	; 26
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	send_hex_byte(status);
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	0e 94 db 04 	call	0x9b6	; 0x9b6 <send_hex_byte>
	UART_SendString("\n");
     ad2:	86 ea       	ldi	r24, 0xA6	; 166
     ad4:	95 e0       	ldi	r25, 0x05	; 5
     ad6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	// Si ya está calibrado después del reset, perfecto
	if (status & AHT10_STATUS_CALIB) {
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	08 2f       	mov	r16, r24
     ade:	08 70       	andi	r16, 0x08	; 8
     ae0:	83 ff       	sbrs	r24, 3
     ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <AHT10_Init+0xd0>
		UART_SendString("INIT: SENSOR CALIBRADO DESPUES DE RESET\n");
     ae4:	86 e3       	ldi	r24, 0x36	; 54
     ae6:	93 e0       	ldi	r25, 0x03	; 3
     ae8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		return 1;
     aec:	11 e0       	ldi	r17, 0x01	; 1
     aee:	96 c0       	rjmp	.+300    	; 0xc1c <AHT10_Init+0x1fc>
	}
	
	UART_SendString("INIT: Intentando comando de calibracion alternativo...\n");
     af0:	8f e5       	ldi	r24, 0x5F	; 95
     af2:	93 e0       	ldi	r25, 0x03	; 3
     af4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	// ALTERNATIVA: Usar método directo de registro
	if (!I2C_Write_Register(AHT10_ADDRESS, 0xE1, 0x08)) {
     af8:	48 e0       	ldi	r20, 0x08	; 8
     afa:	61 ee       	ldi	r22, 0xE1	; 225
     afc:	88 e3       	ldi	r24, 0x38	; 56
     afe:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Write_Register>
     b02:	18 2f       	mov	r17, r24
     b04:	81 11       	cpse	r24, r1
     b06:	05 c0       	rjmp	.+10     	; 0xb12 <AHT10_Init+0xf2>
		UART_SendString("INIT: ERROR ESCRIBIENDO REGISTRO 0xE1\n");
     b08:	87 e9       	ldi	r24, 0x97	; 151
     b0a:	93 e0       	ldi	r25, 0x03	; 3
     b0c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		return 0;
     b10:	85 c0       	rjmp	.+266    	; 0xc1c <AHT10_Init+0x1fc>
     b12:	8f e3       	ldi	r24, 0x3F	; 63
     b14:	9c e9       	ldi	r25, 0x9C	; 156
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <AHT10_Init+0xf6>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <AHT10_Init+0xfc>
     b1c:	00 00       	nop
	}
	
	_delay_ms(10);
	
	// Segundo byte del comando
	if (!I2C_Write_Register(AHT10_ADDRESS, 0xE1, 0x00)) {
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	61 ee       	ldi	r22, 0xE1	; 225
     b22:	88 e3       	ldi	r24, 0x38	; 56
     b24:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Write_Register>
     b28:	18 2f       	mov	r17, r24
     b2a:	81 11       	cpse	r24, r1
     b2c:	05 c0       	rjmp	.+10     	; 0xb38 <AHT10_Init+0x118>
		UART_SendString("INIT: ERROR ESCRIBIENDO SEGUNDO BYTE\n");
     b2e:	8e eb       	ldi	r24, 0xBE	; 190
     b30:	93 e0       	ldi	r25, 0x03	; 3
     b32:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		return 0;
     b36:	72 c0       	rjmp	.+228    	; 0xc1c <AHT10_Init+0x1fc>
	}
	
	UART_SendString("INIT: Comando de calibracion enviado, esperando...\n");
     b38:	84 ee       	ldi	r24, 0xE4	; 228
     b3a:	93 e0       	ldi	r25, 0x03	; 3
     b3c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	25 ea       	ldi	r18, 0xA5	; 165
     b44:	8e e0       	ldi	r24, 0x0E	; 14
     b46:	91 50       	subi	r25, 0x01	; 1
     b48:	20 40       	sbci	r18, 0x00	; 0
     b4a:	80 40       	sbci	r24, 0x00	; 0
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <AHT10_Init+0x126>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <AHT10_Init+0x130>
     b50:	00 00       	nop
	_delay_ms(300); // Espera para calibración
	
	// Verificar calibración
	uint16_t timeout = 0;
     b52:	e1 2c       	mov	r14, r1
     b54:	f1 2c       	mov	r15, r1
     b56:	8f e3       	ldi	r24, 0x3F	; 63
     b58:	9c e9       	ldi	r25, 0x9C	; 156
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <AHT10_Init+0x13a>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <AHT10_Init+0x140>
     b60:	00 00       	nop
	do {
		_delay_ms(10);
		timeout++;
     b62:	9f ef       	ldi	r25, 0xFF	; 255
     b64:	e9 1a       	sub	r14, r25
     b66:	f9 0a       	sbc	r15, r25
		
		if (timeout > 100) {
     b68:	25 e6       	ldi	r18, 0x65	; 101
     b6a:	e2 16       	cp	r14, r18
     b6c:	f1 04       	cpc	r15, r1
     b6e:	30 f0       	brcs	.+12     	; 0xb7c <AHT10_Init+0x15c>
			UART_SendString("INIT: TIMEOUT EN CALIBRACION\n");
     b70:	88 e1       	ldi	r24, 0x18	; 24
     b72:	94 e0       	ldi	r25, 0x04	; 4
     b74:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
			return 0;
     b78:	10 2f       	mov	r17, r16
     b7a:	50 c0       	rjmp	.+160    	; 0xc1c <AHT10_Init+0x1fc>
		}
		
		if (!AHT10_GetStatus(&status)) {
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	0e 94 26 02 	call	0x44c	; 0x44c <AHT10_GetStatus>
     b84:	18 2f       	mov	r17, r24
     b86:	81 11       	cpse	r24, r1
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <AHT10_Init+0x174>
			UART_SendString("INIT: ERROR LEYENDO ESTADO\n");
     b8a:	86 e3       	ldi	r24, 0x36	; 54
     b8c:	94 e0       	ldi	r25, 0x04	; 4
     b8e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
			return 0;
     b92:	44 c0       	rjmp	.+136    	; 0xc1c <AHT10_Init+0x1fc>
		}
		
	} while (status & AHT10_STATUS_BUSY);
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	88 23       	and	r24, r24
     b98:	f4 f2       	brlt	.-68     	; 0xb56 <AHT10_Init+0x136>
	
	UART_SendString("INIT: Estado final: 0x");
     b9a:	82 e5       	ldi	r24, 0x52	; 82
     b9c:	94 e0       	ldi	r25, 0x04	; 4
     b9e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	send_hex_byte(status);
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <send_hex_byte>
	UART_SendString("\n");
     ba8:	86 ea       	ldi	r24, 0xA6	; 166
     baa:	95 e0       	ldi	r25, 0x05	; 5
     bac:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	if ((status & AHT10_STATUS_CALIB) == 0) {
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	83 fd       	sbrc	r24, 3
     bb4:	2e c0       	rjmp	.+92     	; 0xc12 <AHT10_Init+0x1f2>
		UART_SendString("INIT: SENSOR NO SE PUDO CALIBRAR\n");
     bb6:	89 e6       	ldi	r24, 0x69	; 105
     bb8:	94 e0       	ldi	r25, 0x04	; 4
     bba:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		
		// ÚLTIMO INTENTO: Leer medición directamente (SIN FLOATS)
		UART_SendString("INIT: Intentando lectura directa...\n");
     bbe:	8b e8       	ldi	r24, 0x8B	; 139
     bc0:	94 e0       	ldi	r25, 0x04	; 4
     bc2:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
		uint16_t temp_scaled, hum_scaled;
		if (AHT10_ReadMeasurements(&temp_scaled, &hum_scaled)) {
     bc6:	be 01       	movw	r22, r28
     bc8:	6e 5f       	subi	r22, 0xFE	; 254
     bca:	7f 4f       	sbci	r23, 0xFF	; 255
     bcc:	ce 01       	movw	r24, r28
     bce:	04 96       	adiw	r24, 0x04	; 4
     bd0:	0e 94 ed 02 	call	0x5da	; 0x5da <AHT10_ReadMeasurements>
     bd4:	18 2f       	mov	r17, r24
     bd6:	88 23       	and	r24, r24
     bd8:	09 f1       	breq	.+66     	; 0xc1c <AHT10_Init+0x1fc>
			UART_SendString("INIT: LECTURA DIRECTA EXITOSA - Sensor funciona!\n");
     bda:	80 eb       	ldi	r24, 0xB0	; 176
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
			
			// Mostrar valores leídos para debug
			UART_SendString("INIT: Temp: ");
     be2:	82 ee       	ldi	r24, 0xE2	; 226
     be4:	94 e0       	ldi	r25, 0x04	; 4
     be6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
			send_decimal(temp_scaled, 2);
     bea:	62 e0       	ldi	r22, 0x02	; 2
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	9d 81       	ldd	r25, Y+5	; 0x05
     bf0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <send_decimal>
			UART_SendString("C, Hum: ");
     bf4:	8f ee       	ldi	r24, 0xEF	; 239
     bf6:	94 e0       	ldi	r25, 0x04	; 4
     bf8:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
			send_decimal(hum_scaled, 2);
     bfc:	62 e0       	ldi	r22, 0x02	; 2
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	9b 81       	ldd	r25, Y+3	; 0x03
     c02:	0e 94 7e 03 	call	0x6fc	; 0x6fc <send_decimal>
			UART_SendString("%\n");
     c06:	88 ef       	ldi	r24, 0xF8	; 248
     c08:	94 e0       	ldi	r25, 0x04	; 4
     c0a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
			
			return 1;
     c0e:	11 e0       	ldi	r17, 0x01	; 1
     c10:	05 c0       	rjmp	.+10     	; 0xc1c <AHT10_Init+0x1fc>
		}
		
		return 0;
	}
	
	UART_SendString("INIT: CALIBRACION EXITOSA!\n");
     c12:	8b ef       	ldi	r24, 0xFB	; 251
     c14:	94 e0       	ldi	r25, 0x04	; 4
     c16:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	return 1;
     c1a:	11 e0       	ldi	r17, 0x01	; 1
}
     c1c:	81 2f       	mov	r24, r17
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	08 95       	ret

00000c36 <setup>:
// NON-Interrupt subroutines

//----------------------FUNCION SETUP--------------------------------
void setup(){
	
	cli();
     c36:	f8 94       	cli
	UART_init(1); // Inicializar comunicacion serial a 9600 baundrys con interrupciones de recepcion habilitadas
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
	UART_SendString("Comunicacion serial inicializada correctamente \n");
     c3e:	87 e1       	ldi	r24, 0x17	; 23
     c40:	95 e0       	ldi	r25, 0x05	; 5
     c42:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	I2C_Master_Init(100000, 1); // Inicializar I2C
     c46:	41 e0       	ldi	r20, 0x01	; 1
     c48:	60 ea       	ldi	r22, 0xA0	; 160
     c4a:	76 e8       	ldi	r23, 0x86	; 134
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Master_Init>
	UART_SendString("Comunicacion I2C inicializada \n");
     c54:	88 e4       	ldi	r24, 0x48	; 72
     c56:	95 e0       	ldi	r25, 0x05	; 5
     c58:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	

	// Revisando dispositivos I2C
	I2C_Scanner();
     c5c:	0e 94 93 04 	call	0x926	; 0x926 <I2C_Scanner>
	
	//Inicializacion de AHT10
	if (AHT10_Init() == 1)
     c60:	0e 94 10 05 	call	0xa20	; 0xa20 <AHT10_Init>
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	29 f4       	brne	.+10     	; 0xc72 <setup+0x3c>
	{
		UART_SendString("Sensor AHT10 inicializado correctamente \n");
     c68:	88 e6       	ldi	r24, 0x68	; 104
     c6a:	95 e0       	ldi	r25, 0x05	; 5
     c6c:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
     c70:	04 c0       	rjmp	.+8      	; 0xc7a <setup+0x44>
	} else {
		UART_SendString("Sensor AHT10: ERROR \n");
     c72:	82 e9       	ldi	r24, 0x92	; 146
     c74:	95 e0       	ldi	r25, 0x05	; 5
     c76:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
	
	
	
	

	sei();
     c7a:	78 94       	sei
     c7c:	08 95       	ret

00000c7e <main>:
// Main Function

int main(void)
{
	
	setup();
     c7e:	0e 94 1b 06 	call	0xc36	; 0xc36 <setup>
	
	while (1)
	{
		

		AHT10_OutString(); //LEctura de la humedad en formato Hxx.xH
     c82:	0e 94 80 04 	call	0x900	; 0x900 <AHT10_OutString>
     c86:	2f ef       	ldi	r18, 0xFF	; 255
     c88:	87 ea       	ldi	r24, 0xA7	; 167
     c8a:	91 e6       	ldi	r25, 0x61	; 97
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	80 40       	sbci	r24, 0x00	; 0
     c90:	90 40       	sbci	r25, 0x00	; 0
     c92:	e1 f7       	brne	.-8      	; 0xc8c <main+0xe>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <main+0x18>
     c96:	00 00       	nop
     c98:	f4 cf       	rjmp	.-24     	; 0xc82 <main+0x4>

00000c9a <__udivmodhi4>:
     c9a:	aa 1b       	sub	r26, r26
     c9c:	bb 1b       	sub	r27, r27
     c9e:	51 e1       	ldi	r21, 0x11	; 17
     ca0:	07 c0       	rjmp	.+14     	; 0xcb0 <__udivmodhi4_ep>

00000ca2 <__udivmodhi4_loop>:
     ca2:	aa 1f       	adc	r26, r26
     ca4:	bb 1f       	adc	r27, r27
     ca6:	a6 17       	cp	r26, r22
     ca8:	b7 07       	cpc	r27, r23
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__udivmodhi4_ep>
     cac:	a6 1b       	sub	r26, r22
     cae:	b7 0b       	sbc	r27, r23

00000cb0 <__udivmodhi4_ep>:
     cb0:	88 1f       	adc	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	5a 95       	dec	r21
     cb6:	a9 f7       	brne	.-22     	; 0xca2 <__udivmodhi4_loop>
     cb8:	80 95       	com	r24
     cba:	90 95       	com	r25
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	08 95       	ret

00000cc2 <__udivmodsi4>:
     cc2:	a1 e2       	ldi	r26, 0x21	; 33
     cc4:	1a 2e       	mov	r1, r26
     cc6:	aa 1b       	sub	r26, r26
     cc8:	bb 1b       	sub	r27, r27
     cca:	fd 01       	movw	r30, r26
     ccc:	0d c0       	rjmp	.+26     	; 0xce8 <__udivmodsi4_ep>

00000cce <__udivmodsi4_loop>:
     cce:	aa 1f       	adc	r26, r26
     cd0:	bb 1f       	adc	r27, r27
     cd2:	ee 1f       	adc	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	a2 17       	cp	r26, r18
     cd8:	b3 07       	cpc	r27, r19
     cda:	e4 07       	cpc	r30, r20
     cdc:	f5 07       	cpc	r31, r21
     cde:	20 f0       	brcs	.+8      	; 0xce8 <__udivmodsi4_ep>
     ce0:	a2 1b       	sub	r26, r18
     ce2:	b3 0b       	sbc	r27, r19
     ce4:	e4 0b       	sbc	r30, r20
     ce6:	f5 0b       	sbc	r31, r21

00000ce8 <__udivmodsi4_ep>:
     ce8:	66 1f       	adc	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	88 1f       	adc	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	1a 94       	dec	r1
     cf2:	69 f7       	brne	.-38     	; 0xcce <__udivmodsi4_loop>
     cf4:	60 95       	com	r22
     cf6:	70 95       	com	r23
     cf8:	80 95       	com	r24
     cfa:	90 95       	com	r25
     cfc:	9b 01       	movw	r18, r22
     cfe:	ac 01       	movw	r20, r24
     d00:	bd 01       	movw	r22, r26
     d02:	cf 01       	movw	r24, r30
     d04:	08 95       	ret

00000d06 <__umulhisi3>:
     d06:	a2 9f       	mul	r26, r18
     d08:	b0 01       	movw	r22, r0
     d0a:	b3 9f       	mul	r27, r19
     d0c:	c0 01       	movw	r24, r0
     d0e:	a3 9f       	mul	r26, r19
     d10:	70 0d       	add	r23, r0
     d12:	81 1d       	adc	r24, r1
     d14:	11 24       	eor	r1, r1
     d16:	91 1d       	adc	r25, r1
     d18:	b2 9f       	mul	r27, r18
     d1a:	70 0d       	add	r23, r0
     d1c:	81 1d       	adc	r24, r1
     d1e:	11 24       	eor	r1, r1
     d20:	91 1d       	adc	r25, r1
     d22:	08 95       	ret

00000d24 <__muluhisi3>:
     d24:	0e 94 83 06 	call	0xd06	; 0xd06 <__umulhisi3>
     d28:	a5 9f       	mul	r26, r21
     d2a:	90 0d       	add	r25, r0
     d2c:	b4 9f       	mul	r27, r20
     d2e:	90 0d       	add	r25, r0
     d30:	a4 9f       	mul	r26, r20
     d32:	80 0d       	add	r24, r0
     d34:	91 1d       	adc	r25, r1
     d36:	11 24       	eor	r1, r1
     d38:	08 95       	ret

00000d3a <sprintf>:
     d3a:	ae e0       	ldi	r26, 0x0E	; 14
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e3 ea       	ldi	r30, 0xA3	; 163
     d40:	f6 e0       	ldi	r31, 0x06	; 6
     d42:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__prologue_saves__+0x1c>
     d46:	0d 89       	ldd	r16, Y+21	; 0x15
     d48:	1e 89       	ldd	r17, Y+22	; 0x16
     d4a:	86 e0       	ldi	r24, 0x06	; 6
     d4c:	8c 83       	std	Y+4, r24	; 0x04
     d4e:	1a 83       	std	Y+2, r17	; 0x02
     d50:	09 83       	std	Y+1, r16	; 0x01
     d52:	8f ef       	ldi	r24, 0xFF	; 255
     d54:	9f e7       	ldi	r25, 0x7F	; 127
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
     d5a:	ae 01       	movw	r20, r28
     d5c:	47 5e       	subi	r20, 0xE7	; 231
     d5e:	5f 4f       	sbci	r21, 0xFF	; 255
     d60:	6f 89       	ldd	r22, Y+23	; 0x17
     d62:	78 8d       	ldd	r23, Y+24	; 0x18
     d64:	ce 01       	movw	r24, r28
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	0e 94 bf 06 	call	0xd7e	; 0xd7e <vfprintf>
     d6c:	ef 81       	ldd	r30, Y+7	; 0x07
     d6e:	f8 85       	ldd	r31, Y+8	; 0x08
     d70:	e0 0f       	add	r30, r16
     d72:	f1 1f       	adc	r31, r17
     d74:	10 82       	st	Z, r1
     d76:	2e 96       	adiw	r28, 0x0e	; 14
     d78:	e4 e0       	ldi	r30, 0x04	; 4
     d7a:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__epilogue_restores__+0x1c>

00000d7e <vfprintf>:
     d7e:	ab e0       	ldi	r26, 0x0B	; 11
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e5 ec       	ldi	r30, 0xC5	; 197
     d84:	f6 e0       	ldi	r31, 0x06	; 6
     d86:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__prologue_saves__>
     d8a:	6c 01       	movw	r12, r24
     d8c:	7b 01       	movw	r14, r22
     d8e:	8a 01       	movw	r16, r20
     d90:	fc 01       	movw	r30, r24
     d92:	17 82       	std	Z+7, r1	; 0x07
     d94:	16 82       	std	Z+6, r1	; 0x06
     d96:	83 81       	ldd	r24, Z+3	; 0x03
     d98:	81 ff       	sbrs	r24, 1
     d9a:	cc c1       	rjmp	.+920    	; 0x1134 <vfprintf+0x3b6>
     d9c:	ce 01       	movw	r24, r28
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	3c 01       	movw	r6, r24
     da2:	f6 01       	movw	r30, r12
     da4:	93 81       	ldd	r25, Z+3	; 0x03
     da6:	f7 01       	movw	r30, r14
     da8:	93 fd       	sbrc	r25, 3
     daa:	85 91       	lpm	r24, Z+
     dac:	93 ff       	sbrs	r25, 3
     dae:	81 91       	ld	r24, Z+
     db0:	7f 01       	movw	r14, r30
     db2:	88 23       	and	r24, r24
     db4:	09 f4       	brne	.+2      	; 0xdb8 <vfprintf+0x3a>
     db6:	ba c1       	rjmp	.+884    	; 0x112c <vfprintf+0x3ae>
     db8:	85 32       	cpi	r24, 0x25	; 37
     dba:	39 f4       	brne	.+14     	; 0xdca <vfprintf+0x4c>
     dbc:	93 fd       	sbrc	r25, 3
     dbe:	85 91       	lpm	r24, Z+
     dc0:	93 ff       	sbrs	r25, 3
     dc2:	81 91       	ld	r24, Z+
     dc4:	7f 01       	movw	r14, r30
     dc6:	85 32       	cpi	r24, 0x25	; 37
     dc8:	29 f4       	brne	.+10     	; 0xdd4 <vfprintf+0x56>
     dca:	b6 01       	movw	r22, r12
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 b6 08 	call	0x116c	; 0x116c <fputc>
     dd2:	e7 cf       	rjmp	.-50     	; 0xda2 <vfprintf+0x24>
     dd4:	91 2c       	mov	r9, r1
     dd6:	21 2c       	mov	r2, r1
     dd8:	31 2c       	mov	r3, r1
     dda:	ff e1       	ldi	r31, 0x1F	; 31
     ddc:	f3 15       	cp	r31, r3
     dde:	d8 f0       	brcs	.+54     	; 0xe16 <vfprintf+0x98>
     de0:	8b 32       	cpi	r24, 0x2B	; 43
     de2:	79 f0       	breq	.+30     	; 0xe02 <vfprintf+0x84>
     de4:	38 f4       	brcc	.+14     	; 0xdf4 <vfprintf+0x76>
     de6:	80 32       	cpi	r24, 0x20	; 32
     de8:	79 f0       	breq	.+30     	; 0xe08 <vfprintf+0x8a>
     dea:	83 32       	cpi	r24, 0x23	; 35
     dec:	a1 f4       	brne	.+40     	; 0xe16 <vfprintf+0x98>
     dee:	23 2d       	mov	r18, r3
     df0:	20 61       	ori	r18, 0x10	; 16
     df2:	1d c0       	rjmp	.+58     	; 0xe2e <vfprintf+0xb0>
     df4:	8d 32       	cpi	r24, 0x2D	; 45
     df6:	61 f0       	breq	.+24     	; 0xe10 <vfprintf+0x92>
     df8:	80 33       	cpi	r24, 0x30	; 48
     dfa:	69 f4       	brne	.+26     	; 0xe16 <vfprintf+0x98>
     dfc:	23 2d       	mov	r18, r3
     dfe:	21 60       	ori	r18, 0x01	; 1
     e00:	16 c0       	rjmp	.+44     	; 0xe2e <vfprintf+0xb0>
     e02:	83 2d       	mov	r24, r3
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	38 2e       	mov	r3, r24
     e08:	e3 2d       	mov	r30, r3
     e0a:	e4 60       	ori	r30, 0x04	; 4
     e0c:	3e 2e       	mov	r3, r30
     e0e:	2a c0       	rjmp	.+84     	; 0xe64 <vfprintf+0xe6>
     e10:	f3 2d       	mov	r31, r3
     e12:	f8 60       	ori	r31, 0x08	; 8
     e14:	1d c0       	rjmp	.+58     	; 0xe50 <vfprintf+0xd2>
     e16:	37 fc       	sbrc	r3, 7
     e18:	2d c0       	rjmp	.+90     	; 0xe74 <vfprintf+0xf6>
     e1a:	20 ed       	ldi	r18, 0xD0	; 208
     e1c:	28 0f       	add	r18, r24
     e1e:	2a 30       	cpi	r18, 0x0A	; 10
     e20:	40 f0       	brcs	.+16     	; 0xe32 <vfprintf+0xb4>
     e22:	8e 32       	cpi	r24, 0x2E	; 46
     e24:	b9 f4       	brne	.+46     	; 0xe54 <vfprintf+0xd6>
     e26:	36 fc       	sbrc	r3, 6
     e28:	81 c1       	rjmp	.+770    	; 0x112c <vfprintf+0x3ae>
     e2a:	23 2d       	mov	r18, r3
     e2c:	20 64       	ori	r18, 0x40	; 64
     e2e:	32 2e       	mov	r3, r18
     e30:	19 c0       	rjmp	.+50     	; 0xe64 <vfprintf+0xe6>
     e32:	36 fe       	sbrs	r3, 6
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <vfprintf+0xc4>
     e36:	8a e0       	ldi	r24, 0x0A	; 10
     e38:	98 9e       	mul	r9, r24
     e3a:	20 0d       	add	r18, r0
     e3c:	11 24       	eor	r1, r1
     e3e:	92 2e       	mov	r9, r18
     e40:	11 c0       	rjmp	.+34     	; 0xe64 <vfprintf+0xe6>
     e42:	ea e0       	ldi	r30, 0x0A	; 10
     e44:	2e 9e       	mul	r2, r30
     e46:	20 0d       	add	r18, r0
     e48:	11 24       	eor	r1, r1
     e4a:	22 2e       	mov	r2, r18
     e4c:	f3 2d       	mov	r31, r3
     e4e:	f0 62       	ori	r31, 0x20	; 32
     e50:	3f 2e       	mov	r3, r31
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <vfprintf+0xe6>
     e54:	8c 36       	cpi	r24, 0x6C	; 108
     e56:	21 f4       	brne	.+8      	; 0xe60 <vfprintf+0xe2>
     e58:	83 2d       	mov	r24, r3
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	38 2e       	mov	r3, r24
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <vfprintf+0xe6>
     e60:	88 36       	cpi	r24, 0x68	; 104
     e62:	41 f4       	brne	.+16     	; 0xe74 <vfprintf+0xf6>
     e64:	f7 01       	movw	r30, r14
     e66:	93 fd       	sbrc	r25, 3
     e68:	85 91       	lpm	r24, Z+
     e6a:	93 ff       	sbrs	r25, 3
     e6c:	81 91       	ld	r24, Z+
     e6e:	7f 01       	movw	r14, r30
     e70:	81 11       	cpse	r24, r1
     e72:	b3 cf       	rjmp	.-154    	; 0xdda <vfprintf+0x5c>
     e74:	98 2f       	mov	r25, r24
     e76:	9f 7d       	andi	r25, 0xDF	; 223
     e78:	95 54       	subi	r25, 0x45	; 69
     e7a:	93 30       	cpi	r25, 0x03	; 3
     e7c:	28 f4       	brcc	.+10     	; 0xe88 <vfprintf+0x10a>
     e7e:	0c 5f       	subi	r16, 0xFC	; 252
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	9f e3       	ldi	r25, 0x3F	; 63
     e84:	99 83       	std	Y+1, r25	; 0x01
     e86:	0d c0       	rjmp	.+26     	; 0xea2 <vfprintf+0x124>
     e88:	83 36       	cpi	r24, 0x63	; 99
     e8a:	31 f0       	breq	.+12     	; 0xe98 <vfprintf+0x11a>
     e8c:	83 37       	cpi	r24, 0x73	; 115
     e8e:	71 f0       	breq	.+28     	; 0xeac <vfprintf+0x12e>
     e90:	83 35       	cpi	r24, 0x53	; 83
     e92:	09 f0       	breq	.+2      	; 0xe96 <vfprintf+0x118>
     e94:	59 c0       	rjmp	.+178    	; 0xf48 <vfprintf+0x1ca>
     e96:	21 c0       	rjmp	.+66     	; 0xeda <vfprintf+0x15c>
     e98:	f8 01       	movw	r30, r16
     e9a:	80 81       	ld	r24, Z
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	0e 5f       	subi	r16, 0xFE	; 254
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	88 24       	eor	r8, r8
     ea4:	83 94       	inc	r8
     ea6:	91 2c       	mov	r9, r1
     ea8:	53 01       	movw	r10, r6
     eaa:	13 c0       	rjmp	.+38     	; 0xed2 <vfprintf+0x154>
     eac:	28 01       	movw	r4, r16
     eae:	f2 e0       	ldi	r31, 0x02	; 2
     eb0:	4f 0e       	add	r4, r31
     eb2:	51 1c       	adc	r5, r1
     eb4:	f8 01       	movw	r30, r16
     eb6:	a0 80       	ld	r10, Z
     eb8:	b1 80       	ldd	r11, Z+1	; 0x01
     eba:	36 fe       	sbrs	r3, 6
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <vfprintf+0x146>
     ebe:	69 2d       	mov	r22, r9
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <vfprintf+0x14a>
     ec4:	6f ef       	ldi	r22, 0xFF	; 255
     ec6:	7f ef       	ldi	r23, 0xFF	; 255
     ec8:	c5 01       	movw	r24, r10
     eca:	0e 94 ab 08 	call	0x1156	; 0x1156 <strnlen>
     ece:	4c 01       	movw	r8, r24
     ed0:	82 01       	movw	r16, r4
     ed2:	f3 2d       	mov	r31, r3
     ed4:	ff 77       	andi	r31, 0x7F	; 127
     ed6:	3f 2e       	mov	r3, r31
     ed8:	16 c0       	rjmp	.+44     	; 0xf06 <vfprintf+0x188>
     eda:	28 01       	movw	r4, r16
     edc:	22 e0       	ldi	r18, 0x02	; 2
     ede:	42 0e       	add	r4, r18
     ee0:	51 1c       	adc	r5, r1
     ee2:	f8 01       	movw	r30, r16
     ee4:	a0 80       	ld	r10, Z
     ee6:	b1 80       	ldd	r11, Z+1	; 0x01
     ee8:	36 fe       	sbrs	r3, 6
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <vfprintf+0x174>
     eec:	69 2d       	mov	r22, r9
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <vfprintf+0x178>
     ef2:	6f ef       	ldi	r22, 0xFF	; 255
     ef4:	7f ef       	ldi	r23, 0xFF	; 255
     ef6:	c5 01       	movw	r24, r10
     ef8:	0e 94 a0 08 	call	0x1140	; 0x1140 <strnlen_P>
     efc:	4c 01       	movw	r8, r24
     efe:	f3 2d       	mov	r31, r3
     f00:	f0 68       	ori	r31, 0x80	; 128
     f02:	3f 2e       	mov	r3, r31
     f04:	82 01       	movw	r16, r4
     f06:	33 fc       	sbrc	r3, 3
     f08:	1b c0       	rjmp	.+54     	; 0xf40 <vfprintf+0x1c2>
     f0a:	82 2d       	mov	r24, r2
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	88 16       	cp	r8, r24
     f10:	99 06       	cpc	r9, r25
     f12:	b0 f4       	brcc	.+44     	; 0xf40 <vfprintf+0x1c2>
     f14:	b6 01       	movw	r22, r12
     f16:	80 e2       	ldi	r24, 0x20	; 32
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 b6 08 	call	0x116c	; 0x116c <fputc>
     f1e:	2a 94       	dec	r2
     f20:	f4 cf       	rjmp	.-24     	; 0xf0a <vfprintf+0x18c>
     f22:	f5 01       	movw	r30, r10
     f24:	37 fc       	sbrc	r3, 7
     f26:	85 91       	lpm	r24, Z+
     f28:	37 fe       	sbrs	r3, 7
     f2a:	81 91       	ld	r24, Z+
     f2c:	5f 01       	movw	r10, r30
     f2e:	b6 01       	movw	r22, r12
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 b6 08 	call	0x116c	; 0x116c <fputc>
     f36:	21 10       	cpse	r2, r1
     f38:	2a 94       	dec	r2
     f3a:	21 e0       	ldi	r18, 0x01	; 1
     f3c:	82 1a       	sub	r8, r18
     f3e:	91 08       	sbc	r9, r1
     f40:	81 14       	cp	r8, r1
     f42:	91 04       	cpc	r9, r1
     f44:	71 f7       	brne	.-36     	; 0xf22 <vfprintf+0x1a4>
     f46:	e8 c0       	rjmp	.+464    	; 0x1118 <vfprintf+0x39a>
     f48:	84 36       	cpi	r24, 0x64	; 100
     f4a:	11 f0       	breq	.+4      	; 0xf50 <vfprintf+0x1d2>
     f4c:	89 36       	cpi	r24, 0x69	; 105
     f4e:	41 f5       	brne	.+80     	; 0xfa0 <vfprintf+0x222>
     f50:	f8 01       	movw	r30, r16
     f52:	37 fe       	sbrs	r3, 7
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <vfprintf+0x1e6>
     f56:	60 81       	ld	r22, Z
     f58:	71 81       	ldd	r23, Z+1	; 0x01
     f5a:	82 81       	ldd	r24, Z+2	; 0x02
     f5c:	93 81       	ldd	r25, Z+3	; 0x03
     f5e:	0c 5f       	subi	r16, 0xFC	; 252
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	08 c0       	rjmp	.+16     	; 0xf74 <vfprintf+0x1f6>
     f64:	60 81       	ld	r22, Z
     f66:	71 81       	ldd	r23, Z+1	; 0x01
     f68:	07 2e       	mov	r0, r23
     f6a:	00 0c       	add	r0, r0
     f6c:	88 0b       	sbc	r24, r24
     f6e:	99 0b       	sbc	r25, r25
     f70:	0e 5f       	subi	r16, 0xFE	; 254
     f72:	1f 4f       	sbci	r17, 0xFF	; 255
     f74:	f3 2d       	mov	r31, r3
     f76:	ff 76       	andi	r31, 0x6F	; 111
     f78:	3f 2e       	mov	r3, r31
     f7a:	97 ff       	sbrs	r25, 7
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <vfprintf+0x212>
     f7e:	90 95       	com	r25
     f80:	80 95       	com	r24
     f82:	70 95       	com	r23
     f84:	61 95       	neg	r22
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	8f 4f       	sbci	r24, 0xFF	; 255
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	f0 68       	ori	r31, 0x80	; 128
     f8e:	3f 2e       	mov	r3, r31
     f90:	2a e0       	ldi	r18, 0x0A	; 10
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	a3 01       	movw	r20, r6
     f96:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__ultoa_invert>
     f9a:	88 2e       	mov	r8, r24
     f9c:	86 18       	sub	r8, r6
     f9e:	45 c0       	rjmp	.+138    	; 0x102a <vfprintf+0x2ac>
     fa0:	85 37       	cpi	r24, 0x75	; 117
     fa2:	31 f4       	brne	.+12     	; 0xfb0 <vfprintf+0x232>
     fa4:	23 2d       	mov	r18, r3
     fa6:	2f 7e       	andi	r18, 0xEF	; 239
     fa8:	b2 2e       	mov	r11, r18
     faa:	2a e0       	ldi	r18, 0x0A	; 10
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	25 c0       	rjmp	.+74     	; 0xffa <vfprintf+0x27c>
     fb0:	93 2d       	mov	r25, r3
     fb2:	99 7f       	andi	r25, 0xF9	; 249
     fb4:	b9 2e       	mov	r11, r25
     fb6:	8f 36       	cpi	r24, 0x6F	; 111
     fb8:	c1 f0       	breq	.+48     	; 0xfea <vfprintf+0x26c>
     fba:	18 f4       	brcc	.+6      	; 0xfc2 <vfprintf+0x244>
     fbc:	88 35       	cpi	r24, 0x58	; 88
     fbe:	79 f0       	breq	.+30     	; 0xfde <vfprintf+0x260>
     fc0:	b5 c0       	rjmp	.+362    	; 0x112c <vfprintf+0x3ae>
     fc2:	80 37       	cpi	r24, 0x70	; 112
     fc4:	19 f0       	breq	.+6      	; 0xfcc <vfprintf+0x24e>
     fc6:	88 37       	cpi	r24, 0x78	; 120
     fc8:	21 f0       	breq	.+8      	; 0xfd2 <vfprintf+0x254>
     fca:	b0 c0       	rjmp	.+352    	; 0x112c <vfprintf+0x3ae>
     fcc:	e9 2f       	mov	r30, r25
     fce:	e0 61       	ori	r30, 0x10	; 16
     fd0:	be 2e       	mov	r11, r30
     fd2:	b4 fe       	sbrs	r11, 4
     fd4:	0d c0       	rjmp	.+26     	; 0xff0 <vfprintf+0x272>
     fd6:	fb 2d       	mov	r31, r11
     fd8:	f4 60       	ori	r31, 0x04	; 4
     fda:	bf 2e       	mov	r11, r31
     fdc:	09 c0       	rjmp	.+18     	; 0xff0 <vfprintf+0x272>
     fde:	34 fe       	sbrs	r3, 4
     fe0:	0a c0       	rjmp	.+20     	; 0xff6 <vfprintf+0x278>
     fe2:	29 2f       	mov	r18, r25
     fe4:	26 60       	ori	r18, 0x06	; 6
     fe6:	b2 2e       	mov	r11, r18
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <vfprintf+0x278>
     fea:	28 e0       	ldi	r18, 0x08	; 8
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	05 c0       	rjmp	.+10     	; 0xffa <vfprintf+0x27c>
     ff0:	20 e1       	ldi	r18, 0x10	; 16
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <vfprintf+0x27c>
     ff6:	20 e1       	ldi	r18, 0x10	; 16
     ff8:	32 e0       	ldi	r19, 0x02	; 2
     ffa:	f8 01       	movw	r30, r16
     ffc:	b7 fe       	sbrs	r11, 7
     ffe:	07 c0       	rjmp	.+14     	; 0x100e <vfprintf+0x290>
    1000:	60 81       	ld	r22, Z
    1002:	71 81       	ldd	r23, Z+1	; 0x01
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	93 81       	ldd	r25, Z+3	; 0x03
    1008:	0c 5f       	subi	r16, 0xFC	; 252
    100a:	1f 4f       	sbci	r17, 0xFF	; 255
    100c:	06 c0       	rjmp	.+12     	; 0x101a <vfprintf+0x29c>
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 5f       	subi	r16, 0xFE	; 254
    1018:	1f 4f       	sbci	r17, 0xFF	; 255
    101a:	a3 01       	movw	r20, r6
    101c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__ultoa_invert>
    1020:	88 2e       	mov	r8, r24
    1022:	86 18       	sub	r8, r6
    1024:	fb 2d       	mov	r31, r11
    1026:	ff 77       	andi	r31, 0x7F	; 127
    1028:	3f 2e       	mov	r3, r31
    102a:	36 fe       	sbrs	r3, 6
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <vfprintf+0x2ca>
    102e:	23 2d       	mov	r18, r3
    1030:	2e 7f       	andi	r18, 0xFE	; 254
    1032:	a2 2e       	mov	r10, r18
    1034:	89 14       	cp	r8, r9
    1036:	58 f4       	brcc	.+22     	; 0x104e <vfprintf+0x2d0>
    1038:	34 fe       	sbrs	r3, 4
    103a:	0b c0       	rjmp	.+22     	; 0x1052 <vfprintf+0x2d4>
    103c:	32 fc       	sbrc	r3, 2
    103e:	09 c0       	rjmp	.+18     	; 0x1052 <vfprintf+0x2d4>
    1040:	83 2d       	mov	r24, r3
    1042:	8e 7e       	andi	r24, 0xEE	; 238
    1044:	a8 2e       	mov	r10, r24
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <vfprintf+0x2d4>
    1048:	b8 2c       	mov	r11, r8
    104a:	a3 2c       	mov	r10, r3
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <vfprintf+0x2d6>
    104e:	b8 2c       	mov	r11, r8
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <vfprintf+0x2d6>
    1052:	b9 2c       	mov	r11, r9
    1054:	a4 fe       	sbrs	r10, 4
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <vfprintf+0x2f8>
    1058:	fe 01       	movw	r30, r28
    105a:	e8 0d       	add	r30, r8
    105c:	f1 1d       	adc	r31, r1
    105e:	80 81       	ld	r24, Z
    1060:	80 33       	cpi	r24, 0x30	; 48
    1062:	21 f4       	brne	.+8      	; 0x106c <vfprintf+0x2ee>
    1064:	9a 2d       	mov	r25, r10
    1066:	99 7e       	andi	r25, 0xE9	; 233
    1068:	a9 2e       	mov	r10, r25
    106a:	09 c0       	rjmp	.+18     	; 0x107e <vfprintf+0x300>
    106c:	a2 fe       	sbrs	r10, 2
    106e:	06 c0       	rjmp	.+12     	; 0x107c <vfprintf+0x2fe>
    1070:	b3 94       	inc	r11
    1072:	b3 94       	inc	r11
    1074:	04 c0       	rjmp	.+8      	; 0x107e <vfprintf+0x300>
    1076:	8a 2d       	mov	r24, r10
    1078:	86 78       	andi	r24, 0x86	; 134
    107a:	09 f0       	breq	.+2      	; 0x107e <vfprintf+0x300>
    107c:	b3 94       	inc	r11
    107e:	a3 fc       	sbrc	r10, 3
    1080:	11 c0       	rjmp	.+34     	; 0x10a4 <vfprintf+0x326>
    1082:	a0 fe       	sbrs	r10, 0
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <vfprintf+0x314>
    1086:	b2 14       	cp	r11, r2
    1088:	88 f4       	brcc	.+34     	; 0x10ac <vfprintf+0x32e>
    108a:	28 0c       	add	r2, r8
    108c:	92 2c       	mov	r9, r2
    108e:	9b 18       	sub	r9, r11
    1090:	0e c0       	rjmp	.+28     	; 0x10ae <vfprintf+0x330>
    1092:	b2 14       	cp	r11, r2
    1094:	60 f4       	brcc	.+24     	; 0x10ae <vfprintf+0x330>
    1096:	b6 01       	movw	r22, r12
    1098:	80 e2       	ldi	r24, 0x20	; 32
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 b6 08 	call	0x116c	; 0x116c <fputc>
    10a0:	b3 94       	inc	r11
    10a2:	f7 cf       	rjmp	.-18     	; 0x1092 <vfprintf+0x314>
    10a4:	b2 14       	cp	r11, r2
    10a6:	18 f4       	brcc	.+6      	; 0x10ae <vfprintf+0x330>
    10a8:	2b 18       	sub	r2, r11
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <vfprintf+0x332>
    10ac:	98 2c       	mov	r9, r8
    10ae:	21 2c       	mov	r2, r1
    10b0:	a4 fe       	sbrs	r10, 4
    10b2:	10 c0       	rjmp	.+32     	; 0x10d4 <vfprintf+0x356>
    10b4:	b6 01       	movw	r22, r12
    10b6:	80 e3       	ldi	r24, 0x30	; 48
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 b6 08 	call	0x116c	; 0x116c <fputc>
    10be:	a2 fe       	sbrs	r10, 2
    10c0:	17 c0       	rjmp	.+46     	; 0x10f0 <vfprintf+0x372>
    10c2:	a1 fc       	sbrc	r10, 1
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <vfprintf+0x34e>
    10c6:	88 e7       	ldi	r24, 0x78	; 120
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <vfprintf+0x352>
    10cc:	88 e5       	ldi	r24, 0x58	; 88
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	b6 01       	movw	r22, r12
    10d2:	0c c0       	rjmp	.+24     	; 0x10ec <vfprintf+0x36e>
    10d4:	8a 2d       	mov	r24, r10
    10d6:	86 78       	andi	r24, 0x86	; 134
    10d8:	59 f0       	breq	.+22     	; 0x10f0 <vfprintf+0x372>
    10da:	a1 fe       	sbrs	r10, 1
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <vfprintf+0x364>
    10de:	8b e2       	ldi	r24, 0x2B	; 43
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <vfprintf+0x366>
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	a7 fc       	sbrc	r10, 7
    10e6:	8d e2       	ldi	r24, 0x2D	; 45
    10e8:	b6 01       	movw	r22, r12
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 b6 08 	call	0x116c	; 0x116c <fputc>
    10f0:	89 14       	cp	r8, r9
    10f2:	38 f4       	brcc	.+14     	; 0x1102 <vfprintf+0x384>
    10f4:	b6 01       	movw	r22, r12
    10f6:	80 e3       	ldi	r24, 0x30	; 48
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 b6 08 	call	0x116c	; 0x116c <fputc>
    10fe:	9a 94       	dec	r9
    1100:	f7 cf       	rjmp	.-18     	; 0x10f0 <vfprintf+0x372>
    1102:	8a 94       	dec	r8
    1104:	f3 01       	movw	r30, r6
    1106:	e8 0d       	add	r30, r8
    1108:	f1 1d       	adc	r31, r1
    110a:	80 81       	ld	r24, Z
    110c:	b6 01       	movw	r22, r12
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 b6 08 	call	0x116c	; 0x116c <fputc>
    1114:	81 10       	cpse	r8, r1
    1116:	f5 cf       	rjmp	.-22     	; 0x1102 <vfprintf+0x384>
    1118:	22 20       	and	r2, r2
    111a:	09 f4       	brne	.+2      	; 0x111e <vfprintf+0x3a0>
    111c:	42 ce       	rjmp	.-892    	; 0xda2 <vfprintf+0x24>
    111e:	b6 01       	movw	r22, r12
    1120:	80 e2       	ldi	r24, 0x20	; 32
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 b6 08 	call	0x116c	; 0x116c <fputc>
    1128:	2a 94       	dec	r2
    112a:	f6 cf       	rjmp	.-20     	; 0x1118 <vfprintf+0x39a>
    112c:	f6 01       	movw	r30, r12
    112e:	86 81       	ldd	r24, Z+6	; 0x06
    1130:	97 81       	ldd	r25, Z+7	; 0x07
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <vfprintf+0x3ba>
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	9f ef       	ldi	r25, 0xFF	; 255
    1138:	2b 96       	adiw	r28, 0x0b	; 11
    113a:	e2 e1       	ldi	r30, 0x12	; 18
    113c:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__epilogue_restores__>

00001140 <strnlen_P>:
    1140:	fc 01       	movw	r30, r24
    1142:	05 90       	lpm	r0, Z+
    1144:	61 50       	subi	r22, 0x01	; 1
    1146:	70 40       	sbci	r23, 0x00	; 0
    1148:	01 10       	cpse	r0, r1
    114a:	d8 f7       	brcc	.-10     	; 0x1142 <strnlen_P+0x2>
    114c:	80 95       	com	r24
    114e:	90 95       	com	r25
    1150:	8e 0f       	add	r24, r30
    1152:	9f 1f       	adc	r25, r31
    1154:	08 95       	ret

00001156 <strnlen>:
    1156:	fc 01       	movw	r30, r24
    1158:	61 50       	subi	r22, 0x01	; 1
    115a:	70 40       	sbci	r23, 0x00	; 0
    115c:	01 90       	ld	r0, Z+
    115e:	01 10       	cpse	r0, r1
    1160:	d8 f7       	brcc	.-10     	; 0x1158 <strnlen+0x2>
    1162:	80 95       	com	r24
    1164:	90 95       	com	r25
    1166:	8e 0f       	add	r24, r30
    1168:	9f 1f       	adc	r25, r31
    116a:	08 95       	ret

0000116c <fputc>:
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	fb 01       	movw	r30, r22
    1176:	23 81       	ldd	r18, Z+3	; 0x03
    1178:	21 fd       	sbrc	r18, 1
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <fputc+0x16>
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	9f ef       	ldi	r25, 0xFF	; 255
    1180:	2c c0       	rjmp	.+88     	; 0x11da <fputc+0x6e>
    1182:	22 ff       	sbrs	r18, 2
    1184:	16 c0       	rjmp	.+44     	; 0x11b2 <fputc+0x46>
    1186:	46 81       	ldd	r20, Z+6	; 0x06
    1188:	57 81       	ldd	r21, Z+7	; 0x07
    118a:	24 81       	ldd	r18, Z+4	; 0x04
    118c:	35 81       	ldd	r19, Z+5	; 0x05
    118e:	42 17       	cp	r20, r18
    1190:	53 07       	cpc	r21, r19
    1192:	44 f4       	brge	.+16     	; 0x11a4 <fputc+0x38>
    1194:	a0 81       	ld	r26, Z
    1196:	b1 81       	ldd	r27, Z+1	; 0x01
    1198:	9d 01       	movw	r18, r26
    119a:	2f 5f       	subi	r18, 0xFF	; 255
    119c:	3f 4f       	sbci	r19, 0xFF	; 255
    119e:	31 83       	std	Z+1, r19	; 0x01
    11a0:	20 83       	st	Z, r18
    11a2:	8c 93       	st	X, r24
    11a4:	26 81       	ldd	r18, Z+6	; 0x06
    11a6:	37 81       	ldd	r19, Z+7	; 0x07
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	37 83       	std	Z+7, r19	; 0x07
    11ae:	26 83       	std	Z+6, r18	; 0x06
    11b0:	14 c0       	rjmp	.+40     	; 0x11da <fputc+0x6e>
    11b2:	8b 01       	movw	r16, r22
    11b4:	ec 01       	movw	r28, r24
    11b6:	fb 01       	movw	r30, r22
    11b8:	00 84       	ldd	r0, Z+8	; 0x08
    11ba:	f1 85       	ldd	r31, Z+9	; 0x09
    11bc:	e0 2d       	mov	r30, r0
    11be:	09 95       	icall
    11c0:	89 2b       	or	r24, r25
    11c2:	e1 f6       	brne	.-72     	; 0x117c <fputc+0x10>
    11c4:	d8 01       	movw	r26, r16
    11c6:	16 96       	adiw	r26, 0x06	; 6
    11c8:	8d 91       	ld	r24, X+
    11ca:	9c 91       	ld	r25, X
    11cc:	17 97       	sbiw	r26, 0x07	; 7
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	17 96       	adiw	r26, 0x07	; 7
    11d2:	9c 93       	st	X, r25
    11d4:	8e 93       	st	-X, r24
    11d6:	16 97       	sbiw	r26, 0x06	; 6
    11d8:	ce 01       	movw	r24, r28
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	08 95       	ret

000011e4 <__ultoa_invert>:
    11e4:	fa 01       	movw	r30, r20
    11e6:	aa 27       	eor	r26, r26
    11e8:	28 30       	cpi	r18, 0x08	; 8
    11ea:	51 f1       	breq	.+84     	; 0x1240 <__ultoa_invert+0x5c>
    11ec:	20 31       	cpi	r18, 0x10	; 16
    11ee:	81 f1       	breq	.+96     	; 0x1250 <__ultoa_invert+0x6c>
    11f0:	e8 94       	clt
    11f2:	6f 93       	push	r22
    11f4:	6e 7f       	andi	r22, 0xFE	; 254
    11f6:	6e 5f       	subi	r22, 0xFE	; 254
    11f8:	7f 4f       	sbci	r23, 0xFF	; 255
    11fa:	8f 4f       	sbci	r24, 0xFF	; 255
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	af 4f       	sbci	r26, 0xFF	; 255
    1200:	b1 e0       	ldi	r27, 0x01	; 1
    1202:	3e d0       	rcall	.+124    	; 0x1280 <__ultoa_invert+0x9c>
    1204:	b4 e0       	ldi	r27, 0x04	; 4
    1206:	3c d0       	rcall	.+120    	; 0x1280 <__ultoa_invert+0x9c>
    1208:	67 0f       	add	r22, r23
    120a:	78 1f       	adc	r23, r24
    120c:	89 1f       	adc	r24, r25
    120e:	9a 1f       	adc	r25, r26
    1210:	a1 1d       	adc	r26, r1
    1212:	68 0f       	add	r22, r24
    1214:	79 1f       	adc	r23, r25
    1216:	8a 1f       	adc	r24, r26
    1218:	91 1d       	adc	r25, r1
    121a:	a1 1d       	adc	r26, r1
    121c:	6a 0f       	add	r22, r26
    121e:	71 1d       	adc	r23, r1
    1220:	81 1d       	adc	r24, r1
    1222:	91 1d       	adc	r25, r1
    1224:	a1 1d       	adc	r26, r1
    1226:	20 d0       	rcall	.+64     	; 0x1268 <__ultoa_invert+0x84>
    1228:	09 f4       	brne	.+2      	; 0x122c <__ultoa_invert+0x48>
    122a:	68 94       	set
    122c:	3f 91       	pop	r19
    122e:	2a e0       	ldi	r18, 0x0A	; 10
    1230:	26 9f       	mul	r18, r22
    1232:	11 24       	eor	r1, r1
    1234:	30 19       	sub	r19, r0
    1236:	30 5d       	subi	r19, 0xD0	; 208
    1238:	31 93       	st	Z+, r19
    123a:	de f6       	brtc	.-74     	; 0x11f2 <__ultoa_invert+0xe>
    123c:	cf 01       	movw	r24, r30
    123e:	08 95       	ret
    1240:	46 2f       	mov	r20, r22
    1242:	47 70       	andi	r20, 0x07	; 7
    1244:	40 5d       	subi	r20, 0xD0	; 208
    1246:	41 93       	st	Z+, r20
    1248:	b3 e0       	ldi	r27, 0x03	; 3
    124a:	0f d0       	rcall	.+30     	; 0x126a <__ultoa_invert+0x86>
    124c:	c9 f7       	brne	.-14     	; 0x1240 <__ultoa_invert+0x5c>
    124e:	f6 cf       	rjmp	.-20     	; 0x123c <__ultoa_invert+0x58>
    1250:	46 2f       	mov	r20, r22
    1252:	4f 70       	andi	r20, 0x0F	; 15
    1254:	40 5d       	subi	r20, 0xD0	; 208
    1256:	4a 33       	cpi	r20, 0x3A	; 58
    1258:	18 f0       	brcs	.+6      	; 0x1260 <__ultoa_invert+0x7c>
    125a:	49 5d       	subi	r20, 0xD9	; 217
    125c:	31 fd       	sbrc	r19, 1
    125e:	40 52       	subi	r20, 0x20	; 32
    1260:	41 93       	st	Z+, r20
    1262:	02 d0       	rcall	.+4      	; 0x1268 <__ultoa_invert+0x84>
    1264:	a9 f7       	brne	.-22     	; 0x1250 <__ultoa_invert+0x6c>
    1266:	ea cf       	rjmp	.-44     	; 0x123c <__ultoa_invert+0x58>
    1268:	b4 e0       	ldi	r27, 0x04	; 4
    126a:	a6 95       	lsr	r26
    126c:	97 95       	ror	r25
    126e:	87 95       	ror	r24
    1270:	77 95       	ror	r23
    1272:	67 95       	ror	r22
    1274:	ba 95       	dec	r27
    1276:	c9 f7       	brne	.-14     	; 0x126a <__ultoa_invert+0x86>
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	61 05       	cpc	r22, r1
    127c:	71 05       	cpc	r23, r1
    127e:	08 95       	ret
    1280:	9b 01       	movw	r18, r22
    1282:	ac 01       	movw	r20, r24
    1284:	0a 2e       	mov	r0, r26
    1286:	06 94       	lsr	r0
    1288:	57 95       	ror	r21
    128a:	47 95       	ror	r20
    128c:	37 95       	ror	r19
    128e:	27 95       	ror	r18
    1290:	ba 95       	dec	r27
    1292:	c9 f7       	brne	.-14     	; 0x1286 <__ultoa_invert+0xa2>
    1294:	62 0f       	add	r22, r18
    1296:	73 1f       	adc	r23, r19
    1298:	84 1f       	adc	r24, r20
    129a:	95 1f       	adc	r25, r21
    129c:	a0 1d       	adc	r26, r0
    129e:	08 95       	ret

000012a0 <__prologue_saves__>:
    12a0:	2f 92       	push	r2
    12a2:	3f 92       	push	r3
    12a4:	4f 92       	push	r4
    12a6:	5f 92       	push	r5
    12a8:	6f 92       	push	r6
    12aa:	7f 92       	push	r7
    12ac:	8f 92       	push	r8
    12ae:	9f 92       	push	r9
    12b0:	af 92       	push	r10
    12b2:	bf 92       	push	r11
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	ca 1b       	sub	r28, r26
    12ca:	db 0b       	sbc	r29, r27
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	09 94       	ijmp

000012d8 <__epilogue_restores__>:
    12d8:	2a 88       	ldd	r2, Y+18	; 0x12
    12da:	39 88       	ldd	r3, Y+17	; 0x11
    12dc:	48 88       	ldd	r4, Y+16	; 0x10
    12de:	5f 84       	ldd	r5, Y+15	; 0x0f
    12e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    12e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    12e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    12e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    12e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    12ea:	b9 84       	ldd	r11, Y+9	; 0x09
    12ec:	c8 84       	ldd	r12, Y+8	; 0x08
    12ee:	df 80       	ldd	r13, Y+7	; 0x07
    12f0:	ee 80       	ldd	r14, Y+6	; 0x06
    12f2:	fd 80       	ldd	r15, Y+5	; 0x05
    12f4:	0c 81       	ldd	r16, Y+4	; 0x04
    12f6:	1b 81       	ldd	r17, Y+3	; 0x03
    12f8:	aa 81       	ldd	r26, Y+2	; 0x02
    12fa:	b9 81       	ldd	r27, Y+1	; 0x01
    12fc:	ce 0f       	add	r28, r30
    12fe:	d1 1d       	adc	r29, r1
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	ed 01       	movw	r28, r26
    130c:	08 95       	ret

0000130e <_exit>:
    130e:	f8 94       	cli

00001310 <__stop_program>:
    1310:	ff cf       	rjmp	.-2      	; 0x1310 <__stop_program>
