
ESCLAVO (SENSOR).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbf  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000895  00000000  00000000  00001123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e8  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d6  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000647  00000000  00000000  0000268a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002cd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 49 01 	call	0x292	; 0x292 <main>
  88:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Slave_Init>:
//*****************************************************************************
// Funcion para inicializar I2C Esclavo
//*****************************************************************************

void I2C_Slave_Init(uint8_t address) {
    DDRC &= ~((1<<DDC4)|(1<<DDC5));  // Pines de I2C como entradas
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7

    TWAR = address << 1;  // Se asigna la direccion que tendra
  96:	88 0f       	add	r24, r24
  98:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    // TWAR = (address << 1 | 0x01);  // Se asigna la direccion que tendra y habilita llamada gen

    // Se habilita la interfaz, ACK automático, se habilita la ISR
    TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  9c:	85 e4       	ldi	r24, 0x45	; 69
  9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a2:	08 95       	ret

000000a4 <set_led>:

volatile int8_t temperature = 0;
volatile uint8_t status_code = 0;

void set_led(uint8_t state) {
    DDRB |= (1 << STATUS_LED);
  a4:	94 b1       	in	r25, 0x04	; 4
  a6:	90 62       	ori	r25, 0x20	; 32
  a8:	94 b9       	out	0x04, r25	; 4
    if(state) {
  aa:	88 23       	and	r24, r24
  ac:	21 f0       	breq	.+8      	; 0xb6 <set_led+0x12>
        PORTB |= (1 << STATUS_LED);
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	08 95       	ret
    } else {
        PORTB &= ~(1 << STATUS_LED);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	08 95       	ret

000000be <blink_pattern>:
    }
}

void blink_pattern(uint8_t code) {
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	d8 2f       	mov	r29, r24
    for(uint8_t i=0; i<code; i++) {
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	19 c0       	rjmp	.+50     	; 0xfa <blink_pattern+0x3c>
        set_led(1);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 52 00 	call	0xa4	; 0xa4 <set_led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	83 ec       	ldi	r24, 0xC3	; 195
  d2:	99 e0       	ldi	r25, 0x09	; 9
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <blink_pattern+0x16>
  dc:	00 c0       	rjmp	.+0      	; 0xde <blink_pattern+0x20>
  de:	00 00       	nop
        _delay_ms(200);
        set_led(0);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 52 00 	call	0xa4	; 0xa4 <set_led>
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 ec       	ldi	r24, 0xC3	; 195
  ea:	99 e0       	ldi	r25, 0x09	; 9
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <blink_pattern+0x2e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <blink_pattern+0x38>
  f6:	00 00       	nop
        PORTB &= ~(1 << STATUS_LED);
    }
}

void blink_pattern(uint8_t code) {
    for(uint8_t i=0; i<code; i++) {
  f8:	cf 5f       	subi	r28, 0xFF	; 255
  fa:	cd 17       	cp	r28, r29
  fc:	28 f3       	brcs	.-54     	; 0xc8 <blink_pattern+0xa>
        set_led(1);
        _delay_ms(200);
        set_led(0);
        _delay_ms(200);
    }
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <read_dht11>:

int8_t read_dht11() {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <read_dht11+0x6>
 10a:	00 d0       	rcall	.+0      	; 0x10c <read_dht11+0x8>
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
    uint8_t data[5] = {0};
 112:	fe 01       	movw	r30, r28
 114:	31 96       	adiw	r30, 0x01	; 1
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	df 01       	movw	r26, r30
 11a:	1d 92       	st	X+, r1
 11c:	8a 95       	dec	r24
 11e:	e9 f7       	brne	.-6      	; 0x11a <read_dht11+0x16>
    uint16_t timeout;
    
    // Start signal
    DDRD |= (1 << DHT11_PIN);
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	80 64       	ori	r24, 0x40	; 64
 124:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~(1 << DHT11_PIN);
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	8f 7b       	andi	r24, 0xBF	; 191
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	bf ef       	ldi	r27, 0xFF	; 255
 12e:	20 ee       	ldi	r18, 0xE0	; 224
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	b1 50       	subi	r27, 0x01	; 1
 134:	20 40       	sbci	r18, 0x00	; 0
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <read_dht11+0x2e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <read_dht11+0x38>
 13c:	00 00       	nop
    _delay_ms(18);
    PORTD |= (1 << DHT11_PIN);
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	80 64       	ori	r24, 0x40	; 64
 142:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	95 ed       	ldi	r25, 0xD5	; 213
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <read_dht11+0x42>
 14a:	00 00       	nop
    _delay_us(40);
    DDRD &= ~(1 << DHT11_PIN);
 14c:	8a b1       	in	r24, 0x0a	; 10
 14e:	8f 7b       	andi	r24, 0xBF	; 191
 150:	8a b9       	out	0x0a, r24	; 10

    // Wait for response
    timeout = 1000;
 152:	88 ee       	ldi	r24, 0xE8	; 232
 154:	93 e0       	ldi	r25, 0x03	; 3
    while((PIND & (1 << DHT11_PIN)) && (timeout > 0)) {
 156:	05 c0       	rjmp	.+10     	; 0x162 <read_dht11+0x5e>
        timeout--;
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	a5 e0       	ldi	r26, 0x05	; 5
 15c:	aa 95       	dec	r26
 15e:	f1 f7       	brne	.-4      	; 0x15c <read_dht11+0x58>
 160:	00 00       	nop
    _delay_us(40);
    DDRD &= ~(1 << DHT11_PIN);

    // Wait for response
    timeout = 1000;
    while((PIND & (1 << DHT11_PIN)) && (timeout > 0)) {
 162:	4e 9b       	sbis	0x09, 6	; 9
 164:	02 c0       	rjmp	.+4      	; 0x16a <read_dht11+0x66>
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	b9 f7       	brne	.-18     	; 0x158 <read_dht11+0x54>
        timeout--;
        _delay_us(1);
    }
    if(timeout == 0) return -1;
 16a:	89 2b       	or	r24, r25
 16c:	09 f4       	brne	.+2      	; 0x170 <read_dht11+0x6c>
 16e:	55 c0       	rjmp	.+170    	; 0x21a <read_dht11+0x116>
 170:	88 ee       	ldi	r24, 0xE8	; 232
 172:	93 e0       	ldi	r25, 0x03	; 3
 174:	05 c0       	rjmp	.+10     	; 0x180 <read_dht11+0x7c>
    
    timeout = 1000;
    while(!(PIND & (1 << DHT11_PIN)) && (timeout > 0)) {
        timeout--;
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	b5 e0       	ldi	r27, 0x05	; 5
 17a:	ba 95       	dec	r27
 17c:	f1 f7       	brne	.-4      	; 0x17a <read_dht11+0x76>
 17e:	00 00       	nop
        _delay_us(1);
    }
    if(timeout == 0) return -1;
    
    timeout = 1000;
    while(!(PIND & (1 << DHT11_PIN)) && (timeout > 0)) {
 180:	4e 99       	sbic	0x09, 6	; 9
 182:	02 c0       	rjmp	.+4      	; 0x188 <read_dht11+0x84>
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	b9 f7       	brne	.-18     	; 0x176 <read_dht11+0x72>
        timeout--;
        _delay_us(1);
    }
    if(timeout == 0) return -2;
 188:	89 2b       	or	r24, r25
 18a:	09 f4       	brne	.+2      	; 0x18e <read_dht11+0x8a>
 18c:	48 c0       	rjmp	.+144    	; 0x21e <read_dht11+0x11a>
 18e:	88 ee       	ldi	r24, 0xE8	; 232
 190:	93 e0       	ldi	r25, 0x03	; 3
 192:	05 c0       	rjmp	.+10     	; 0x19e <read_dht11+0x9a>
    
    timeout = 1000;
    while((PIND & (1 << DHT11_PIN)) && (timeout > 0)) {
        timeout--;
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	25 e0       	ldi	r18, 0x05	; 5
 198:	2a 95       	dec	r18
 19a:	f1 f7       	brne	.-4      	; 0x198 <read_dht11+0x94>
 19c:	00 00       	nop
        _delay_us(1);
    }
    if(timeout == 0) return -2;
    
    timeout = 1000;
    while((PIND & (1 << DHT11_PIN)) && (timeout > 0)) {
 19e:	4e 9b       	sbis	0x09, 6	; 9
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <read_dht11+0xa2>
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	b9 f7       	brne	.-18     	; 0x194 <read_dht11+0x90>
        timeout--;
        _delay_us(1);
    }
    if(timeout == 0) return -3;
 1a6:	89 2b       	or	r24, r25
 1a8:	e1 f1       	breq	.+120    	; 0x222 <read_dht11+0x11e>
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	23 c0       	rjmp	.+70     	; 0x1f4 <read_dht11+0xf0>

    // Read 40 bits
    for(uint8_t i=0; i<5; i++) {
        for(uint8_t j=0; j<8; j++) {
            while(!(PIND & (1 << DHT11_PIN))) {
 1ae:	4e 9b       	sbis	0x09, 6	; 9
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <read_dht11+0xaa>
 1b2:	90 ea       	ldi	r25, 0xA0	; 160
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <read_dht11+0xb0>
                // Wait for pin to go high
            }
            _delay_us(30);
            
            if(PIND & (1 << DHT11_PIN)) {
 1b8:	4e 9b       	sbis	0x09, 6	; 9
 1ba:	16 c0       	rjmp	.+44     	; 0x1e8 <read_dht11+0xe4>
                data[i] |= (1 << (7-j));
 1bc:	47 e0       	ldi	r20, 0x07	; 7
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	48 1b       	sub	r20, r24
 1c2:	51 09       	sbc	r21, r1
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <read_dht11+0xca>
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	4a 95       	dec	r20
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <read_dht11+0xc6>
 1d2:	e1 e0       	ldi	r30, 0x01	; 1
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ec 0f       	add	r30, r28
 1d8:	fd 1f       	adc	r31, r29
 1da:	e6 0f       	add	r30, r22
 1dc:	f1 1d       	adc	r31, r1
 1de:	90 81       	ld	r25, Z
 1e0:	29 2b       	or	r18, r25
 1e2:	20 83       	st	Z, r18
                while(PIND & (1 << DHT11_PIN)) {
 1e4:	4e 99       	sbic	0x09, 6	; 9
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <read_dht11+0xe0>
    }
    if(timeout == 0) return -3;

    // Read 40 bits
    for(uint8_t i=0; i<5; i++) {
        for(uint8_t j=0; j<8; j++) {
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <read_dht11+0xea>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	88 30       	cpi	r24, 0x08	; 8
 1f0:	f0 f2       	brcs	.-68     	; 0x1ae <read_dht11+0xaa>
        _delay_us(1);
    }
    if(timeout == 0) return -3;

    // Read 40 bits
    for(uint8_t i=0; i<5; i++) {
 1f2:	6f 5f       	subi	r22, 0xFF	; 255
 1f4:	65 30       	cpi	r22, 0x05	; 5
 1f6:	d0 f3       	brcs	.-12     	; 0x1ec <read_dht11+0xe8>
            }
        }
    }

    // Verify checksum
    if(data[4] != (data[0] + data[1] + data[2] + data[3])) {
 1f8:	4d 81       	ldd	r20, Y+5	; 0x05
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	2a 81       	ldd	r18, Y+2	; 0x02
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	28 0f       	add	r18, r24
 204:	31 1d       	adc	r19, r1
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	28 0f       	add	r18, r24
 20a:	31 1d       	adc	r19, r1
 20c:	9c 81       	ldd	r25, Y+4	; 0x04
 20e:	29 0f       	add	r18, r25
 210:	31 1d       	adc	r19, r1
 212:	42 17       	cp	r20, r18
 214:	53 07       	cpc	r21, r19
 216:	39 f4       	brne	.+14     	; 0x226 <read_dht11+0x122>
        return -4;
    }
    
    return data[2]; // Return temperature
 218:	07 c0       	rjmp	.+14     	; 0x228 <read_dht11+0x124>
    timeout = 1000;
    while((PIND & (1 << DHT11_PIN)) && (timeout > 0)) {
        timeout--;
        _delay_us(1);
    }
    if(timeout == 0) return -1;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	05 c0       	rjmp	.+10     	; 0x228 <read_dht11+0x124>
    timeout = 1000;
    while(!(PIND & (1 << DHT11_PIN)) && (timeout > 0)) {
        timeout--;
        _delay_us(1);
    }
    if(timeout == 0) return -2;
 21e:	8e ef       	ldi	r24, 0xFE	; 254
 220:	03 c0       	rjmp	.+6      	; 0x228 <read_dht11+0x124>
    timeout = 1000;
    while((PIND & (1 << DHT11_PIN)) && (timeout > 0)) {
        timeout--;
        _delay_us(1);
    }
    if(timeout == 0) return -3;
 222:	8d ef       	ldi	r24, 0xFD	; 253
 224:	01 c0       	rjmp	.+2      	; 0x228 <read_dht11+0x124>
        }
    }

    // Verify checksum
    if(data[4] != (data[0] + data[1] + data[2] + data[3])) {
        return -4;
 226:	8c ef       	ldi	r24, 0xFC	; 252
    }
    
    return data[2]; // Return temperature
}
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <__vector_24>:

ISR(TWI_vect) {
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	8f 93       	push	r24
    uint8_t status = TWSR & 0xF8;
 244:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 248:	88 7f       	andi	r24, 0xF8	; 248
    switch(status) {
 24a:	80 38       	cpi	r24, 0x80	; 128
 24c:	49 f0       	breq	.+18     	; 0x260 <__vector_24+0x28>
 24e:	18 f4       	brcc	.+6      	; 0x256 <__vector_24+0x1e>
 250:	80 36       	cpi	r24, 0x60	; 96
 252:	31 f0       	breq	.+12     	; 0x260 <__vector_24+0x28>
 254:	15 c0       	rjmp	.+42     	; 0x280 <__vector_24+0x48>
 256:	88 3a       	cpi	r24, 0xA8	; 168
 258:	39 f0       	breq	.+14     	; 0x268 <__vector_24+0x30>
 25a:	88 3b       	cpi	r24, 0xB8	; 184
 25c:	69 f0       	breq	.+26     	; 0x278 <__vector_24+0x40>
 25e:	10 c0       	rjmp	.+32     	; 0x280 <__vector_24+0x48>
        case 0x60: // SLA+W received
        case 0x80: // Data received
            TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
 260:	85 ec       	ldi	r24, 0xC5	; 197
 262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 266:	0f c0       	rjmp	.+30     	; 0x286 <__vector_24+0x4e>
            
        case 0xA8: // SLA+R received
            TWDR = temperature;
 268:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <temperature>
 26c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
            TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
 270:	85 ec       	ldi	r24, 0xC5	; 197
 272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 276:	07 c0       	rjmp	.+14     	; 0x286 <__vector_24+0x4e>
            
        case 0xB8: // Data transmitted
            TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
 278:	85 ec       	ldi	r24, 0xC5	; 197
 27a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 27e:	03 c0       	rjmp	.+6      	; 0x286 <__vector_24+0x4e>
            
        default:
            TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
 280:	85 ec       	ldi	r24, 0xC5	; 197
 282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
    }
}
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <main>:

int main(void) {
    // Setup
    set_led(0);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 52 00 	call	0xa4	; 0xa4 <set_led>
    I2C_Slave_Init(SLAVE_ADDRESS);
 298:	80 e4       	ldi	r24, 0x40	; 64
 29a:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Slave_Init>
    sei();
 29e:	78 94       	sei
    
    while(1) {
        int8_t result = read_dht11();
 2a0:	0e 94 82 00 	call	0x104	; 0x104 <read_dht11>
        
        if(result >= 0) {
 2a4:	88 23       	and	r24, r24
 2a6:	a4 f0       	brlt	.+40     	; 0x2d0 <main+0x3e>
            temperature = result;
 2a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <temperature>
            status_code = 0;
 2ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
            set_led(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 52 00 	call	0xa4	; 0xa4 <set_led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	80 e7       	ldi	r24, 0x70	; 112
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x2a>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x34>
 2c6:	00 00       	nop
            _delay_ms(50);
            set_led(0);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 52 00 	call	0xa4	; 0xa4 <set_led>
 2ce:	07 c0       	rjmp	.+14     	; 0x2de <main+0x4c>
        } else {
            status_code = -result; // Store error code
 2d0:	81 95       	neg	r24
 2d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            blink_pattern(status_code);
 2d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2da:	0e 94 5f 00 	call	0xbe	; 0xbe <blink_pattern>
 2de:	2f ef       	ldi	r18, 0xFF	; 255
 2e0:	87 ea       	ldi	r24, 0xA7	; 167
 2e2:	91 e6       	ldi	r25, 0x61	; 97
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x52>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x5c>
 2ee:	00 00       	nop
 2f0:	d7 cf       	rjmp	.-82     	; 0x2a0 <main+0xe>

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
