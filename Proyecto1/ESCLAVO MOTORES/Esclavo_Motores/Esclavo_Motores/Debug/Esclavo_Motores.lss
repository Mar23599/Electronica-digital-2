
Esclavo_Motores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008cb  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077c  00000000  00000000  00000c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f3  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046a  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a5  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000020eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_24>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	ed 00       	.word	0x00ed	; ????
  6a:	08 01       	movw	r0, r16
  6c:	08 01       	movw	r0, r16
  6e:	08 01       	movw	r0, r16
  70:	08 01       	movw	r0, r16
  72:	08 01       	movw	r0, r16
  74:	08 01       	movw	r0, r16
  76:	08 01       	movw	r0, r16
  78:	ed 00       	.word	0x00ed	; ????
  7a:	08 01       	movw	r0, r16
  7c:	08 01       	movw	r0, r16
  7e:	08 01       	movw	r0, r16
  80:	08 01       	movw	r0, r16
  82:	08 01       	movw	r0, r16
  84:	08 01       	movw	r0, r16
  86:	08 01       	movw	r0, r16
  88:	ed 00       	.word	0x00ed	; ????
  8a:	08 01       	movw	r0, r16
  8c:	08 01       	movw	r0, r16
  8e:	08 01       	movw	r0, r16
  90:	08 01       	movw	r0, r16
  92:	08 01       	movw	r0, r16
  94:	08 01       	movw	r0, r16
  96:	08 01       	movw	r0, r16
  98:	ed 00       	.word	0x00ed	; ????
  9a:	08 01       	movw	r0, r16
  9c:	08 01       	movw	r0, r16
  9e:	08 01       	movw	r0, r16
  a0:	08 01       	movw	r0, r16
  a2:	08 01       	movw	r0, r16
  a4:	08 01       	movw	r0, r16
  a6:	08 01       	movw	r0, r16
  a8:	f1 00       	.word	0x00f1	; ????
  aa:	08 01       	movw	r0, r16
  ac:	08 01       	movw	r0, r16
  ae:	08 01       	movw	r0, r16
  b0:	08 01       	movw	r0, r16
  b2:	08 01       	movw	r0, r16
  b4:	08 01       	movw	r0, r16
  b6:	08 01       	movw	r0, r16
  b8:	fc 00       	.word	0x00fc	; ????
  ba:	08 01       	movw	r0, r16
  bc:	08 01       	movw	r0, r16
  be:	08 01       	movw	r0, r16
  c0:	08 01       	movw	r0, r16
  c2:	08 01       	movw	r0, r16
  c4:	08 01       	movw	r0, r16
  c6:	08 01       	movw	r0, r16
  c8:	f1 00       	.word	0x00f1	; ????
  ca:	08 01       	movw	r0, r16
  cc:	08 01       	movw	r0, r16
  ce:	08 01       	movw	r0, r16
  d0:	08 01       	movw	r0, r16
  d2:	08 01       	movw	r0, r16
  d4:	08 01       	movw	r0, r16
  d6:	08 01       	movw	r0, r16
  d8:	fc 00       	.word	0x00fc	; ????
  da:	08 01       	movw	r0, r16
  dc:	08 01       	movw	r0, r16
  de:	08 01       	movw	r0, r16
  e0:	08 01       	movw	r0, r16
  e2:	08 01       	movw	r0, r16
  e4:	08 01       	movw	r0, r16
  e6:	08 01       	movw	r0, r16
  e8:	04 01       	movw	r0, r8

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a2 30       	cpi	r26, 0x02	; 2
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 c0 00 	call	0x180	; 0x180 <main>
 10a:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <I2C_Slave_Init>:
//*****************************************************************************
// Funcion para inicializar I2C Esclavo
//*****************************************************************************

void I2C_Slave_Init(uint8_t address) {
    DDRC &= ~((1<<DDC4)|(1<<DDC5));  // Pines de I2C como entradas
 112:	97 b1       	in	r25, 0x07	; 7
 114:	9f 7c       	andi	r25, 0xCF	; 207
 116:	97 b9       	out	0x07, r25	; 7

    TWAR = address << 1;  // Se asigna la direccion que tendra
 118:	88 0f       	add	r24, r24
 11a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    // TWAR = (address << 1 | 0x01);  // Se asigna la direccion que tendra y habilita llamada gen

    // Se habilita la interfaz, ACK automático, se habilita la ISR
    TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 11e:	85 e4       	ldi	r24, 0x45	; 69
 120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 124:	08 95       	ret

00000126 <setup>:
//------------------------------------------------------
// Inicialización
//------------------------------------------------------
void setup(void)
{
    cli();
 126:	f8 94       	cli
	I2C_Slave_Init(I2C_SLAVE_ADDRESS);
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Slave_Init>

    // Configurar PD5 y PB0 como salidas
    DDRD |= (1 << DDD5);
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	80 62       	ori	r24, 0x20	; 32
 132:	8a b9       	out	0x0a, r24	; 10
    DDRB |= (1 << DDB0);
 134:	84 b1       	in	r24, 0x04	; 4
 136:	81 60       	ori	r24, 0x01	; 1
 138:	84 b9       	out	0x04, r24	; 4

    // Inicialmente apagados
    PORTD &= ~(1 << PORTD5);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
    PORTB &= ~(1 << PORTB0);
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8e 7f       	andi	r24, 0xFE	; 254
 144:	85 b9       	out	0x05, r24	; 5

    sei();
 146:	78 94       	sei
 148:	08 95       	ret

0000014a <process_command>:
//------------------------------------------------------
void process_command(uint8_t command)
{
	
	
    switch (command)
 14a:	82 34       	cpi	r24, 0x42	; 66
 14c:	69 f0       	breq	.+26     	; 0x168 <process_command+0x1e>
 14e:	18 f4       	brcc	.+6      	; 0x156 <process_command+0xc>
 150:	81 34       	cpi	r24, 0x41	; 65
 152:	31 f0       	breq	.+12     	; 0x160 <process_command+0x16>
 154:	08 95       	ret
 156:	83 34       	cpi	r24, 0x43	; 67
 158:	59 f0       	breq	.+22     	; 0x170 <process_command+0x26>
 15a:	84 34       	cpi	r24, 0x44	; 68
 15c:	69 f0       	breq	.+26     	; 0x178 <process_command+0x2e>
 15e:	08 95       	ret
    {
        case 'A':  // Encender PD5
            PORTD |= (1 << PORTD5);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	80 62       	ori	r24, 0x20	; 32
 164:	8b b9       	out	0x0b, r24	; 11
            break;
 166:	08 95       	ret

        case 'B':  // Apagar PD5
            PORTD &= ~(1 << PORTD5);
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	8f 7d       	andi	r24, 0xDF	; 223
 16c:	8b b9       	out	0x0b, r24	; 11
            break;
 16e:	08 95       	ret

        case 'C':  // Encender PB0
            PORTB |= (1 << PORTB0);
 170:	85 b1       	in	r24, 0x05	; 5
 172:	81 60       	ori	r24, 0x01	; 1
 174:	85 b9       	out	0x05, r24	; 5
            break;
 176:	08 95       	ret

        case 'D':  // Apagar PB0
            PORTB &= ~(1 << PORTB0);
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	08 95       	ret

00000180 <main>:
//------------------------------------------------------
// Main
//------------------------------------------------------
int main(void)
{
    setup();
 180:	0e 94 93 00 	call	0x126	; 0x126 <setup>

    while (1)
    {
		
		  
        if (command_received_flag)
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	88 23       	and	r24, r24
 18a:	e1 f3       	breq	.-8      	; 0x184 <main+0x4>
        {
            // Procesar el comando recibido
            process_command(received_command);
 18c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <received_command>
 190:	0e 94 a5 00 	call	0x14a	; 0x14a <process_command>

            // Limpiar flag
            command_received_flag = 0;
 194:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

            // Rehabilitar la interfaz I2C
            TWCR |= (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 198:	ec eb       	ldi	r30, 0xBC	; 188
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	85 64       	ori	r24, 0x45	; 69
 1a0:	80 83       	st	Z, r24
 1a2:	f0 cf       	rjmp	.-32     	; 0x184 <main+0x4>

000001a4 <__vector_24>:

//------------------------------------------------------
// ISR de I2C (TWI)
//------------------------------------------------------
ISR(TWI_vect)
{
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
    uint8_t status = TWSR & 0xF8;
 1ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1be:	e8 2f       	mov	r30, r24
 1c0:	e8 7f       	andi	r30, 0xF8	; 248

    switch (status)
 1c2:	8e 2f       	mov	r24, r30
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	e0 56       	subi	r30, 0x60	; 96
 1ca:	f1 09       	sbc	r31, r1
 1cc:	e1 34       	cpi	r30, 0x41	; 65
 1ce:	f1 05       	cpc	r31, r1
 1d0:	f8 f4       	brcc	.+62     	; 0x210 <__vector_24+0x6c>
 1d2:	ec 5c       	subi	r30, 0xCC	; 204
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	0c 94 16 01 	jmp	0x22c	; 0x22c <__tablejump2__>
        case 0x60:  // SLA+W recibido, ACK enviado
        case 0x68:  // SLA+W recibido tras arbitraje perdido
        case 0x70:  // Llamada general recibida, ACK enviado
        case 0x78:
            // Listo para recibir datos
            TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 1da:	85 ec       	ldi	r24, 0xC5	; 197
 1dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 1e0:	1a c0       	rjmp	.+52     	; 0x216 <__vector_24+0x72>

        case 0x80:  // Dato recibido, ACK enviado
        case 0x90:
            received_command = TWDR;
 1e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <received_command>
            command_received_flag = 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 1f0:	85 ec       	ldi	r24, 0xC5	; 197
 1f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 1f6:	0f c0       	rjmp	.+30     	; 0x216 <__vector_24+0x72>

        case 0x88:  // Dato recibido, NACK enviado
        case 0x98:
            received_command = TWDR;
 1f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <received_command>
            command_received_flag = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            break;
 206:	07 c0       	rjmp	.+14     	; 0x216 <__vector_24+0x72>

        case 0xA0:  // STOP o REPEATED START recibido
            TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 208:	85 ec       	ldi	r24, 0xC5	; 197
 20a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 20e:	03 c0       	rjmp	.+6      	; 0x216 <__vector_24+0x72>

        default:    // Estado no manejado ? resetear interfaz
            TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 210:	85 ec       	ldi	r24, 0xC5	; 197
 212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
    }
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__tablejump2__>:
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	05 90       	lpm	r0, Z+
 232:	f4 91       	lpm	r31, Z
 234:	e0 2d       	mov	r30, r0
 236:	09 94       	ijmp

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
