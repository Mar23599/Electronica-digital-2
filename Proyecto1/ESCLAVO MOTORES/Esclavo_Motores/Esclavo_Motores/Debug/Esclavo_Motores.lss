
Esclavo_Motores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac0  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084f  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067b  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f9  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037d  00000000  00000000  00002419  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002796  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_24>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	f3 00       	.word	0x00f3	; ????
  6a:	0e 01       	movw	r0, r28
  6c:	0e 01       	movw	r0, r28
  6e:	0e 01       	movw	r0, r28
  70:	0e 01       	movw	r0, r28
  72:	0e 01       	movw	r0, r28
  74:	0e 01       	movw	r0, r28
  76:	0e 01       	movw	r0, r28
  78:	f3 00       	.word	0x00f3	; ????
  7a:	0e 01       	movw	r0, r28
  7c:	0e 01       	movw	r0, r28
  7e:	0e 01       	movw	r0, r28
  80:	0e 01       	movw	r0, r28
  82:	0e 01       	movw	r0, r28
  84:	0e 01       	movw	r0, r28
  86:	0e 01       	movw	r0, r28
  88:	f3 00       	.word	0x00f3	; ????
  8a:	0e 01       	movw	r0, r28
  8c:	0e 01       	movw	r0, r28
  8e:	0e 01       	movw	r0, r28
  90:	0e 01       	movw	r0, r28
  92:	0e 01       	movw	r0, r28
  94:	0e 01       	movw	r0, r28
  96:	0e 01       	movw	r0, r28
  98:	f3 00       	.word	0x00f3	; ????
  9a:	0e 01       	movw	r0, r28
  9c:	0e 01       	movw	r0, r28
  9e:	0e 01       	movw	r0, r28
  a0:	0e 01       	movw	r0, r28
  a2:	0e 01       	movw	r0, r28
  a4:	0e 01       	movw	r0, r28
  a6:	0e 01       	movw	r0, r28
  a8:	f7 00       	.word	0x00f7	; ????
  aa:	0e 01       	movw	r0, r28
  ac:	0e 01       	movw	r0, r28
  ae:	0e 01       	movw	r0, r28
  b0:	0e 01       	movw	r0, r28
  b2:	0e 01       	movw	r0, r28
  b4:	0e 01       	movw	r0, r28
  b6:	0e 01       	movw	r0, r28
  b8:	02 01       	movw	r0, r4
  ba:	0e 01       	movw	r0, r28
  bc:	0e 01       	movw	r0, r28
  be:	0e 01       	movw	r0, r28
  c0:	0e 01       	movw	r0, r28
  c2:	0e 01       	movw	r0, r28
  c4:	0e 01       	movw	r0, r28
  c6:	0e 01       	movw	r0, r28
  c8:	f7 00       	.word	0x00f7	; ????
  ca:	0e 01       	movw	r0, r28
  cc:	0e 01       	movw	r0, r28
  ce:	0e 01       	movw	r0, r28
  d0:	0e 01       	movw	r0, r28
  d2:	0e 01       	movw	r0, r28
  d4:	0e 01       	movw	r0, r28
  d6:	0e 01       	movw	r0, r28
  d8:	02 01       	movw	r0, r4
  da:	0e 01       	movw	r0, r28
  dc:	0e 01       	movw	r0, r28
  de:	0e 01       	movw	r0, r28
  e0:	0e 01       	movw	r0, r28
  e2:	0e 01       	movw	r0, r28
  e4:	0e 01       	movw	r0, r28
  e6:	0e 01       	movw	r0, r28
  e8:	0a 01       	movw	r0, r20

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a2 30       	cpi	r26, 0x02	; 2
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
 10a:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <I2C_Slave_Init>:
//*****************************************************************************
// Funcion para inicializar I2C Esclavo
//*****************************************************************************

void I2C_Slave_Init(uint8_t address) {
    DDRC &= ~((1<<DDC4)|(1<<DDC5));  // Pines de I2C como entradas
 112:	97 b1       	in	r25, 0x07	; 7
 114:	9f 7c       	andi	r25, 0xCF	; 207
 116:	97 b9       	out	0x07, r25	; 7

    TWAR = address << 1;  // Se asigna la direccion que tendra
 118:	88 0f       	add	r24, r24
 11a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    // TWAR = (address << 1 | 0x01);  // Se asigna la direccion que tendra y habilita llamada gen

    // Se habilita la interfaz, ACK automático, se habilita la ISR
    TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 11e:	85 e4       	ldi	r24, 0x45	; 69
 120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 124:	08 95       	ret

00000126 <setup>:
//------------------------------------------------------
// Inicialización
//------------------------------------------------------
void setup(void)
{
    cli();
 126:	f8 94       	cli
	I2C_Slave_Init(I2C_SLAVE_ADDRESS);
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Slave_Init>

    // Configurar PD5 y PB0 como salidas
    DDRD |= (1 << DDD5);
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	80 62       	ori	r24, 0x20	; 32
 132:	8a b9       	out	0x0a, r24	; 10
    DDRB |= (1 << DDB0);
 134:	84 b1       	in	r24, 0x04	; 4
 136:	81 60       	ori	r24, 0x01	; 1
 138:	84 b9       	out	0x04, r24	; 4

    // Inicialmente apagados
    PORTD &= ~(1 << PORTD5);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
    PORTB &= ~(1 << PORTB0);
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8e 7f       	andi	r24, 0xFE	; 254
 144:	85 b9       	out	0x05, r24	; 5
	
	servo_init(); //Inializar servo
 146:	0e 94 1c 01 	call	0x238	; 0x238 <servo_init>

    sei();
 14a:	78 94       	sei
 14c:	08 95       	ret

0000014e <process_command>:
//------------------------------------------------------
void process_command(uint8_t command)
{
	
	
    switch (command)
 14e:	82 34       	cpi	r24, 0x42	; 66
 150:	69 f0       	breq	.+26     	; 0x16c <process_command+0x1e>
 152:	18 f4       	brcc	.+6      	; 0x15a <process_command+0xc>
 154:	81 34       	cpi	r24, 0x41	; 65
 156:	31 f0       	breq	.+12     	; 0x164 <process_command+0x16>
 158:	08 95       	ret
 15a:	83 34       	cpi	r24, 0x43	; 67
 15c:	59 f0       	breq	.+22     	; 0x174 <process_command+0x26>
 15e:	84 34       	cpi	r24, 0x44	; 68
 160:	79 f0       	breq	.+30     	; 0x180 <process_command+0x32>
 162:	08 95       	ret
    {
        case 'A':  // Encender PD5
            PORTD |= (1 << PORTD5);
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 62       	ori	r24, 0x20	; 32
 168:	8b b9       	out	0x0b, r24	; 11
            break;
 16a:	08 95       	ret

        case 'B':  // Apagar PD5
            PORTD &= ~(1 << PORTD5);
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	8f 7d       	andi	r24, 0xDF	; 223
 170:	8b b9       	out	0x0b, r24	; 11
            break;
 172:	08 95       	ret

        case 'C':  // Abrir puerta con el servo
            PORTB |= (1 << PORTB0);
 174:	85 b1       	in	r24, 0x05	; 5
 176:	81 60       	ori	r24, 0x01	; 1
 178:	85 b9       	out	0x05, r24	; 5
			servo_175_grados();
 17a:	0e 94 48 01 	call	0x290	; 0x290 <servo_175_grados>
			
            break;
 17e:	08 95       	ret

        case 'D':  // Cerrar puerta con el Servo
            PORTB &= ~(1 << PORTB0);
 180:	85 b1       	in	r24, 0x05	; 5
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	85 b9       	out	0x05, r24	; 5
			servo_0_grados();
 186:	0e 94 3b 01 	call	0x276	; 0x276 <servo_0_grados>
 18a:	08 95       	ret

0000018c <main>:
//------------------------------------------------------
// Main
//------------------------------------------------------
int main(void)
{
    setup();
 18c:	0e 94 93 00 	call	0x126	; 0x126 <setup>

    while (1)
    {
		
		  
        if (command_received_flag)
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	88 23       	and	r24, r24
 196:	e1 f3       	breq	.-8      	; 0x190 <main+0x4>
        {
            // Procesar el comando recibido
            process_command(received_command);
 198:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <received_command>
 19c:	0e 94 a7 00 	call	0x14e	; 0x14e <process_command>

            // Limpiar flag
            command_received_flag = 0;
 1a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

            // Rehabilitar la interfaz I2C
            TWCR |= (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 1a4:	ec eb       	ldi	r30, 0xBC	; 188
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	85 64       	ori	r24, 0x45	; 69
 1ac:	80 83       	st	Z, r24
 1ae:	f0 cf       	rjmp	.-32     	; 0x190 <main+0x4>

000001b0 <__vector_24>:

//------------------------------------------------------
// ISR de I2C (TWI)
//------------------------------------------------------
ISR(TWI_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
    uint8_t status = TWSR & 0xF8;
 1c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1ca:	e8 2f       	mov	r30, r24
 1cc:	e8 7f       	andi	r30, 0xF8	; 248

    switch (status)
 1ce:	8e 2f       	mov	r24, r30
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	e0 56       	subi	r30, 0x60	; 96
 1d6:	f1 09       	sbc	r31, r1
 1d8:	e1 34       	cpi	r30, 0x41	; 65
 1da:	f1 05       	cpc	r31, r1
 1dc:	f8 f4       	brcc	.+62     	; 0x21c <__vector_24+0x6c>
 1de:	ec 5c       	subi	r30, 0xCC	; 204
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__tablejump2__>
        case 0x60:  // SLA+W recibido, ACK enviado
        case 0x68:  // SLA+W recibido tras arbitraje perdido
        case 0x70:  // Llamada general recibida, ACK enviado
        case 0x78:
            // Listo para recibir datos
            TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 1e6:	85 ec       	ldi	r24, 0xC5	; 197
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 1ec:	1a c0       	rjmp	.+52     	; 0x222 <__vector_24+0x72>

        case 0x80:  // Dato recibido, ACK enviado
        case 0x90:
            received_command = TWDR;
 1ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <received_command>
            command_received_flag = 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 1fc:	85 ec       	ldi	r24, 0xC5	; 197
 1fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 202:	0f c0       	rjmp	.+30     	; 0x222 <__vector_24+0x72>

        case 0x88:  // Dato recibido, NACK enviado
        case 0x98:
            received_command = TWDR;
 204:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 208:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <received_command>
            command_received_flag = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            break;
 212:	07 c0       	rjmp	.+14     	; 0x222 <__vector_24+0x72>

        case 0xA0:  // STOP o REPEATED START recibido
            TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 214:	85 ec       	ldi	r24, 0xC5	; 197
 216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 21a:	03 c0       	rjmp	.+6      	; 0x222 <__vector_24+0x72>

        default:    // Estado no manejado ? resetear interfaz
            TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 21c:	85 ec       	ldi	r24, 0xC5	; 197
 21e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
    }
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <servo_init>:
 */ 

#include "ServoLib.h"
void servo_init(void) {
	// Configurar PB1 (OC1A) como salida
	DDRB |= (1 << PB1);
 238:	84 b1       	in	r24, 0x04	; 4
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	84 b9       	out	0x04, r24	; 4
	
	// Configurar Timer1 en modo PWM de 10 bits (Fast PWM)
	// TOP = ICR1, OC1A no invertido
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 23e:	82 e8       	ldi	r24, 0x82	; 130
 240:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
 244:	8a e1       	ldi	r24, 0x1A	; 26
 246:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Configurar frecuencia de PWM para servos (50Hz)
	ICR1 = 39999; // Para 50Hz con prescaler 8 y F_CPU = 16MHz
 24a:	8f e3       	ldi	r24, 0x3F	; 63
 24c:	9c e9       	ldi	r25, 0x9C	; 156
 24e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 252:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	// Inicializar servo en posición neutra (90°)
	OCR1A = 3000; // Valor inicial aproximado para 90°
 256:	88 eb       	ldi	r24, 0xB8	; 184
 258:	9b e0       	ldi	r25, 0x0B	; 11
 25a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 25e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 262:	2f e9       	ldi	r18, 0x9F	; 159
 264:	86 e8       	ldi	r24, 0x86	; 134
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <servo_init+0x30>
 270:	00 c0       	rjmp	.+0      	; 0x272 <servo_init+0x3a>
 272:	00 00       	nop
 274:	08 95       	ret

00000276 <servo_0_grados>:
	_delay_ms(500); // Esperar a que el servo se estabilice
}

void servo_0_grados(void) {
	// Posición para 0° (aprox. 1ms pulso)
	OCR1A = 2000; // 2000 counts = 1ms
 276:	80 ed       	ldi	r24, 0xD0	; 208
 278:	97 e0       	ldi	r25, 0x07	; 7
 27a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 27e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 282:	87 ea       	ldi	r24, 0xA7	; 167
 284:	91 e6       	ldi	r25, 0x61	; 97
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <servo_0_grados+0x10>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <servo_0_grados+0x16>
 28c:	00 00       	nop
 28e:	08 95       	ret

00000290 <servo_175_grados>:
	_delay_ms(100); // Esperar a que el servo alcance la posición
}

void servo_175_grados(void) {
	// Posición para 175° (aprox. 2ms pulso)
	OCR1A = 4000; // 4000 counts = 2ms
 290:	80 ea       	ldi	r24, 0xA0	; 160
 292:	9f e0       	ldi	r25, 0x0F	; 15
 294:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 298:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 29c:	87 ea       	ldi	r24, 0xA7	; 167
 29e:	91 e6       	ldi	r25, 0x61	; 97
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <servo_175_grados+0x10>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <servo_175_grados+0x16>
 2a6:	00 00       	nop
 2a8:	08 95       	ret

000002aa <__tablejump2__>:
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	05 90       	lpm	r0, Z+
 2b0:	f4 91       	lpm	r31, Z
 2b2:	e0 2d       	mov	r30, r0
 2b4:	09 94       	ijmp

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
