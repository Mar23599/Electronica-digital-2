
Prueba-Master-SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00000d08  00000d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080014e  0080014e  00000dea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c82  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000910  00000000  00000000  00001bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000696  00000000  00000000  000024c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f8  00000000  00000000  00002ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a5  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000353d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 35       	cpi	r26, 0x52	; 82
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  9e:	0c 94 82 06 	jmp	0xd04	; 0xd04 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_init>:

#include "Ale-lib-UART.h"

void UART_init(uint8_t IE){
	
	UBRR0H = 0x00;
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x67; // UBRR0 = 103 = 0x0067 para 9600 bauds
  aa:	97 e6       	ldi	r25, 0x67	; 103
  ac:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Limpiar registros de configuraciones previas
	
	UCSR0B = 0x00;
  b0:	a1 ec       	ldi	r26, 0xC1	; 193
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	1c 92       	st	X, r1
	UCSR0C = 0x00; 
  b6:	e2 ec       	ldi	r30, 0xC2	; 194
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
	
	//Configurar modo asíncrono, 8 bits, 1 stop bit, sin pararidad
	
	UCSR0C &= ~( (1 << UMSEL01) | (1 << UMSEL00) ); // Configuracion de modo ASINCRONO
  bc:	90 81       	ld	r25, Z
  be:	9f 73       	andi	r25, 0x3F	; 63
  c0:	90 83       	st	Z, r25
	
	UCSR0C &= ~(	(1 << UPM01)|(1 << UPM00)	); // Sin paridad
  c2:	90 81       	ld	r25, Z
  c4:	9f 7c       	andi	r25, 0xCF	; 207
  c6:	90 83       	st	Z, r25
	
	UCSR0C &= ~(1 << USBS0); // 1 bit de stop
  c8:	90 81       	ld	r25, Z
  ca:	97 7f       	andi	r25, 0xF7	; 247
  cc:	90 83       	st	Z, r25
	
	
	UCSR0C |= (1 << UCSZ01)|(1 << UCSZ00); // 8 bits de datos
  ce:	90 81       	ld	r25, Z
  d0:	96 60       	ori	r25, 0x06	; 6
  d2:	90 83       	st	Z, r25
	UCSR0B |= (1 << TXEN0)|(1 << RXEN0); // Habilitar transmisor y receptor
  d4:	9c 91       	ld	r25, X
  d6:	98 61       	ori	r25, 0x18	; 24
  d8:	9c 93       	st	X, r25
	
	if ( IE == 1)
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	29 f4       	brne	.+10     	; 0xe8 <UART_init+0x42>
	{
		UCSR0B |= (1 << RXCIE0); // Si IE es 1 -> activar las interrupciones por UART
  de:	e1 ec       	ldi	r30, 0xC1	; 193
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <UART_SendChar>:


void UART_SendChar(char c){
	
	
	while (	!((UCSR0A) & (1 << UDRE0))	); // Esperara que el buffer esté vacio
  ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ee:	95 ff       	sbrs	r25, 5
  f0:	fc cf       	rjmp	.-8      	; 0xea <UART_SendChar>
	UDR0 = c; //Escribir el caracter a transmitir
  f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f6:	08 95       	ret

000000f8 <UART_SendString>:
	
}

void UART_SendString(const char *str) {
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	ec 01       	movw	r28, r24
	if (str == NULL) return;  // Protección contra NULL
  fe:	89 2b       	or	r24, r25
 100:	21 f4       	brne	.+8      	; 0x10a <UART_SendString+0x12>
 102:	06 c0       	rjmp	.+12     	; 0x110 <UART_SendString+0x18>
	
	while (*str != '\0') {
		UART_SendChar(*str++);
 104:	21 96       	adiw	r28, 0x01	; 1
 106:	0e 94 75 00 	call	0xea	; 0xea <UART_SendChar>
}

void UART_SendString(const char *str) {
	if (str == NULL) return;  // Protección contra NULL
	
	while (*str != '\0') {
 10a:	88 81       	ld	r24, Y
 10c:	81 11       	cpse	r24, r1
 10e:	fa cf       	rjmp	.-12     	; 0x104 <UART_SendString+0xc>
		UART_SendChar(*str++);
	}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <I2C_Master_init>:

#include "I2C_LIB.h"


//Función para inicializar maestro
void I2C_Master_init(unsigned long SCL_Clock, uint8_t Prescaler){
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	8b 01       	movw	r16, r22
 11e:	9c 01       	movw	r18, r24
 120:	c4 2f       	mov	r28, r20
	/*PinOut
	PC4 -> 
	PC5 -> 
	*/
	
	DDRC &= ~(	(1 << PC4)|(1 << PC5)	); // Colocar pines I2C como entrada
 122:	87 b1       	in	r24, 0x07	; 7
 124:	8f 7c       	andi	r24, 0xCF	; 207
 126:	87 b9       	out	0x07, r24	; 7
	
	switch(Prescaler){
 128:	44 30       	cpi	r20, 0x04	; 4
 12a:	91 f0       	breq	.+36     	; 0x150 <I2C_Master_init+0x3a>
 12c:	18 f4       	brcc	.+6      	; 0x134 <I2C_Master_init+0x1e>
 12e:	41 30       	cpi	r20, 0x01	; 1
 130:	31 f0       	breq	.+12     	; 0x13e <I2C_Master_init+0x28>
 132:	29 c0       	rjmp	.+82     	; 0x186 <I2C_Master_init+0x70>
 134:	40 31       	cpi	r20, 0x10	; 16
 136:	a9 f0       	breq	.+42     	; 0x162 <I2C_Master_init+0x4c>
 138:	40 34       	cpi	r20, 0x40	; 64
 13a:	e1 f0       	breq	.+56     	; 0x174 <I2C_Master_init+0x5e>
 13c:	24 c0       	rjmp	.+72     	; 0x186 <I2C_Master_init+0x70>
		
		case 1:
		TWSR &= ~(1 << TWPS0);
 13e:	e9 eb       	ldi	r30, 0xB9	; 185
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	80 83       	st	Z, r24
		TWSR &= ~(1 << TWPS1);
 148:	80 81       	ld	r24, Z
 14a:	8d 7f       	andi	r24, 0xFD	; 253
 14c:	80 83       	st	Z, r24
		break;	
 14e:	24 c0       	rjmp	.+72     	; 0x198 <I2C_Master_init+0x82>
		
		case 4:
		TWSR |= (1 << TWPS0);
 150:	e9 eb       	ldi	r30, 0xB9	; 185
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	81 60       	ori	r24, 0x01	; 1
 158:	80 83       	st	Z, r24
		TWSR &= ~(1 << TWPS1);
 15a:	80 81       	ld	r24, Z
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	80 83       	st	Z, r24
		break;	
 160:	1b c0       	rjmp	.+54     	; 0x198 <I2C_Master_init+0x82>
		
		case 16:
		TWSR &= ~(1 << TWPS0);
 162:	e9 eb       	ldi	r30, 0xB9	; 185
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS1);
 16c:	80 81       	ld	r24, Z
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	80 83       	st	Z, r24
		break;
 172:	12 c0       	rjmp	.+36     	; 0x198 <I2C_Master_init+0x82>
		
		case 64:
		TWSR |= (1 << TWPS0);
 174:	e9 eb       	ldi	r30, 0xB9	; 185
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS1);
 17e:	80 81       	ld	r24, Z
 180:	82 60       	ori	r24, 0x02	; 2
 182:	80 83       	st	Z, r24
		break;
 184:	09 c0       	rjmp	.+18     	; 0x198 <I2C_Master_init+0x82>
		
		default:
		TWSR &= ~(1 << TWPS0);
 186:	e9 eb       	ldi	r30, 0xB9	; 185
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8e 7f       	andi	r24, 0xFE	; 254
 18e:	80 83       	st	Z, r24
		TWSR &= ~(1 << TWPS1);
 190:	80 81       	ld	r24, Z
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	80 83       	st	Z, r24
		Prescaler = 1; // Colocar prescaler de 1 en caso de que la eleccion sea diferente a las opciones
 196:	c1 e0       	ldi	r28, 0x01	; 1
		break;
	}
	
	TWBR = ((F_CPU/SCL_Clock)-16)/(2*Prescaler);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	74 e2       	ldi	r23, 0x24	; 36
 19c:	84 ef       	ldi	r24, 0xF4	; 244
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	a9 01       	movw	r20, r18
 1a2:	98 01       	movw	r18, r16
 1a4:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 1a8:	ca 01       	movw	r24, r20
 1aa:	b9 01       	movw	r22, r18
 1ac:	60 51       	subi	r22, 0x10	; 16
 1ae:	71 09       	sbc	r23, r1
 1b0:	81 09       	sbc	r24, r1
 1b2:	91 09       	sbc	r25, r1
 1b4:	4c 2f       	mov	r20, r28
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	9a 01       	movw	r18, r20
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	03 2e       	mov	r0, r19
 1c0:	00 0c       	add	r0, r0
 1c2:	44 0b       	sbc	r20, r20
 1c4:	55 0b       	sbc	r21, r21
 1c6:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 1ca:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1 << TWEN);
 1ce:	ec eb       	ldi	r30, 0xBC	; 188
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	80 83       	st	Z, r24
	
	
	
}
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	08 95       	ret

000001e0 <I2C_Master_Start>:
// Funcion de inicio de comunicacion I2C
void I2C_Master_Start(void){
	
	// uint8_t estado;
	// Limpiar bandera de interrupción-Inicio de Start-Verificar que el módulo este encendido
	TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN); 
 1e0:	84 ea       	ldi	r24, 0xA4	; 164
 1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1 << TWINT))); // Esperar a que la bandera de interrupcion se apague para contiunar
 1e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ea:	88 23       	and	r24, r24
 1ec:	e4 f7       	brge	.-8      	; 0x1e6 <I2C_Master_Start+0x6>
	
	//Si se usa el estado, cambiar el tipo de dato correspondiente a la función
	*/
		
	
}
 1ee:	08 95       	ret

000001f0 <I2C_Master_Stop>:

//Funcion de parada de la comunicacion I2C
void I2C_Master_Stop(void){

// Colocar activado-iniciar secuencia de interrupcion-iniciar secuencia de stop
	TWCR = (1 << TWEN)|(1 << TWINT)|(1 << TWSTO );
 1f0:	84 e9       	ldi	r24, 0x94	; 148
 1f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f6:	08 95       	ret

000001f8 <I2C_Master_Write>:
*/
uint8_t I2C_Master_Write(uint8_t dato){
	
	uint8_t estado;
	
	TWDR = dato; // Cargar el dato desde el registro
 1f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN)|(1 << TWINT); //Iniciar envio
 1fc:	84 e8       	ldi	r24, 0x84	; 132
 1fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (!(TWCR & (1 << TWINT))); // Esperar al flag TWINT
 202:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 206:	88 23       	and	r24, r24
 208:	e4 f7       	brge	.-8      	; 0x202 <I2C_Master_Write+0xa>
	
	estado = TWSR & 0xF8; //Verificar estado
 20a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 20e:	88 7f       	andi	r24, 0xF8	; 248
	
	if (estado == 0x18 || estado == 0x28 || estado == 0x40)
 210:	88 31       	cpi	r24, 0x18	; 24
 212:	31 f0       	breq	.+12     	; 0x220 <I2C_Master_Write+0x28>
 214:	88 32       	cpi	r24, 0x28	; 40
 216:	31 f0       	breq	.+12     	; 0x224 <I2C_Master_Write+0x2c>
 218:	80 34       	cpi	r24, 0x40	; 64
 21a:	29 f4       	brne	.+10     	; 0x226 <I2C_Master_Write+0x2e>
	{
		return 1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	08 95       	ret
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	08 95       	ret
 224:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return estado;
	}
	
}
 226:	08 95       	ret

00000228 <I2C_Master_Read>:

//Funcion de recepcion de datos enviados: Esclavo -> maestro
//Lectura de datos en el esclavo

uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack){
 228:	dc 01       	movw	r26, r24
	
	uint8_t estado;
	
	// ack = 1 para activiar secuencia de ack, ack = 0 no enviar secuencia de ack
	if (ack)
 22a:	66 23       	and	r22, r22
 22c:	31 f0       	breq	.+12     	; 0x23a <I2C_Master_Read+0x12>
	{
		TWCR |= (1 << TWEA); // Lectura de ACK
 22e:	ec eb       	ldi	r30, 0xBC	; 188
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	90 81       	ld	r25, Z
 234:	90 64       	ori	r25, 0x40	; 64
 236:	90 83       	st	Z, r25
 238:	05 c0       	rjmp	.+10     	; 0x244 <I2C_Master_Read+0x1c>
	} else {
		TWCR &= ~(1 << TWEA); // Lectura sin ACK
 23a:	ec eb       	ldi	r30, 0xBC	; 188
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	90 81       	ld	r25, Z
 240:	9f 7b       	andi	r25, 0xBF	; 191
 242:	90 83       	st	Z, r25
	}
	
	TWCR |= (1 << TWINT); //Iniciar lectura
 244:	ec eb       	ldi	r30, 0xBC	; 188
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	90 81       	ld	r25, Z
 24a:	90 68       	ori	r25, 0x80	; 128
 24c:	90 83       	st	Z, r25
	
	while( !(TWCR & (1 << TWINT)) ); //Esperar al flag TWINT
 24e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 252:	99 23       	and	r25, r25
 254:	e4 f7       	brge	.-8      	; 0x24e <I2C_Master_Read+0x26>
	
	estado = TWSR & 0xF8; //Verificar estado
 256:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 25a:	98 7f       	andi	r25, 0xF8	; 248
	
	//Verificar el dato leído con ACK o sin ACK
	
	if (estado == 0x58 || estado == 0x50)
 25c:	98 35       	cpi	r25, 0x58	; 88
 25e:	11 f0       	breq	.+4      	; 0x264 <I2C_Master_Read+0x3c>
 260:	90 35       	cpi	r25, 0x50	; 80
 262:	29 f4       	brne	.+10     	; 0x26e <I2C_Master_Read+0x46>
	{
		*buffer = TWDR;
 264:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 268:	8c 93       	st	X, r24
		return 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 95       	ret
	} else {
		return estado;
 26e:	89 2f       	mov	r24, r25
	}
	
	
	
	
}
 270:	08 95       	ret

00000272 <AHT10_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	89 ef       	ldi	r24, 0xF9	; 249
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <AHT10_Init+0x6>
 280:	00 c0       	rjmp	.+0      	; 0x282 <AHT10_Init+0x10>
 282:	00 00       	nop
 284:	08 95       	ret

00000286 <AHT10_ReadTemperature>:

void AHT10_Init() {
	_delay_ms(20);  // Espera inicial
}

uint8_t AHT10_ReadTemperature(float* temp) {
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	00 d0       	rcall	.+0      	; 0x292 <AHT10_ReadTemperature+0xc>
 292:	00 d0       	rcall	.+0      	; 0x294 <AHT10_ReadTemperature+0xe>
 294:	00 d0       	rcall	.+0      	; 0x296 <AHT10_ReadTemperature+0x10>
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
 29a:	7c 01       	movw	r14, r24
	uint8_t data[6];

	// Comando de medición
	I2C_Master_Start();
 29c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
	I2C_Master_Write((AHT10_ADDRESS << 1) | 0);  // Escribir
 2a0:	80 e7       	ldi	r24, 0x70	; 112
 2a2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	I2C_Master_Write(0xAC);
 2a6:	8c ea       	ldi	r24, 0xAC	; 172
 2a8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	I2C_Master_Write(0x33);
 2ac:	83 e3       	ldi	r24, 0x33	; 51
 2ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	I2C_Master_Write(0x00);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	I2C_Master_Stop();
 2b8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	37 ee       	ldi	r19, 0xE7	; 231
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	30 40       	sbci	r19, 0x00	; 0
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <AHT10_ReadTemperature+0x3c>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <AHT10_ReadTemperature+0x46>
 2cc:	00 00       	nop

	_delay_ms(80);  // Esperar medición

	// Lectura de 6 bytes
	I2C_Master_Start();
 2ce:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
	I2C_Master_Write((AHT10_ADDRESS << 1) | 1);  // Leer
 2d2:	81 e7       	ldi	r24, 0x71	; 113
 2d4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	for (uint8_t i = 0; i < 6; i++) {
 2d8:	10 e0       	ldi	r17, 0x00	; 0
 2da:	0f c0       	rjmp	.+30     	; 0x2fa <AHT10_ReadTemperature+0x74>
		I2C_Master_Read(&data[i], i < 5 ? 1 : 0);  // ACK hasta el penúltimo
 2dc:	81 2f       	mov	r24, r17
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	15 30       	cpi	r17, 0x05	; 5
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <AHT10_ReadTemperature+0x62>
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	e1 e0       	ldi	r30, 0x01	; 1
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	ec 0f       	add	r30, r28
 2ee:	fd 1f       	adc	r31, r29
 2f0:	8e 0f       	add	r24, r30
 2f2:	9f 1f       	adc	r25, r31
 2f4:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Master_Read>
	_delay_ms(80);  // Esperar medición

	// Lectura de 6 bytes
	I2C_Master_Start();
	I2C_Master_Write((AHT10_ADDRESS << 1) | 1);  // Leer
	for (uint8_t i = 0; i < 6; i++) {
 2f8:	1f 5f       	subi	r17, 0xFF	; 255
 2fa:	16 30       	cpi	r17, 0x06	; 6
 2fc:	78 f3       	brcs	.-34     	; 0x2dc <AHT10_ReadTemperature+0x56>
		I2C_Master_Read(&data[i], i < 5 ? 1 : 0);  // ACK hasta el penúltimo
	}
	I2C_Master_Stop();
 2fe:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>

	// Extraer temperatura
	uint32_t temp_raw = ((uint32_t)(data[3] & 0x0F) << 16) | ((uint32_t)data[4] << 8) | data[5];
 302:	6c 81       	ldd	r22, Y+4	; 0x04
 304:	6f 70       	andi	r22, 0x0F	; 15
 306:	86 2f       	mov	r24, r22
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	a0 e0       	ldi	r26, 0x00	; 0
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	bc 01       	movw	r22, r24
 310:	55 27       	eor	r21, r21
 312:	44 27       	eor	r20, r20
 314:	8d 81       	ldd	r24, Y+5	; 0x05
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	a0 e0       	ldi	r26, 0x00	; 0
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	ba 2f       	mov	r27, r26
 31e:	a9 2f       	mov	r26, r25
 320:	98 2f       	mov	r25, r24
 322:	88 27       	eor	r24, r24
 324:	84 2b       	or	r24, r20
 326:	95 2b       	or	r25, r21
 328:	a6 2b       	or	r26, r22
 32a:	b7 2b       	or	r27, r23
 32c:	2e 81       	ldd	r18, Y+6	; 0x06
 32e:	bc 01       	movw	r22, r24
 330:	cd 01       	movw	r24, r26
 332:	62 2b       	or	r22, r18
	*temp = ((float)temp_raw * 200.0 / 1048576.0) - 50.0;
 334:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatunsisf>
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	48 e4       	ldi	r20, 0x48	; 72
 33e:	53 e4       	ldi	r21, 0x43	; 67
 340:	0e 94 09 03 	call	0x612	; 0x612 <__mulsf3>
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 e8       	ldi	r20, 0x80	; 128
 34a:	55 e3       	ldi	r21, 0x35	; 53
 34c:	0e 94 09 03 	call	0x612	; 0x612 <__mulsf3>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	48 e4       	ldi	r20, 0x48	; 72
 356:	52 e4       	ldi	r21, 0x42	; 66
 358:	0e 94 0e 02 	call	0x41c	; 0x41c <__subsf3>
 35c:	f7 01       	movw	r30, r14
 35e:	60 83       	st	Z, r22
 360:	71 83       	std	Z+1, r23	; 0x01
 362:	82 83       	std	Z+2, r24	; 0x02
 364:	93 83       	std	Z+3, r25	; 0x03

	return 1;
}
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	26 96       	adiw	r28, 0x06	; 6
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	08 95       	ret

00000380 <main>:

int main(void) {
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	a0 97       	sbiw	r28, 0x20	; 32
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
	char buffer[32];

	I2C_Master_init(100000, 1);  // 100kHz I2C
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	60 ea       	ldi	r22, 0xA0	; 160
 398:	76 e8       	ldi	r23, 0x86	; 134
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Master_init>
	UART_init(0);                // UART sin interrupciones
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
	AHT10_Init();
 3a8:	0e 94 39 01 	call	0x272	; 0x272 <AHT10_Init>

	UART_SendString("Iniciando sensor AHT10...\r\n");
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>

	while (1) {
		if (AHT10_ReadTemperature(&temperatura)) {
 3b4:	8e e4       	ldi	r24, 0x4E	; 78
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 43 01 	call	0x286	; 0x286 <AHT10_ReadTemperature>
 3bc:	88 23       	and	r24, r24
 3be:	01 f1       	breq	.+64     	; 0x400 <__EEPROM_REGION_LENGTH__>
			// Convertir a string
			sprintf(buffer, "Temperatura: %.2f C\r\n", temperatura);
 3c0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <__data_end+0x3>
 3c4:	8f 93       	push	r24
 3c6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end+0x2>
 3ca:	8f 93       	push	r24
 3cc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__data_end+0x1>
 3d0:	8f 93       	push	r24
 3d2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
 3d6:	8f 93       	push	r24
 3d8:	8c e1       	ldi	r24, 0x1C	; 28
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	9f 93       	push	r25
 3de:	8f 93       	push	r24
 3e0:	8e 01       	movw	r16, r28
 3e2:	0f 5f       	subi	r16, 0xFF	; 255
 3e4:	1f 4f       	sbci	r17, 0xFF	; 255
 3e6:	1f 93       	push	r17
 3e8:	0f 93       	push	r16
 3ea:	0e 94 98 03 	call	0x730	; 0x730 <sprintf>
			UART_SendString(buffer);
 3ee:	c8 01       	movw	r24, r16
 3f0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			} else {
			UART_SendString("Error leyendo temperatura\r\n");
 400:	82 e3       	ldi	r24, 0x32	; 50
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_SendString>
 408:	9f ef       	ldi	r25, 0xFF	; 255
 40a:	23 ed       	ldi	r18, 0xD3	; 211
 40c:	80 e3       	ldi	r24, 0x30	; 48
 40e:	91 50       	subi	r25, 0x01	; 1
 410:	20 40       	sbci	r18, 0x00	; 0
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
 41a:	cc cf       	rjmp	.-104    	; 0x3b4 <main+0x34>

0000041c <__subsf3>:
 41c:	50 58       	subi	r21, 0x80	; 128

0000041e <__addsf3>:
 41e:	bb 27       	eor	r27, r27
 420:	aa 27       	eor	r26, r26
 422:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3x>
 426:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_round>
 42a:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscA>
 42e:	38 f0       	brcs	.+14     	; 0x43e <__addsf3+0x20>
 430:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscB>
 434:	20 f0       	brcs	.+8      	; 0x43e <__addsf3+0x20>
 436:	39 f4       	brne	.+14     	; 0x446 <__addsf3+0x28>
 438:	9f 3f       	cpi	r25, 0xFF	; 255
 43a:	19 f4       	brne	.+6      	; 0x442 <__addsf3+0x24>
 43c:	26 f4       	brtc	.+8      	; 0x446 <__addsf3+0x28>
 43e:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_nan>
 442:	0e f4       	brtc	.+2      	; 0x446 <__addsf3+0x28>
 444:	e0 95       	com	r30
 446:	e7 fb       	bst	r30, 7
 448:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>

0000044c <__addsf3x>:
 44c:	e9 2f       	mov	r30, r25
 44e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_split3>
 452:	58 f3       	brcs	.-42     	; 0x42a <__addsf3+0xc>
 454:	ba 17       	cp	r27, r26
 456:	62 07       	cpc	r22, r18
 458:	73 07       	cpc	r23, r19
 45a:	84 07       	cpc	r24, r20
 45c:	95 07       	cpc	r25, r21
 45e:	20 f0       	brcs	.+8      	; 0x468 <__addsf3x+0x1c>
 460:	79 f4       	brne	.+30     	; 0x480 <__addsf3x+0x34>
 462:	a6 f5       	brtc	.+104    	; 0x4cc <__addsf3x+0x80>
 464:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_zero>
 468:	0e f4       	brtc	.+2      	; 0x46c <__addsf3x+0x20>
 46a:	e0 95       	com	r30
 46c:	0b 2e       	mov	r0, r27
 46e:	ba 2f       	mov	r27, r26
 470:	a0 2d       	mov	r26, r0
 472:	0b 01       	movw	r0, r22
 474:	b9 01       	movw	r22, r18
 476:	90 01       	movw	r18, r0
 478:	0c 01       	movw	r0, r24
 47a:	ca 01       	movw	r24, r20
 47c:	a0 01       	movw	r20, r0
 47e:	11 24       	eor	r1, r1
 480:	ff 27       	eor	r31, r31
 482:	59 1b       	sub	r21, r25
 484:	99 f0       	breq	.+38     	; 0x4ac <__addsf3x+0x60>
 486:	59 3f       	cpi	r21, 0xF9	; 249
 488:	50 f4       	brcc	.+20     	; 0x49e <__addsf3x+0x52>
 48a:	50 3e       	cpi	r21, 0xE0	; 224
 48c:	68 f1       	brcs	.+90     	; 0x4e8 <__addsf3x+0x9c>
 48e:	1a 16       	cp	r1, r26
 490:	f0 40       	sbci	r31, 0x00	; 0
 492:	a2 2f       	mov	r26, r18
 494:	23 2f       	mov	r18, r19
 496:	34 2f       	mov	r19, r20
 498:	44 27       	eor	r20, r20
 49a:	58 5f       	subi	r21, 0xF8	; 248
 49c:	f3 cf       	rjmp	.-26     	; 0x484 <__addsf3x+0x38>
 49e:	46 95       	lsr	r20
 4a0:	37 95       	ror	r19
 4a2:	27 95       	ror	r18
 4a4:	a7 95       	ror	r26
 4a6:	f0 40       	sbci	r31, 0x00	; 0
 4a8:	53 95       	inc	r21
 4aa:	c9 f7       	brne	.-14     	; 0x49e <__addsf3x+0x52>
 4ac:	7e f4       	brtc	.+30     	; 0x4cc <__addsf3x+0x80>
 4ae:	1f 16       	cp	r1, r31
 4b0:	ba 0b       	sbc	r27, r26
 4b2:	62 0b       	sbc	r22, r18
 4b4:	73 0b       	sbc	r23, r19
 4b6:	84 0b       	sbc	r24, r20
 4b8:	ba f0       	brmi	.+46     	; 0x4e8 <__addsf3x+0x9c>
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	a1 f0       	breq	.+40     	; 0x4e6 <__addsf3x+0x9a>
 4be:	ff 0f       	add	r31, r31
 4c0:	bb 1f       	adc	r27, r27
 4c2:	66 1f       	adc	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	88 1f       	adc	r24, r24
 4c8:	c2 f7       	brpl	.-16     	; 0x4ba <__addsf3x+0x6e>
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <__addsf3x+0x9c>
 4cc:	ba 0f       	add	r27, r26
 4ce:	62 1f       	adc	r22, r18
 4d0:	73 1f       	adc	r23, r19
 4d2:	84 1f       	adc	r24, r20
 4d4:	48 f4       	brcc	.+18     	; 0x4e8 <__addsf3x+0x9c>
 4d6:	87 95       	ror	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f7 95       	ror	r31
 4e0:	9e 3f       	cpi	r25, 0xFE	; 254
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <__addsf3x+0x9a>
 4e4:	b0 cf       	rjmp	.-160    	; 0x446 <__addsf3+0x28>
 4e6:	93 95       	inc	r25
 4e8:	88 0f       	add	r24, r24
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <__addsf3x+0xa2>
 4ec:	99 27       	eor	r25, r25
 4ee:	ee 0f       	add	r30, r30
 4f0:	97 95       	ror	r25
 4f2:	87 95       	ror	r24
 4f4:	08 95       	ret

000004f6 <__floatunsisf>:
 4f6:	e8 94       	clt
 4f8:	09 c0       	rjmp	.+18     	; 0x50c <__floatsisf+0x12>

000004fa <__floatsisf>:
 4fa:	97 fb       	bst	r25, 7
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__floatsisf+0x12>
 4fe:	90 95       	com	r25
 500:	80 95       	com	r24
 502:	70 95       	com	r23
 504:	61 95       	neg	r22
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	99 23       	and	r25, r25
 50e:	a9 f0       	breq	.+42     	; 0x53a <__floatsisf+0x40>
 510:	f9 2f       	mov	r31, r25
 512:	96 e9       	ldi	r25, 0x96	; 150
 514:	bb 27       	eor	r27, r27
 516:	93 95       	inc	r25
 518:	f6 95       	lsr	r31
 51a:	87 95       	ror	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b7 95       	ror	r27
 522:	f1 11       	cpse	r31, r1
 524:	f8 cf       	rjmp	.-16     	; 0x516 <__floatsisf+0x1c>
 526:	fa f4       	brpl	.+62     	; 0x566 <__floatsisf+0x6c>
 528:	bb 0f       	add	r27, r27
 52a:	11 f4       	brne	.+4      	; 0x530 <__floatsisf+0x36>
 52c:	60 ff       	sbrs	r22, 0
 52e:	1b c0       	rjmp	.+54     	; 0x566 <__floatsisf+0x6c>
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	16 c0       	rjmp	.+44     	; 0x566 <__floatsisf+0x6c>
 53a:	88 23       	and	r24, r24
 53c:	11 f0       	breq	.+4      	; 0x542 <__floatsisf+0x48>
 53e:	96 e9       	ldi	r25, 0x96	; 150
 540:	11 c0       	rjmp	.+34     	; 0x564 <__floatsisf+0x6a>
 542:	77 23       	and	r23, r23
 544:	21 f0       	breq	.+8      	; 0x54e <__floatsisf+0x54>
 546:	9e e8       	ldi	r25, 0x8E	; 142
 548:	87 2f       	mov	r24, r23
 54a:	76 2f       	mov	r23, r22
 54c:	05 c0       	rjmp	.+10     	; 0x558 <__floatsisf+0x5e>
 54e:	66 23       	and	r22, r22
 550:	71 f0       	breq	.+28     	; 0x56e <__floatsisf+0x74>
 552:	96 e8       	ldi	r25, 0x86	; 134
 554:	86 2f       	mov	r24, r22
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	2a f0       	brmi	.+10     	; 0x566 <__floatsisf+0x6c>
 55c:	9a 95       	dec	r25
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	da f7       	brpl	.-10     	; 0x55c <__floatsisf+0x62>
 566:	88 0f       	add	r24, r24
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__fp_inf>:
 570:	97 f9       	bld	r25, 7
 572:	9f 67       	ori	r25, 0x7F	; 127
 574:	80 e8       	ldi	r24, 0x80	; 128
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	08 95       	ret

0000057c <__fp_nan>:
 57c:	9f ef       	ldi	r25, 0xFF	; 255
 57e:	80 ec       	ldi	r24, 0xC0	; 192
 580:	08 95       	ret

00000582 <__fp_pscA>:
 582:	00 24       	eor	r0, r0
 584:	0a 94       	dec	r0
 586:	16 16       	cp	r1, r22
 588:	17 06       	cpc	r1, r23
 58a:	18 06       	cpc	r1, r24
 58c:	09 06       	cpc	r0, r25
 58e:	08 95       	ret

00000590 <__fp_pscB>:
 590:	00 24       	eor	r0, r0
 592:	0a 94       	dec	r0
 594:	12 16       	cp	r1, r18
 596:	13 06       	cpc	r1, r19
 598:	14 06       	cpc	r1, r20
 59a:	05 06       	cpc	r0, r21
 59c:	08 95       	ret

0000059e <__fp_round>:
 59e:	09 2e       	mov	r0, r25
 5a0:	03 94       	inc	r0
 5a2:	00 0c       	add	r0, r0
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__fp_round+0xc>
 5a6:	88 23       	and	r24, r24
 5a8:	52 f0       	brmi	.+20     	; 0x5be <__fp_round+0x20>
 5aa:	bb 0f       	add	r27, r27
 5ac:	40 f4       	brcc	.+16     	; 0x5be <__fp_round+0x20>
 5ae:	bf 2b       	or	r27, r31
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <__fp_round+0x18>
 5b2:	60 ff       	sbrs	r22, 0
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <__fp_round+0x20>
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8f 4f       	sbci	r24, 0xFF	; 255
 5bc:	9f 4f       	sbci	r25, 0xFF	; 255
 5be:	08 95       	ret

000005c0 <__fp_split3>:
 5c0:	57 fd       	sbrc	r21, 7
 5c2:	90 58       	subi	r25, 0x80	; 128
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <__fp_splitA+0x10>
 5ca:	5f 3f       	cpi	r21, 0xFF	; 255
 5cc:	71 f0       	breq	.+28     	; 0x5ea <__fp_splitA+0x1a>
 5ce:	47 95       	ror	r20

000005d0 <__fp_splitA>:
 5d0:	88 0f       	add	r24, r24
 5d2:	97 fb       	bst	r25, 7
 5d4:	99 1f       	adc	r25, r25
 5d6:	61 f0       	breq	.+24     	; 0x5f0 <__fp_splitA+0x20>
 5d8:	9f 3f       	cpi	r25, 0xFF	; 255
 5da:	79 f0       	breq	.+30     	; 0x5fa <__fp_splitA+0x2a>
 5dc:	87 95       	ror	r24
 5de:	08 95       	ret
 5e0:	12 16       	cp	r1, r18
 5e2:	13 06       	cpc	r1, r19
 5e4:	14 06       	cpc	r1, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	f2 cf       	rjmp	.-28     	; 0x5ce <__fp_split3+0xe>
 5ea:	46 95       	lsr	r20
 5ec:	f1 df       	rcall	.-30     	; 0x5d0 <__fp_splitA>
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <__fp_splitA+0x30>
 5f0:	16 16       	cp	r1, r22
 5f2:	17 06       	cpc	r1, r23
 5f4:	18 06       	cpc	r1, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	f1 cf       	rjmp	.-30     	; 0x5dc <__fp_splitA+0xc>
 5fa:	86 95       	lsr	r24
 5fc:	71 05       	cpc	r23, r1
 5fe:	61 05       	cpc	r22, r1
 600:	08 94       	sec
 602:	08 95       	ret

00000604 <__fp_zero>:
 604:	e8 94       	clt

00000606 <__fp_szero>:
 606:	bb 27       	eor	r27, r27
 608:	66 27       	eor	r22, r22
 60a:	77 27       	eor	r23, r23
 60c:	cb 01       	movw	r24, r22
 60e:	97 f9       	bld	r25, 7
 610:	08 95       	ret

00000612 <__mulsf3>:
 612:	0e 94 1c 03 	call	0x638	; 0x638 <__mulsf3x>
 616:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_round>
 61a:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscA>
 61e:	38 f0       	brcs	.+14     	; 0x62e <__mulsf3+0x1c>
 620:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscB>
 624:	20 f0       	brcs	.+8      	; 0x62e <__mulsf3+0x1c>
 626:	95 23       	and	r25, r21
 628:	11 f0       	breq	.+4      	; 0x62e <__mulsf3+0x1c>
 62a:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 62e:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_nan>
 632:	11 24       	eor	r1, r1
 634:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>

00000638 <__mulsf3x>:
 638:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_split3>
 63c:	70 f3       	brcs	.-36     	; 0x61a <__mulsf3+0x8>

0000063e <__mulsf3_pse>:
 63e:	95 9f       	mul	r25, r21
 640:	c1 f3       	breq	.-16     	; 0x632 <__mulsf3+0x20>
 642:	95 0f       	add	r25, r21
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	55 1f       	adc	r21, r21
 648:	62 9f       	mul	r22, r18
 64a:	f0 01       	movw	r30, r0
 64c:	72 9f       	mul	r23, r18
 64e:	bb 27       	eor	r27, r27
 650:	f0 0d       	add	r31, r0
 652:	b1 1d       	adc	r27, r1
 654:	63 9f       	mul	r22, r19
 656:	aa 27       	eor	r26, r26
 658:	f0 0d       	add	r31, r0
 65a:	b1 1d       	adc	r27, r1
 65c:	aa 1f       	adc	r26, r26
 65e:	64 9f       	mul	r22, r20
 660:	66 27       	eor	r22, r22
 662:	b0 0d       	add	r27, r0
 664:	a1 1d       	adc	r26, r1
 666:	66 1f       	adc	r22, r22
 668:	82 9f       	mul	r24, r18
 66a:	22 27       	eor	r18, r18
 66c:	b0 0d       	add	r27, r0
 66e:	a1 1d       	adc	r26, r1
 670:	62 1f       	adc	r22, r18
 672:	73 9f       	mul	r23, r19
 674:	b0 0d       	add	r27, r0
 676:	a1 1d       	adc	r26, r1
 678:	62 1f       	adc	r22, r18
 67a:	83 9f       	mul	r24, r19
 67c:	a0 0d       	add	r26, r0
 67e:	61 1d       	adc	r22, r1
 680:	22 1f       	adc	r18, r18
 682:	74 9f       	mul	r23, r20
 684:	33 27       	eor	r19, r19
 686:	a0 0d       	add	r26, r0
 688:	61 1d       	adc	r22, r1
 68a:	23 1f       	adc	r18, r19
 68c:	84 9f       	mul	r24, r20
 68e:	60 0d       	add	r22, r0
 690:	21 1d       	adc	r18, r1
 692:	82 2f       	mov	r24, r18
 694:	76 2f       	mov	r23, r22
 696:	6a 2f       	mov	r22, r26
 698:	11 24       	eor	r1, r1
 69a:	9f 57       	subi	r25, 0x7F	; 127
 69c:	50 40       	sbci	r21, 0x00	; 0
 69e:	9a f0       	brmi	.+38     	; 0x6c6 <__mulsf3_pse+0x88>
 6a0:	f1 f0       	breq	.+60     	; 0x6de <__mulsf3_pse+0xa0>
 6a2:	88 23       	and	r24, r24
 6a4:	4a f0       	brmi	.+18     	; 0x6b8 <__mulsf3_pse+0x7a>
 6a6:	ee 0f       	add	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	bb 1f       	adc	r27, r27
 6ac:	66 1f       	adc	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	91 50       	subi	r25, 0x01	; 1
 6b4:	50 40       	sbci	r21, 0x00	; 0
 6b6:	a9 f7       	brne	.-22     	; 0x6a2 <__mulsf3_pse+0x64>
 6b8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ba:	51 05       	cpc	r21, r1
 6bc:	80 f0       	brcs	.+32     	; 0x6de <__mulsf3_pse+0xa0>
 6be:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 6c2:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>
 6c6:	5f 3f       	cpi	r21, 0xFF	; 255
 6c8:	e4 f3       	brlt	.-8      	; 0x6c2 <__mulsf3_pse+0x84>
 6ca:	98 3e       	cpi	r25, 0xE8	; 232
 6cc:	d4 f3       	brlt	.-12     	; 0x6c2 <__mulsf3_pse+0x84>
 6ce:	86 95       	lsr	r24
 6d0:	77 95       	ror	r23
 6d2:	67 95       	ror	r22
 6d4:	b7 95       	ror	r27
 6d6:	f7 95       	ror	r31
 6d8:	e7 95       	ror	r30
 6da:	9f 5f       	subi	r25, 0xFF	; 255
 6dc:	c1 f7       	brne	.-16     	; 0x6ce <__mulsf3_pse+0x90>
 6de:	fe 2b       	or	r31, r30
 6e0:	88 0f       	add	r24, r24
 6e2:	91 1d       	adc	r25, r1
 6e4:	96 95       	lsr	r25
 6e6:	87 95       	ror	r24
 6e8:	97 f9       	bld	r25, 7
 6ea:	08 95       	ret

000006ec <__udivmodsi4>:
 6ec:	a1 e2       	ldi	r26, 0x21	; 33
 6ee:	1a 2e       	mov	r1, r26
 6f0:	aa 1b       	sub	r26, r26
 6f2:	bb 1b       	sub	r27, r27
 6f4:	fd 01       	movw	r30, r26
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <__udivmodsi4_ep>

000006f8 <__udivmodsi4_loop>:
 6f8:	aa 1f       	adc	r26, r26
 6fa:	bb 1f       	adc	r27, r27
 6fc:	ee 1f       	adc	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	a2 17       	cp	r26, r18
 702:	b3 07       	cpc	r27, r19
 704:	e4 07       	cpc	r30, r20
 706:	f5 07       	cpc	r31, r21
 708:	20 f0       	brcs	.+8      	; 0x712 <__udivmodsi4_ep>
 70a:	a2 1b       	sub	r26, r18
 70c:	b3 0b       	sbc	r27, r19
 70e:	e4 0b       	sbc	r30, r20
 710:	f5 0b       	sbc	r31, r21

00000712 <__udivmodsi4_ep>:
 712:	66 1f       	adc	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	1a 94       	dec	r1
 71c:	69 f7       	brne	.-38     	; 0x6f8 <__udivmodsi4_loop>
 71e:	60 95       	com	r22
 720:	70 95       	com	r23
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	9b 01       	movw	r18, r22
 728:	ac 01       	movw	r20, r24
 72a:	bd 01       	movw	r22, r26
 72c:	cf 01       	movw	r24, r30
 72e:	08 95       	ret

00000730 <sprintf>:
 730:	ae e0       	ldi	r26, 0x0E	; 14
 732:	b0 e0       	ldi	r27, 0x00	; 0
 734:	ee e9       	ldi	r30, 0x9E	; 158
 736:	f3 e0       	ldi	r31, 0x03	; 3
 738:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__prologue_saves__+0x1c>
 73c:	0d 89       	ldd	r16, Y+21	; 0x15
 73e:	1e 89       	ldd	r17, Y+22	; 0x16
 740:	86 e0       	ldi	r24, 0x06	; 6
 742:	8c 83       	std	Y+4, r24	; 0x04
 744:	1a 83       	std	Y+2, r17	; 0x02
 746:	09 83       	std	Y+1, r16	; 0x01
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	9f e7       	ldi	r25, 0x7F	; 127
 74c:	9e 83       	std	Y+6, r25	; 0x06
 74e:	8d 83       	std	Y+5, r24	; 0x05
 750:	ae 01       	movw	r20, r28
 752:	47 5e       	subi	r20, 0xE7	; 231
 754:	5f 4f       	sbci	r21, 0xFF	; 255
 756:	6f 89       	ldd	r22, Y+23	; 0x17
 758:	78 8d       	ldd	r23, Y+24	; 0x18
 75a:	ce 01       	movw	r24, r28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	0e 94 ba 03 	call	0x774	; 0x774 <vfprintf>
 762:	ef 81       	ldd	r30, Y+7	; 0x07
 764:	f8 85       	ldd	r31, Y+8	; 0x08
 766:	e0 0f       	add	r30, r16
 768:	f1 1f       	adc	r31, r17
 76a:	10 82       	st	Z, r1
 76c:	2e 96       	adiw	r28, 0x0e	; 14
 76e:	e4 e0       	ldi	r30, 0x04	; 4
 770:	0c 94 75 06 	jmp	0xcea	; 0xcea <__epilogue_restores__+0x1c>

00000774 <vfprintf>:
 774:	ab e0       	ldi	r26, 0x0B	; 11
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	e0 ec       	ldi	r30, 0xC0	; 192
 77a:	f3 e0       	ldi	r31, 0x03	; 3
 77c:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__prologue_saves__>
 780:	6c 01       	movw	r12, r24
 782:	7b 01       	movw	r14, r22
 784:	8a 01       	movw	r16, r20
 786:	fc 01       	movw	r30, r24
 788:	17 82       	std	Z+7, r1	; 0x07
 78a:	16 82       	std	Z+6, r1	; 0x06
 78c:	83 81       	ldd	r24, Z+3	; 0x03
 78e:	81 ff       	sbrs	r24, 1
 790:	cc c1       	rjmp	.+920    	; 0xb2a <__stack+0x22b>
 792:	ce 01       	movw	r24, r28
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	3c 01       	movw	r6, r24
 798:	f6 01       	movw	r30, r12
 79a:	93 81       	ldd	r25, Z+3	; 0x03
 79c:	f7 01       	movw	r30, r14
 79e:	93 fd       	sbrc	r25, 3
 7a0:	85 91       	lpm	r24, Z+
 7a2:	93 ff       	sbrs	r25, 3
 7a4:	81 91       	ld	r24, Z+
 7a6:	7f 01       	movw	r14, r30
 7a8:	88 23       	and	r24, r24
 7aa:	09 f4       	brne	.+2      	; 0x7ae <vfprintf+0x3a>
 7ac:	ba c1       	rjmp	.+884    	; 0xb22 <__stack+0x223>
 7ae:	85 32       	cpi	r24, 0x25	; 37
 7b0:	39 f4       	brne	.+14     	; 0x7c0 <vfprintf+0x4c>
 7b2:	93 fd       	sbrc	r25, 3
 7b4:	85 91       	lpm	r24, Z+
 7b6:	93 ff       	sbrs	r25, 3
 7b8:	81 91       	ld	r24, Z+
 7ba:	7f 01       	movw	r14, r30
 7bc:	85 32       	cpi	r24, 0x25	; 37
 7be:	29 f4       	brne	.+10     	; 0x7ca <vfprintf+0x56>
 7c0:	b6 01       	movw	r22, r12
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 7c8:	e7 cf       	rjmp	.-50     	; 0x798 <vfprintf+0x24>
 7ca:	91 2c       	mov	r9, r1
 7cc:	21 2c       	mov	r2, r1
 7ce:	31 2c       	mov	r3, r1
 7d0:	ff e1       	ldi	r31, 0x1F	; 31
 7d2:	f3 15       	cp	r31, r3
 7d4:	d8 f0       	brcs	.+54     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7d6:	8b 32       	cpi	r24, 0x2B	; 43
 7d8:	79 f0       	breq	.+30     	; 0x7f8 <vfprintf+0x84>
 7da:	38 f4       	brcc	.+14     	; 0x7ea <vfprintf+0x76>
 7dc:	80 32       	cpi	r24, 0x20	; 32
 7de:	79 f0       	breq	.+30     	; 0x7fe <vfprintf+0x8a>
 7e0:	83 32       	cpi	r24, 0x23	; 35
 7e2:	a1 f4       	brne	.+40     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7e4:	23 2d       	mov	r18, r3
 7e6:	20 61       	ori	r18, 0x10	; 16
 7e8:	1d c0       	rjmp	.+58     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7ea:	8d 32       	cpi	r24, 0x2D	; 45
 7ec:	61 f0       	breq	.+24     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ee:	80 33       	cpi	r24, 0x30	; 48
 7f0:	69 f4       	brne	.+26     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f2:	23 2d       	mov	r18, r3
 7f4:	21 60       	ori	r18, 0x01	; 1
 7f6:	16 c0       	rjmp	.+44     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7f8:	83 2d       	mov	r24, r3
 7fa:	82 60       	ori	r24, 0x02	; 2
 7fc:	38 2e       	mov	r3, r24
 7fe:	e3 2d       	mov	r30, r3
 800:	e4 60       	ori	r30, 0x04	; 4
 802:	3e 2e       	mov	r3, r30
 804:	2a c0       	rjmp	.+84     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 806:	f3 2d       	mov	r31, r3
 808:	f8 60       	ori	r31, 0x08	; 8
 80a:	1d c0       	rjmp	.+58     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 80c:	37 fc       	sbrc	r3, 7
 80e:	2d c0       	rjmp	.+90     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 810:	20 ed       	ldi	r18, 0xD0	; 208
 812:	28 0f       	add	r18, r24
 814:	2a 30       	cpi	r18, 0x0A	; 10
 816:	40 f0       	brcs	.+16     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 818:	8e 32       	cpi	r24, 0x2E	; 46
 81a:	b9 f4       	brne	.+46     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 81c:	36 fc       	sbrc	r3, 6
 81e:	81 c1       	rjmp	.+770    	; 0xb22 <__stack+0x223>
 820:	23 2d       	mov	r18, r3
 822:	20 64       	ori	r18, 0x40	; 64
 824:	32 2e       	mov	r3, r18
 826:	19 c0       	rjmp	.+50     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 828:	36 fe       	sbrs	r3, 6
 82a:	06 c0       	rjmp	.+12     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82c:	8a e0       	ldi	r24, 0x0A	; 10
 82e:	98 9e       	mul	r9, r24
 830:	20 0d       	add	r18, r0
 832:	11 24       	eor	r1, r1
 834:	92 2e       	mov	r9, r18
 836:	11 c0       	rjmp	.+34     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 838:	ea e0       	ldi	r30, 0x0A	; 10
 83a:	2e 9e       	mul	r2, r30
 83c:	20 0d       	add	r18, r0
 83e:	11 24       	eor	r1, r1
 840:	22 2e       	mov	r2, r18
 842:	f3 2d       	mov	r31, r3
 844:	f0 62       	ori	r31, 0x20	; 32
 846:	3f 2e       	mov	r3, r31
 848:	08 c0       	rjmp	.+16     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 84a:	8c 36       	cpi	r24, 0x6C	; 108
 84c:	21 f4       	brne	.+8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 84e:	83 2d       	mov	r24, r3
 850:	80 68       	ori	r24, 0x80	; 128
 852:	38 2e       	mov	r3, r24
 854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 856:	88 36       	cpi	r24, 0x68	; 104
 858:	41 f4       	brne	.+16     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 85a:	f7 01       	movw	r30, r14
 85c:	93 fd       	sbrc	r25, 3
 85e:	85 91       	lpm	r24, Z+
 860:	93 ff       	sbrs	r25, 3
 862:	81 91       	ld	r24, Z+
 864:	7f 01       	movw	r14, r30
 866:	81 11       	cpse	r24, r1
 868:	b3 cf       	rjmp	.-154    	; 0x7d0 <vfprintf+0x5c>
 86a:	98 2f       	mov	r25, r24
 86c:	9f 7d       	andi	r25, 0xDF	; 223
 86e:	95 54       	subi	r25, 0x45	; 69
 870:	93 30       	cpi	r25, 0x03	; 3
 872:	28 f4       	brcc	.+10     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 874:	0c 5f       	subi	r16, 0xFC	; 252
 876:	1f 4f       	sbci	r17, 0xFF	; 255
 878:	9f e3       	ldi	r25, 0x3F	; 63
 87a:	99 83       	std	Y+1, r25	; 0x01
 87c:	0d c0       	rjmp	.+26     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 87e:	83 36       	cpi	r24, 0x63	; 99
 880:	31 f0       	breq	.+12     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 882:	83 37       	cpi	r24, 0x73	; 115
 884:	71 f0       	breq	.+28     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 886:	83 35       	cpi	r24, 0x53	; 83
 888:	09 f0       	breq	.+2      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 88a:	59 c0       	rjmp	.+178    	; 0x93e <__stack+0x3f>
 88c:	21 c0       	rjmp	.+66     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 88e:	f8 01       	movw	r30, r16
 890:	80 81       	ld	r24, Z
 892:	89 83       	std	Y+1, r24	; 0x01
 894:	0e 5f       	subi	r16, 0xFE	; 254
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	88 24       	eor	r8, r8
 89a:	83 94       	inc	r8
 89c:	91 2c       	mov	r9, r1
 89e:	53 01       	movw	r10, r6
 8a0:	13 c0       	rjmp	.+38     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8a2:	28 01       	movw	r4, r16
 8a4:	f2 e0       	ldi	r31, 0x02	; 2
 8a6:	4f 0e       	add	r4, r31
 8a8:	51 1c       	adc	r5, r1
 8aa:	f8 01       	movw	r30, r16
 8ac:	a0 80       	ld	r10, Z
 8ae:	b1 80       	ldd	r11, Z+1	; 0x01
 8b0:	36 fe       	sbrs	r3, 6
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 8b4:	69 2d       	mov	r22, r9
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8ba:	6f ef       	ldi	r22, 0xFF	; 255
 8bc:	7f ef       	ldi	r23, 0xFF	; 255
 8be:	c5 01       	movw	r24, r10
 8c0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strnlen>
 8c4:	4c 01       	movw	r8, r24
 8c6:	82 01       	movw	r16, r4
 8c8:	f3 2d       	mov	r31, r3
 8ca:	ff 77       	andi	r31, 0x7F	; 127
 8cc:	3f 2e       	mov	r3, r31
 8ce:	16 c0       	rjmp	.+44     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8d0:	28 01       	movw	r4, r16
 8d2:	22 e0       	ldi	r18, 0x02	; 2
 8d4:	42 0e       	add	r4, r18
 8d6:	51 1c       	adc	r5, r1
 8d8:	f8 01       	movw	r30, r16
 8da:	a0 80       	ld	r10, Z
 8dc:	b1 80       	ldd	r11, Z+1	; 0x01
 8de:	36 fe       	sbrs	r3, 6
 8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8e2:	69 2d       	mov	r22, r9
 8e4:	70 e0       	ldi	r23, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8e8:	6f ef       	ldi	r22, 0xFF	; 255
 8ea:	7f ef       	ldi	r23, 0xFF	; 255
 8ec:	c5 01       	movw	r24, r10
 8ee:	0e 94 9b 05 	call	0xb36	; 0xb36 <strnlen_P>
 8f2:	4c 01       	movw	r8, r24
 8f4:	f3 2d       	mov	r31, r3
 8f6:	f0 68       	ori	r31, 0x80	; 128
 8f8:	3f 2e       	mov	r3, r31
 8fa:	82 01       	movw	r16, r4
 8fc:	33 fc       	sbrc	r3, 3
 8fe:	1b c0       	rjmp	.+54     	; 0x936 <__stack+0x37>
 900:	82 2d       	mov	r24, r2
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	88 16       	cp	r8, r24
 906:	99 06       	cpc	r9, r25
 908:	b0 f4       	brcc	.+44     	; 0x936 <__stack+0x37>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 914:	2a 94       	dec	r2
 916:	f4 cf       	rjmp	.-24     	; 0x900 <__stack+0x1>
 918:	f5 01       	movw	r30, r10
 91a:	37 fc       	sbrc	r3, 7
 91c:	85 91       	lpm	r24, Z+
 91e:	37 fe       	sbrs	r3, 7
 920:	81 91       	ld	r24, Z+
 922:	5f 01       	movw	r10, r30
 924:	b6 01       	movw	r22, r12
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 92c:	21 10       	cpse	r2, r1
 92e:	2a 94       	dec	r2
 930:	21 e0       	ldi	r18, 0x01	; 1
 932:	82 1a       	sub	r8, r18
 934:	91 08       	sbc	r9, r1
 936:	81 14       	cp	r8, r1
 938:	91 04       	cpc	r9, r1
 93a:	71 f7       	brne	.-36     	; 0x918 <__stack+0x19>
 93c:	e8 c0       	rjmp	.+464    	; 0xb0e <__stack+0x20f>
 93e:	84 36       	cpi	r24, 0x64	; 100
 940:	11 f0       	breq	.+4      	; 0x946 <__stack+0x47>
 942:	89 36       	cpi	r24, 0x69	; 105
 944:	41 f5       	brne	.+80     	; 0x996 <__stack+0x97>
 946:	f8 01       	movw	r30, r16
 948:	37 fe       	sbrs	r3, 7
 94a:	07 c0       	rjmp	.+14     	; 0x95a <__stack+0x5b>
 94c:	60 81       	ld	r22, Z
 94e:	71 81       	ldd	r23, Z+1	; 0x01
 950:	82 81       	ldd	r24, Z+2	; 0x02
 952:	93 81       	ldd	r25, Z+3	; 0x03
 954:	0c 5f       	subi	r16, 0xFC	; 252
 956:	1f 4f       	sbci	r17, 0xFF	; 255
 958:	08 c0       	rjmp	.+16     	; 0x96a <__stack+0x6b>
 95a:	60 81       	ld	r22, Z
 95c:	71 81       	ldd	r23, Z+1	; 0x01
 95e:	07 2e       	mov	r0, r23
 960:	00 0c       	add	r0, r0
 962:	88 0b       	sbc	r24, r24
 964:	99 0b       	sbc	r25, r25
 966:	0e 5f       	subi	r16, 0xFE	; 254
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	f3 2d       	mov	r31, r3
 96c:	ff 76       	andi	r31, 0x6F	; 111
 96e:	3f 2e       	mov	r3, r31
 970:	97 ff       	sbrs	r25, 7
 972:	09 c0       	rjmp	.+18     	; 0x986 <__stack+0x87>
 974:	90 95       	com	r25
 976:	80 95       	com	r24
 978:	70 95       	com	r23
 97a:	61 95       	neg	r22
 97c:	7f 4f       	sbci	r23, 0xFF	; 255
 97e:	8f 4f       	sbci	r24, 0xFF	; 255
 980:	9f 4f       	sbci	r25, 0xFF	; 255
 982:	f0 68       	ori	r31, 0x80	; 128
 984:	3f 2e       	mov	r3, r31
 986:	2a e0       	ldi	r18, 0x0A	; 10
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	a3 01       	movw	r20, r6
 98c:	0e 94 ed 05 	call	0xbda	; 0xbda <__ultoa_invert>
 990:	88 2e       	mov	r8, r24
 992:	86 18       	sub	r8, r6
 994:	45 c0       	rjmp	.+138    	; 0xa20 <__stack+0x121>
 996:	85 37       	cpi	r24, 0x75	; 117
 998:	31 f4       	brne	.+12     	; 0x9a6 <__stack+0xa7>
 99a:	23 2d       	mov	r18, r3
 99c:	2f 7e       	andi	r18, 0xEF	; 239
 99e:	b2 2e       	mov	r11, r18
 9a0:	2a e0       	ldi	r18, 0x0A	; 10
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	25 c0       	rjmp	.+74     	; 0x9f0 <__stack+0xf1>
 9a6:	93 2d       	mov	r25, r3
 9a8:	99 7f       	andi	r25, 0xF9	; 249
 9aa:	b9 2e       	mov	r11, r25
 9ac:	8f 36       	cpi	r24, 0x6F	; 111
 9ae:	c1 f0       	breq	.+48     	; 0x9e0 <__stack+0xe1>
 9b0:	18 f4       	brcc	.+6      	; 0x9b8 <__stack+0xb9>
 9b2:	88 35       	cpi	r24, 0x58	; 88
 9b4:	79 f0       	breq	.+30     	; 0x9d4 <__stack+0xd5>
 9b6:	b5 c0       	rjmp	.+362    	; 0xb22 <__stack+0x223>
 9b8:	80 37       	cpi	r24, 0x70	; 112
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <__stack+0xc3>
 9bc:	88 37       	cpi	r24, 0x78	; 120
 9be:	21 f0       	breq	.+8      	; 0x9c8 <__stack+0xc9>
 9c0:	b0 c0       	rjmp	.+352    	; 0xb22 <__stack+0x223>
 9c2:	e9 2f       	mov	r30, r25
 9c4:	e0 61       	ori	r30, 0x10	; 16
 9c6:	be 2e       	mov	r11, r30
 9c8:	b4 fe       	sbrs	r11, 4
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__stack+0xe7>
 9cc:	fb 2d       	mov	r31, r11
 9ce:	f4 60       	ori	r31, 0x04	; 4
 9d0:	bf 2e       	mov	r11, r31
 9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <__stack+0xe7>
 9d4:	34 fe       	sbrs	r3, 4
 9d6:	0a c0       	rjmp	.+20     	; 0x9ec <__stack+0xed>
 9d8:	29 2f       	mov	r18, r25
 9da:	26 60       	ori	r18, 0x06	; 6
 9dc:	b2 2e       	mov	r11, r18
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <__stack+0xed>
 9e0:	28 e0       	ldi	r18, 0x08	; 8
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__stack+0xf1>
 9e6:	20 e1       	ldi	r18, 0x10	; 16
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <__stack+0xf1>
 9ec:	20 e1       	ldi	r18, 0x10	; 16
 9ee:	32 e0       	ldi	r19, 0x02	; 2
 9f0:	f8 01       	movw	r30, r16
 9f2:	b7 fe       	sbrs	r11, 7
 9f4:	07 c0       	rjmp	.+14     	; 0xa04 <__stack+0x105>
 9f6:	60 81       	ld	r22, Z
 9f8:	71 81       	ldd	r23, Z+1	; 0x01
 9fa:	82 81       	ldd	r24, Z+2	; 0x02
 9fc:	93 81       	ldd	r25, Z+3	; 0x03
 9fe:	0c 5f       	subi	r16, 0xFC	; 252
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	06 c0       	rjmp	.+12     	; 0xa10 <__stack+0x111>
 a04:	60 81       	ld	r22, Z
 a06:	71 81       	ldd	r23, Z+1	; 0x01
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 5f       	subi	r16, 0xFE	; 254
 a0e:	1f 4f       	sbci	r17, 0xFF	; 255
 a10:	a3 01       	movw	r20, r6
 a12:	0e 94 ed 05 	call	0xbda	; 0xbda <__ultoa_invert>
 a16:	88 2e       	mov	r8, r24
 a18:	86 18       	sub	r8, r6
 a1a:	fb 2d       	mov	r31, r11
 a1c:	ff 77       	andi	r31, 0x7F	; 127
 a1e:	3f 2e       	mov	r3, r31
 a20:	36 fe       	sbrs	r3, 6
 a22:	0d c0       	rjmp	.+26     	; 0xa3e <__stack+0x13f>
 a24:	23 2d       	mov	r18, r3
 a26:	2e 7f       	andi	r18, 0xFE	; 254
 a28:	a2 2e       	mov	r10, r18
 a2a:	89 14       	cp	r8, r9
 a2c:	58 f4       	brcc	.+22     	; 0xa44 <__stack+0x145>
 a2e:	34 fe       	sbrs	r3, 4
 a30:	0b c0       	rjmp	.+22     	; 0xa48 <__stack+0x149>
 a32:	32 fc       	sbrc	r3, 2
 a34:	09 c0       	rjmp	.+18     	; 0xa48 <__stack+0x149>
 a36:	83 2d       	mov	r24, r3
 a38:	8e 7e       	andi	r24, 0xEE	; 238
 a3a:	a8 2e       	mov	r10, r24
 a3c:	05 c0       	rjmp	.+10     	; 0xa48 <__stack+0x149>
 a3e:	b8 2c       	mov	r11, r8
 a40:	a3 2c       	mov	r10, r3
 a42:	03 c0       	rjmp	.+6      	; 0xa4a <__stack+0x14b>
 a44:	b8 2c       	mov	r11, r8
 a46:	01 c0       	rjmp	.+2      	; 0xa4a <__stack+0x14b>
 a48:	b9 2c       	mov	r11, r9
 a4a:	a4 fe       	sbrs	r10, 4
 a4c:	0f c0       	rjmp	.+30     	; 0xa6c <__stack+0x16d>
 a4e:	fe 01       	movw	r30, r28
 a50:	e8 0d       	add	r30, r8
 a52:	f1 1d       	adc	r31, r1
 a54:	80 81       	ld	r24, Z
 a56:	80 33       	cpi	r24, 0x30	; 48
 a58:	21 f4       	brne	.+8      	; 0xa62 <__stack+0x163>
 a5a:	9a 2d       	mov	r25, r10
 a5c:	99 7e       	andi	r25, 0xE9	; 233
 a5e:	a9 2e       	mov	r10, r25
 a60:	09 c0       	rjmp	.+18     	; 0xa74 <__stack+0x175>
 a62:	a2 fe       	sbrs	r10, 2
 a64:	06 c0       	rjmp	.+12     	; 0xa72 <__stack+0x173>
 a66:	b3 94       	inc	r11
 a68:	b3 94       	inc	r11
 a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__stack+0x175>
 a6c:	8a 2d       	mov	r24, r10
 a6e:	86 78       	andi	r24, 0x86	; 134
 a70:	09 f0       	breq	.+2      	; 0xa74 <__stack+0x175>
 a72:	b3 94       	inc	r11
 a74:	a3 fc       	sbrc	r10, 3
 a76:	11 c0       	rjmp	.+34     	; 0xa9a <__stack+0x19b>
 a78:	a0 fe       	sbrs	r10, 0
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <__stack+0x189>
 a7c:	b2 14       	cp	r11, r2
 a7e:	88 f4       	brcc	.+34     	; 0xaa2 <__stack+0x1a3>
 a80:	28 0c       	add	r2, r8
 a82:	92 2c       	mov	r9, r2
 a84:	9b 18       	sub	r9, r11
 a86:	0e c0       	rjmp	.+28     	; 0xaa4 <__stack+0x1a5>
 a88:	b2 14       	cp	r11, r2
 a8a:	60 f4       	brcc	.+24     	; 0xaa4 <__stack+0x1a5>
 a8c:	b6 01       	movw	r22, r12
 a8e:	80 e2       	ldi	r24, 0x20	; 32
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 a96:	b3 94       	inc	r11
 a98:	f7 cf       	rjmp	.-18     	; 0xa88 <__stack+0x189>
 a9a:	b2 14       	cp	r11, r2
 a9c:	18 f4       	brcc	.+6      	; 0xaa4 <__stack+0x1a5>
 a9e:	2b 18       	sub	r2, r11
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <__stack+0x1a7>
 aa2:	98 2c       	mov	r9, r8
 aa4:	21 2c       	mov	r2, r1
 aa6:	a4 fe       	sbrs	r10, 4
 aa8:	10 c0       	rjmp	.+32     	; 0xaca <__stack+0x1cb>
 aaa:	b6 01       	movw	r22, r12
 aac:	80 e3       	ldi	r24, 0x30	; 48
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 ab4:	a2 fe       	sbrs	r10, 2
 ab6:	17 c0       	rjmp	.+46     	; 0xae6 <__stack+0x1e7>
 ab8:	a1 fc       	sbrc	r10, 1
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <__stack+0x1c3>
 abc:	88 e7       	ldi	r24, 0x78	; 120
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <__stack+0x1c7>
 ac2:	88 e5       	ldi	r24, 0x58	; 88
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	b6 01       	movw	r22, r12
 ac8:	0c c0       	rjmp	.+24     	; 0xae2 <__stack+0x1e3>
 aca:	8a 2d       	mov	r24, r10
 acc:	86 78       	andi	r24, 0x86	; 134
 ace:	59 f0       	breq	.+22     	; 0xae6 <__stack+0x1e7>
 ad0:	a1 fe       	sbrs	r10, 1
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <__stack+0x1d9>
 ad4:	8b e2       	ldi	r24, 0x2B	; 43
 ad6:	01 c0       	rjmp	.+2      	; 0xada <__stack+0x1db>
 ad8:	80 e2       	ldi	r24, 0x20	; 32
 ada:	a7 fc       	sbrc	r10, 7
 adc:	8d e2       	ldi	r24, 0x2D	; 45
 ade:	b6 01       	movw	r22, r12
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 ae6:	89 14       	cp	r8, r9
 ae8:	38 f4       	brcc	.+14     	; 0xaf8 <__stack+0x1f9>
 aea:	b6 01       	movw	r22, r12
 aec:	80 e3       	ldi	r24, 0x30	; 48
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 af4:	9a 94       	dec	r9
 af6:	f7 cf       	rjmp	.-18     	; 0xae6 <__stack+0x1e7>
 af8:	8a 94       	dec	r8
 afa:	f3 01       	movw	r30, r6
 afc:	e8 0d       	add	r30, r8
 afe:	f1 1d       	adc	r31, r1
 b00:	80 81       	ld	r24, Z
 b02:	b6 01       	movw	r22, r12
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 b0a:	81 10       	cpse	r8, r1
 b0c:	f5 cf       	rjmp	.-22     	; 0xaf8 <__stack+0x1f9>
 b0e:	22 20       	and	r2, r2
 b10:	09 f4       	brne	.+2      	; 0xb14 <__stack+0x215>
 b12:	42 ce       	rjmp	.-892    	; 0x798 <vfprintf+0x24>
 b14:	b6 01       	movw	r22, r12
 b16:	80 e2       	ldi	r24, 0x20	; 32
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 b1e:	2a 94       	dec	r2
 b20:	f6 cf       	rjmp	.-20     	; 0xb0e <__stack+0x20f>
 b22:	f6 01       	movw	r30, r12
 b24:	86 81       	ldd	r24, Z+6	; 0x06
 b26:	97 81       	ldd	r25, Z+7	; 0x07
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <__stack+0x22f>
 b2a:	8f ef       	ldi	r24, 0xFF	; 255
 b2c:	9f ef       	ldi	r25, 0xFF	; 255
 b2e:	2b 96       	adiw	r28, 0x0b	; 11
 b30:	e2 e1       	ldi	r30, 0x12	; 18
 b32:	0c 94 67 06 	jmp	0xcce	; 0xcce <__epilogue_restores__>

00000b36 <strnlen_P>:
 b36:	fc 01       	movw	r30, r24
 b38:	05 90       	lpm	r0, Z+
 b3a:	61 50       	subi	r22, 0x01	; 1
 b3c:	70 40       	sbci	r23, 0x00	; 0
 b3e:	01 10       	cpse	r0, r1
 b40:	d8 f7       	brcc	.-10     	; 0xb38 <strnlen_P+0x2>
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	8e 0f       	add	r24, r30
 b48:	9f 1f       	adc	r25, r31
 b4a:	08 95       	ret

00000b4c <strnlen>:
 b4c:	fc 01       	movw	r30, r24
 b4e:	61 50       	subi	r22, 0x01	; 1
 b50:	70 40       	sbci	r23, 0x00	; 0
 b52:	01 90       	ld	r0, Z+
 b54:	01 10       	cpse	r0, r1
 b56:	d8 f7       	brcc	.-10     	; 0xb4e <strnlen+0x2>
 b58:	80 95       	com	r24
 b5a:	90 95       	com	r25
 b5c:	8e 0f       	add	r24, r30
 b5e:	9f 1f       	adc	r25, r31
 b60:	08 95       	ret

00000b62 <fputc>:
 b62:	0f 93       	push	r16
 b64:	1f 93       	push	r17
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	fb 01       	movw	r30, r22
 b6c:	23 81       	ldd	r18, Z+3	; 0x03
 b6e:	21 fd       	sbrc	r18, 1
 b70:	03 c0       	rjmp	.+6      	; 0xb78 <fputc+0x16>
 b72:	8f ef       	ldi	r24, 0xFF	; 255
 b74:	9f ef       	ldi	r25, 0xFF	; 255
 b76:	2c c0       	rjmp	.+88     	; 0xbd0 <fputc+0x6e>
 b78:	22 ff       	sbrs	r18, 2
 b7a:	16 c0       	rjmp	.+44     	; 0xba8 <fputc+0x46>
 b7c:	46 81       	ldd	r20, Z+6	; 0x06
 b7e:	57 81       	ldd	r21, Z+7	; 0x07
 b80:	24 81       	ldd	r18, Z+4	; 0x04
 b82:	35 81       	ldd	r19, Z+5	; 0x05
 b84:	42 17       	cp	r20, r18
 b86:	53 07       	cpc	r21, r19
 b88:	44 f4       	brge	.+16     	; 0xb9a <fputc+0x38>
 b8a:	a0 81       	ld	r26, Z
 b8c:	b1 81       	ldd	r27, Z+1	; 0x01
 b8e:	9d 01       	movw	r18, r26
 b90:	2f 5f       	subi	r18, 0xFF	; 255
 b92:	3f 4f       	sbci	r19, 0xFF	; 255
 b94:	31 83       	std	Z+1, r19	; 0x01
 b96:	20 83       	st	Z, r18
 b98:	8c 93       	st	X, r24
 b9a:	26 81       	ldd	r18, Z+6	; 0x06
 b9c:	37 81       	ldd	r19, Z+7	; 0x07
 b9e:	2f 5f       	subi	r18, 0xFF	; 255
 ba0:	3f 4f       	sbci	r19, 0xFF	; 255
 ba2:	37 83       	std	Z+7, r19	; 0x07
 ba4:	26 83       	std	Z+6, r18	; 0x06
 ba6:	14 c0       	rjmp	.+40     	; 0xbd0 <fputc+0x6e>
 ba8:	8b 01       	movw	r16, r22
 baa:	ec 01       	movw	r28, r24
 bac:	fb 01       	movw	r30, r22
 bae:	00 84       	ldd	r0, Z+8	; 0x08
 bb0:	f1 85       	ldd	r31, Z+9	; 0x09
 bb2:	e0 2d       	mov	r30, r0
 bb4:	09 95       	icall
 bb6:	89 2b       	or	r24, r25
 bb8:	e1 f6       	brne	.-72     	; 0xb72 <fputc+0x10>
 bba:	d8 01       	movw	r26, r16
 bbc:	16 96       	adiw	r26, 0x06	; 6
 bbe:	8d 91       	ld	r24, X+
 bc0:	9c 91       	ld	r25, X
 bc2:	17 97       	sbiw	r26, 0x07	; 7
 bc4:	01 96       	adiw	r24, 0x01	; 1
 bc6:	17 96       	adiw	r26, 0x07	; 7
 bc8:	9c 93       	st	X, r25
 bca:	8e 93       	st	-X, r24
 bcc:	16 97       	sbiw	r26, 0x06	; 6
 bce:	ce 01       	movw	r24, r28
 bd0:	df 91       	pop	r29
 bd2:	cf 91       	pop	r28
 bd4:	1f 91       	pop	r17
 bd6:	0f 91       	pop	r16
 bd8:	08 95       	ret

00000bda <__ultoa_invert>:
 bda:	fa 01       	movw	r30, r20
 bdc:	aa 27       	eor	r26, r26
 bde:	28 30       	cpi	r18, 0x08	; 8
 be0:	51 f1       	breq	.+84     	; 0xc36 <__ultoa_invert+0x5c>
 be2:	20 31       	cpi	r18, 0x10	; 16
 be4:	81 f1       	breq	.+96     	; 0xc46 <__ultoa_invert+0x6c>
 be6:	e8 94       	clt
 be8:	6f 93       	push	r22
 bea:	6e 7f       	andi	r22, 0xFE	; 254
 bec:	6e 5f       	subi	r22, 0xFE	; 254
 bee:	7f 4f       	sbci	r23, 0xFF	; 255
 bf0:	8f 4f       	sbci	r24, 0xFF	; 255
 bf2:	9f 4f       	sbci	r25, 0xFF	; 255
 bf4:	af 4f       	sbci	r26, 0xFF	; 255
 bf6:	b1 e0       	ldi	r27, 0x01	; 1
 bf8:	3e d0       	rcall	.+124    	; 0xc76 <__ultoa_invert+0x9c>
 bfa:	b4 e0       	ldi	r27, 0x04	; 4
 bfc:	3c d0       	rcall	.+120    	; 0xc76 <__ultoa_invert+0x9c>
 bfe:	67 0f       	add	r22, r23
 c00:	78 1f       	adc	r23, r24
 c02:	89 1f       	adc	r24, r25
 c04:	9a 1f       	adc	r25, r26
 c06:	a1 1d       	adc	r26, r1
 c08:	68 0f       	add	r22, r24
 c0a:	79 1f       	adc	r23, r25
 c0c:	8a 1f       	adc	r24, r26
 c0e:	91 1d       	adc	r25, r1
 c10:	a1 1d       	adc	r26, r1
 c12:	6a 0f       	add	r22, r26
 c14:	71 1d       	adc	r23, r1
 c16:	81 1d       	adc	r24, r1
 c18:	91 1d       	adc	r25, r1
 c1a:	a1 1d       	adc	r26, r1
 c1c:	20 d0       	rcall	.+64     	; 0xc5e <__ultoa_invert+0x84>
 c1e:	09 f4       	brne	.+2      	; 0xc22 <__ultoa_invert+0x48>
 c20:	68 94       	set
 c22:	3f 91       	pop	r19
 c24:	2a e0       	ldi	r18, 0x0A	; 10
 c26:	26 9f       	mul	r18, r22
 c28:	11 24       	eor	r1, r1
 c2a:	30 19       	sub	r19, r0
 c2c:	30 5d       	subi	r19, 0xD0	; 208
 c2e:	31 93       	st	Z+, r19
 c30:	de f6       	brtc	.-74     	; 0xbe8 <__ultoa_invert+0xe>
 c32:	cf 01       	movw	r24, r30
 c34:	08 95       	ret
 c36:	46 2f       	mov	r20, r22
 c38:	47 70       	andi	r20, 0x07	; 7
 c3a:	40 5d       	subi	r20, 0xD0	; 208
 c3c:	41 93       	st	Z+, r20
 c3e:	b3 e0       	ldi	r27, 0x03	; 3
 c40:	0f d0       	rcall	.+30     	; 0xc60 <__ultoa_invert+0x86>
 c42:	c9 f7       	brne	.-14     	; 0xc36 <__ultoa_invert+0x5c>
 c44:	f6 cf       	rjmp	.-20     	; 0xc32 <__ultoa_invert+0x58>
 c46:	46 2f       	mov	r20, r22
 c48:	4f 70       	andi	r20, 0x0F	; 15
 c4a:	40 5d       	subi	r20, 0xD0	; 208
 c4c:	4a 33       	cpi	r20, 0x3A	; 58
 c4e:	18 f0       	brcs	.+6      	; 0xc56 <__ultoa_invert+0x7c>
 c50:	49 5d       	subi	r20, 0xD9	; 217
 c52:	31 fd       	sbrc	r19, 1
 c54:	40 52       	subi	r20, 0x20	; 32
 c56:	41 93       	st	Z+, r20
 c58:	02 d0       	rcall	.+4      	; 0xc5e <__ultoa_invert+0x84>
 c5a:	a9 f7       	brne	.-22     	; 0xc46 <__ultoa_invert+0x6c>
 c5c:	ea cf       	rjmp	.-44     	; 0xc32 <__ultoa_invert+0x58>
 c5e:	b4 e0       	ldi	r27, 0x04	; 4
 c60:	a6 95       	lsr	r26
 c62:	97 95       	ror	r25
 c64:	87 95       	ror	r24
 c66:	77 95       	ror	r23
 c68:	67 95       	ror	r22
 c6a:	ba 95       	dec	r27
 c6c:	c9 f7       	brne	.-14     	; 0xc60 <__ultoa_invert+0x86>
 c6e:	00 97       	sbiw	r24, 0x00	; 0
 c70:	61 05       	cpc	r22, r1
 c72:	71 05       	cpc	r23, r1
 c74:	08 95       	ret
 c76:	9b 01       	movw	r18, r22
 c78:	ac 01       	movw	r20, r24
 c7a:	0a 2e       	mov	r0, r26
 c7c:	06 94       	lsr	r0
 c7e:	57 95       	ror	r21
 c80:	47 95       	ror	r20
 c82:	37 95       	ror	r19
 c84:	27 95       	ror	r18
 c86:	ba 95       	dec	r27
 c88:	c9 f7       	brne	.-14     	; 0xc7c <__ultoa_invert+0xa2>
 c8a:	62 0f       	add	r22, r18
 c8c:	73 1f       	adc	r23, r19
 c8e:	84 1f       	adc	r24, r20
 c90:	95 1f       	adc	r25, r21
 c92:	a0 1d       	adc	r26, r0
 c94:	08 95       	ret

00000c96 <__prologue_saves__>:
 c96:	2f 92       	push	r2
 c98:	3f 92       	push	r3
 c9a:	4f 92       	push	r4
 c9c:	5f 92       	push	r5
 c9e:	6f 92       	push	r6
 ca0:	7f 92       	push	r7
 ca2:	8f 92       	push	r8
 ca4:	9f 92       	push	r9
 ca6:	af 92       	push	r10
 ca8:	bf 92       	push	r11
 caa:	cf 92       	push	r12
 cac:	df 92       	push	r13
 cae:	ef 92       	push	r14
 cb0:	ff 92       	push	r15
 cb2:	0f 93       	push	r16
 cb4:	1f 93       	push	r17
 cb6:	cf 93       	push	r28
 cb8:	df 93       	push	r29
 cba:	cd b7       	in	r28, 0x3d	; 61
 cbc:	de b7       	in	r29, 0x3e	; 62
 cbe:	ca 1b       	sub	r28, r26
 cc0:	db 0b       	sbc	r29, r27
 cc2:	0f b6       	in	r0, 0x3f	; 63
 cc4:	f8 94       	cli
 cc6:	de bf       	out	0x3e, r29	; 62
 cc8:	0f be       	out	0x3f, r0	; 63
 cca:	cd bf       	out	0x3d, r28	; 61
 ccc:	09 94       	ijmp

00000cce <__epilogue_restores__>:
 cce:	2a 88       	ldd	r2, Y+18	; 0x12
 cd0:	39 88       	ldd	r3, Y+17	; 0x11
 cd2:	48 88       	ldd	r4, Y+16	; 0x10
 cd4:	5f 84       	ldd	r5, Y+15	; 0x0f
 cd6:	6e 84       	ldd	r6, Y+14	; 0x0e
 cd8:	7d 84       	ldd	r7, Y+13	; 0x0d
 cda:	8c 84       	ldd	r8, Y+12	; 0x0c
 cdc:	9b 84       	ldd	r9, Y+11	; 0x0b
 cde:	aa 84       	ldd	r10, Y+10	; 0x0a
 ce0:	b9 84       	ldd	r11, Y+9	; 0x09
 ce2:	c8 84       	ldd	r12, Y+8	; 0x08
 ce4:	df 80       	ldd	r13, Y+7	; 0x07
 ce6:	ee 80       	ldd	r14, Y+6	; 0x06
 ce8:	fd 80       	ldd	r15, Y+5	; 0x05
 cea:	0c 81       	ldd	r16, Y+4	; 0x04
 cec:	1b 81       	ldd	r17, Y+3	; 0x03
 cee:	aa 81       	ldd	r26, Y+2	; 0x02
 cf0:	b9 81       	ldd	r27, Y+1	; 0x01
 cf2:	ce 0f       	add	r28, r30
 cf4:	d1 1d       	adc	r29, r1
 cf6:	0f b6       	in	r0, 0x3f	; 63
 cf8:	f8 94       	cli
 cfa:	de bf       	out	0x3e, r29	; 62
 cfc:	0f be       	out	0x3f, r0	; 63
 cfe:	cd bf       	out	0x3d, r28	; 61
 d00:	ed 01       	movw	r28, r26
 d02:	08 95       	ret

00000d04 <_exit>:
 d04:	f8 94       	cli

00000d06 <__stop_program>:
 d06:	ff cf       	rjmp	.-2      	; 0xd06 <__stop_program>
